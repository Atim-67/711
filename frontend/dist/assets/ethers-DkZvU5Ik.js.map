{"version":3,"file":"ethers-DkZvU5Ik.js","sources":["../../node_modules/ethers/lib.esm/_version.js","../../node_modules/ethers/lib.esm/utils/properties.js","../../node_modules/ethers/lib.esm/utils/errors.js","../../node_modules/ethers/lib.esm/utils/data.js","../../node_modules/ethers/lib.esm/utils/maths.js","../../node_modules/ethers/lib.esm/utils/base58.js","../../node_modules/ethers/lib.esm/utils/utf8.js","../../node_modules/ethers/lib.esm/utils/rlp-decode.js","../../node_modules/ethers/lib.esm/utils/rlp-encode.js","../../node_modules/ethers/lib.esm/utils/uuid.js","../../node_modules/@noble/hashes/esm/_assert.js","../../node_modules/@noble/hashes/esm/crypto.js","../../node_modules/@noble/hashes/esm/utils.js","../../node_modules/@noble/hashes/esm/hmac.js","../../node_modules/@noble/hashes/esm/pbkdf2.js","../../node_modules/@noble/hashes/esm/_sha2.js","../../node_modules/@noble/hashes/esm/sha256.js","../../node_modules/@noble/hashes/esm/_u64.js","../../node_modules/@noble/hashes/esm/sha512.js","../../node_modules/ethers/lib.esm/crypto/crypto-browser.js","../../node_modules/ethers/lib.esm/crypto/hmac.js","../../node_modules/@noble/hashes/esm/sha3.js","../../node_modules/ethers/lib.esm/crypto/keccak.js","../../node_modules/@noble/hashes/esm/ripemd160.js","../../node_modules/ethers/lib.esm/crypto/ripemd160.js","../../node_modules/ethers/lib.esm/crypto/pbkdf2.js","../../node_modules/ethers/lib.esm/crypto/random.js","../../node_modules/@noble/hashes/esm/scrypt.js","../../node_modules/ethers/lib.esm/crypto/scrypt.js","../../node_modules/ethers/lib.esm/crypto/sha2.js","../../node_modules/@noble/curves/esm/abstract/utils.js","../../node_modules/@noble/curves/esm/abstract/modular.js","../../node_modules/@noble/curves/esm/abstract/curve.js","../../node_modules/@noble/curves/esm/abstract/weierstrass.js","../../node_modules/@noble/curves/esm/_shortw_utils.js","../../node_modules/@noble/curves/esm/secp256k1.js","../../node_modules/ethers/lib.esm/constants/addresses.js","../../node_modules/ethers/lib.esm/constants/hashes.js","../../node_modules/ethers/lib.esm/constants/strings.js","../../node_modules/ethers/lib.esm/crypto/signature.js","../../node_modules/ethers/lib.esm/crypto/signing-key.js","../../node_modules/ethers/lib.esm/address/address.js","../../node_modules/ethers/lib.esm/address/checks.js","../../node_modules/ethers/lib.esm/hash/id.js","../../node_modules/ethers/lib.esm/transaction/accesslist.js","../../node_modules/ethers/lib.esm/transaction/address.js","../../node_modules/ethers/lib.esm/transaction/transaction.js","../../node_modules/ethers/lib.esm/hash/message.js","../../node_modules/ethers/lib.esm/hash/typed-data.js","../../node_modules/ethers/lib.esm/providers/provider.js","../../node_modules/ethers/lib.esm/providers/abstract-signer.js","../../node_modules/ethers/lib.esm/wallet/base-wallet.js","../../node_modules/ethers/lib.esm/wordlists/decode-owl.js","../../node_modules/ethers/lib.esm/wordlists/wordlist.js","../../node_modules/ethers/lib.esm/wordlists/wordlist-owl.js","../../node_modules/ethers/lib.esm/wordlists/lang-en.js","../../node_modules/ethers/lib.esm/wallet/mnemonic.js","../../node_modules/aes-js/lib.esm/aes.js","../../node_modules/aes-js/lib.esm/mode.js","../../node_modules/aes-js/lib.esm/mode-cbc.js","../../node_modules/aes-js/lib.esm/mode-ctr.js","../../node_modules/aes-js/lib.esm/padding.js","../../node_modules/ethers/lib.esm/wallet/utils.js","../../node_modules/ethers/lib.esm/wallet/json-keystore.js","../../node_modules/ethers/lib.esm/wallet/hdwallet.js","../../node_modules/ethers/lib.esm/wallet/json-crowdsale.js","../../node_modules/ethers/lib.esm/wallet/wallet.js"],"sourcesContent":["/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */\r\n/**\r\n *  The current version of Ethers.\r\n */\r\nexport const version = \"6.13.5\";\r\n//# sourceMappingURL=_version.js.map","/**\r\n *  Property helper functions.\r\n *\r\n *  @_subsection api/utils:Properties  [about-properties]\r\n */\r\nfunction checkType(value, type, name) {\r\n    const types = type.split(\"|\").map(t => t.trim());\r\n    for (let i = 0; i < types.length; i++) {\r\n        switch (type) {\r\n            case \"any\":\r\n                return;\r\n            case \"bigint\":\r\n            case \"boolean\":\r\n            case \"number\":\r\n            case \"string\":\r\n                if (typeof (value) === type) {\r\n                    return;\r\n                }\r\n        }\r\n    }\r\n    const error = new Error(`invalid value for type ${type}`);\r\n    error.code = \"INVALID_ARGUMENT\";\r\n    error.argument = `value.${name}`;\r\n    error.value = value;\r\n    throw error;\r\n}\r\n/**\r\n *  Resolves to a new object that is a copy of %%value%%, but with all\r\n *  values resolved.\r\n */\r\nexport async function resolveProperties(value) {\r\n    const keys = Object.keys(value);\r\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));\r\n    return results.reduce((accum, v, index) => {\r\n        accum[keys[index]] = v;\r\n        return accum;\r\n    }, {});\r\n}\r\n/**\r\n *  Assigns the %%values%% to %%target%% as read-only values.\r\n *\r\n *  It %%types%% is specified, the values are checked.\r\n */\r\nexport function defineProperties(target, values, types) {\r\n    for (let key in values) {\r\n        let value = values[key];\r\n        const type = (types ? types[key] : null);\r\n        if (type) {\r\n            checkType(value, type, key);\r\n        }\r\n        Object.defineProperty(target, key, { enumerable: true, value, writable: false });\r\n    }\r\n}\r\n//# sourceMappingURL=properties.js.map","/**\r\n *  All errors in ethers include properties to ensure they are both\r\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\r\n *\r\n *  The [[isError]] function can be used to check the error ``code`` and\r\n *  provide a type guard for the properties present on that error interface.\r\n *\r\n *  @_section: api/utils/errors:Errors  [about-errors]\r\n */\r\nimport { version } from \"../_version.js\";\r\nimport { defineProperties } from \"./properties.js\";\r\nfunction stringify(value) {\r\n    if (value == null) {\r\n        return \"null\";\r\n    }\r\n    if (Array.isArray(value)) {\r\n        return \"[ \" + (value.map(stringify)).join(\", \") + \" ]\";\r\n    }\r\n    if (value instanceof Uint8Array) {\r\n        const HEX = \"0123456789abcdef\";\r\n        let result = \"0x\";\r\n        for (let i = 0; i < value.length; i++) {\r\n            result += HEX[value[i] >> 4];\r\n            result += HEX[value[i] & 0xf];\r\n        }\r\n        return result;\r\n    }\r\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\r\n        return stringify(value.toJSON());\r\n    }\r\n    switch (typeof (value)) {\r\n        case \"boolean\":\r\n        case \"symbol\":\r\n            return value.toString();\r\n        case \"bigint\":\r\n            return BigInt(value).toString();\r\n        case \"number\":\r\n            return (value).toString();\r\n        case \"string\":\r\n            return JSON.stringify(value);\r\n        case \"object\": {\r\n            const keys = Object.keys(value);\r\n            keys.sort();\r\n            return \"{ \" + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(\", \") + \" }\";\r\n        }\r\n    }\r\n    return `[ COULD NOT SERIALIZE ]`;\r\n}\r\n/**\r\n *  Returns true if the %%error%% matches an error thrown by ethers\r\n *  that matches the error %%code%%.\r\n *\r\n *  In TypeScript environments, this can be used to check that %%error%%\r\n *  matches an EthersError type, which means the expected properties will\r\n *  be set.\r\n *\r\n *  @See [ErrorCodes](api:ErrorCode)\r\n *  @example\r\n *    try {\r\n *      // code....\r\n *    } catch (e) {\r\n *      if (isError(e, \"CALL_EXCEPTION\")) {\r\n *          // The Type Guard has validated this object\r\n *          console.log(e.data);\r\n *      }\r\n *    }\r\n */\r\nexport function isError(error, code) {\r\n    return (error && error.code === code);\r\n}\r\n/**\r\n *  Returns true if %%error%% is a [[CallExceptionError].\r\n */\r\nexport function isCallException(error) {\r\n    return isError(error, \"CALL_EXCEPTION\");\r\n}\r\n/**\r\n *  Returns a new Error configured to the format ethers emits errors, with\r\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties\r\n *  for the corresponding EthersError.\r\n *\r\n *  Each error in ethers includes the version of ethers, a\r\n *  machine-readable [[ErrorCode]], and depending on %%code%%, additional\r\n *  required properties. The error message will also include the %%message%%,\r\n *  ethers version, %%code%% and all additional properties, serialized.\r\n */\r\nexport function makeError(message, code, info) {\r\n    let shortMessage = message;\r\n    {\r\n        const details = [];\r\n        if (info) {\r\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\r\n                throw new Error(`value will overwrite populated values: ${stringify(info)}`);\r\n            }\r\n            for (const key in info) {\r\n                if (key === \"shortMessage\") {\r\n                    continue;\r\n                }\r\n                const value = (info[key]);\r\n                //                try {\r\n                details.push(key + \"=\" + stringify(value));\r\n                //                } catch (error: any) {\r\n                //                console.log(\"MMM\", error.message);\r\n                //                    details.push(key + \"=[could not serialize object]\");\r\n                //                }\r\n            }\r\n        }\r\n        details.push(`code=${code}`);\r\n        details.push(`version=${version}`);\r\n        if (details.length) {\r\n            message += \" (\" + details.join(\", \") + \")\";\r\n        }\r\n    }\r\n    let error;\r\n    switch (code) {\r\n        case \"INVALID_ARGUMENT\":\r\n            error = new TypeError(message);\r\n            break;\r\n        case \"NUMERIC_FAULT\":\r\n        case \"BUFFER_OVERRUN\":\r\n            error = new RangeError(message);\r\n            break;\r\n        default:\r\n            error = new Error(message);\r\n    }\r\n    defineProperties(error, { code });\r\n    if (info) {\r\n        Object.assign(error, info);\r\n    }\r\n    if (error.shortMessage == null) {\r\n        defineProperties(error, { shortMessage });\r\n    }\r\n    return error;\r\n}\r\n/**\r\n *  Throws an EthersError with %%message%%, %%code%% and additional error\r\n *  %%info%% when %%check%% is falsish..\r\n *\r\n *  @see [[api:makeError]]\r\n */\r\nexport function assert(check, message, code, info) {\r\n    if (!check) {\r\n        throw makeError(message, code, info);\r\n    }\r\n}\r\n/**\r\n *  A simple helper to simply ensuring provided arguments match expected\r\n *  constraints, throwing if not.\r\n *\r\n *  In TypeScript environments, the %%check%% has been asserted true, so\r\n *  any further code does not need additional compile-time checks.\r\n */\r\nexport function assertArgument(check, message, name, value) {\r\n    assert(check, message, \"INVALID_ARGUMENT\", { argument: name, value: value });\r\n}\r\nexport function assertArgumentCount(count, expectedCount, message) {\r\n    if (message == null) {\r\n        message = \"\";\r\n    }\r\n    if (message) {\r\n        message = \": \" + message;\r\n    }\r\n    assert(count >= expectedCount, \"missing argument\" + message, \"MISSING_ARGUMENT\", {\r\n        count: count,\r\n        expectedCount: expectedCount\r\n    });\r\n    assert(count <= expectedCount, \"too many arguments\" + message, \"UNEXPECTED_ARGUMENT\", {\r\n        count: count,\r\n        expectedCount: expectedCount\r\n    });\r\n}\r\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\r\n    try {\r\n        // General test for normalize\r\n        /* c8 ignore start */\r\n        if (\"test\".normalize(form) !== \"test\") {\r\n            throw new Error(\"bad\");\r\n        }\r\n        ;\r\n        /* c8 ignore stop */\r\n        if (form === \"NFD\") {\r\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\r\n            const expected = String.fromCharCode(0x65, 0x0301);\r\n            /* c8 ignore start */\r\n            if (check !== expected) {\r\n                throw new Error(\"broken\");\r\n            }\r\n            /* c8 ignore stop */\r\n        }\r\n        accum.push(form);\r\n    }\r\n    catch (error) { }\r\n    return accum;\r\n}, []);\r\n/**\r\n *  Throws if the normalization %%form%% is not supported.\r\n */\r\nexport function assertNormalize(form) {\r\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\r\n        operation: \"String.prototype.normalize\", info: { form }\r\n    });\r\n}\r\n/**\r\n *  Many classes use file-scoped values to guard the constructor,\r\n *  making it effectively private. This facilitates that pattern\r\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\r\n *  throwing if not, indicating the %%className%% if provided.\r\n */\r\nexport function assertPrivate(givenGuard, guard, className) {\r\n    if (className == null) {\r\n        className = \"\";\r\n    }\r\n    if (givenGuard !== guard) {\r\n        let method = className, operation = \"new\";\r\n        if (className) {\r\n            method += \".\";\r\n            operation += \" \" + className;\r\n        }\r\n        assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\r\n            operation\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=errors.js.map","/**\r\n *  Some data helpers.\r\n *\r\n *\r\n *  @_subsection api/utils:Data Helpers  [about-data]\r\n */\r\nimport { assert, assertArgument } from \"./errors.js\";\r\nfunction _getBytes(value, name, copy) {\r\n    if (value instanceof Uint8Array) {\r\n        if (copy) {\r\n            return new Uint8Array(value);\r\n        }\r\n        return value;\r\n    }\r\n    if (typeof (value) === \"string\" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {\r\n        const result = new Uint8Array((value.length - 2) / 2);\r\n        let offset = 2;\r\n        for (let i = 0; i < result.length; i++) {\r\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\r\n            offset += 2;\r\n        }\r\n        return result;\r\n    }\r\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\r\n}\r\n/**\r\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\r\n *  the original %%value%% is returned; if a copy is required use\r\n *  [[getBytesCopy]].\r\n *\r\n *  @see: getBytesCopy\r\n */\r\nexport function getBytes(value, name) {\r\n    return _getBytes(value, name, false);\r\n}\r\n/**\r\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\r\n *  to prevent any modifications of the returned value from being\r\n *  reflected elsewhere.\r\n *\r\n *  @see: getBytes\r\n */\r\nexport function getBytesCopy(value, name) {\r\n    return _getBytes(value, name, true);\r\n}\r\n/**\r\n *  Returns true if %%value%% is a valid [[HexString]].\r\n *\r\n *  If %%length%% is ``true`` or a //number//, it also checks that\r\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\r\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\r\n */\r\nexport function isHexString(value, length) {\r\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\r\n        return false;\r\n    }\r\n    if (typeof (length) === \"number\" && value.length !== 2 + 2 * length) {\r\n        return false;\r\n    }\r\n    if (length === true && (value.length % 2) !== 0) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n *  Returns true if %%value%% is a valid representation of arbitrary\r\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\r\n */\r\nexport function isBytesLike(value) {\r\n    return (isHexString(value, true) || (value instanceof Uint8Array));\r\n}\r\nconst HexCharacters = \"0123456789abcdef\";\r\n/**\r\n *  Returns a [[DataHexString]] representation of %%data%%.\r\n */\r\nexport function hexlify(data) {\r\n    const bytes = getBytes(data);\r\n    let result = \"0x\";\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        const v = bytes[i];\r\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  Returns a [[DataHexString]] by concatenating all values\r\n *  within %%data%%.\r\n */\r\nexport function concat(datas) {\r\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\r\n}\r\n/**\r\n *  Returns the length of %%data%%, in bytes.\r\n */\r\nexport function dataLength(data) {\r\n    if (isHexString(data, true)) {\r\n        return (data.length - 2) / 2;\r\n    }\r\n    return getBytes(data).length;\r\n}\r\n/**\r\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\r\n *  offset to the %%end%% offset.\r\n *\r\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\r\n */\r\nexport function dataSlice(data, start, end) {\r\n    const bytes = getBytes(data);\r\n    if (end != null && end > bytes.length) {\r\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\r\n            buffer: bytes, length: bytes.length, offset: end\r\n        });\r\n    }\r\n    return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));\r\n}\r\n/**\r\n *  Return the [[DataHexString]] result by stripping all **leading**\r\n ** zero bytes from %%data%%.\r\n */\r\nexport function stripZerosLeft(data) {\r\n    let bytes = hexlify(data).substring(2);\r\n    while (bytes.startsWith(\"00\")) {\r\n        bytes = bytes.substring(2);\r\n    }\r\n    return \"0x\" + bytes;\r\n}\r\nfunction zeroPad(data, length, left) {\r\n    const bytes = getBytes(data);\r\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\r\n        buffer: new Uint8Array(bytes),\r\n        length: length,\r\n        offset: length + 1\r\n    });\r\n    const result = new Uint8Array(length);\r\n    result.fill(0);\r\n    if (left) {\r\n        result.set(bytes, length - bytes.length);\r\n    }\r\n    else {\r\n        result.set(bytes, 0);\r\n    }\r\n    return hexlify(result);\r\n}\r\n/**\r\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\r\n *  to %%length%% bytes.\r\n *\r\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\r\n *  thrown.\r\n *\r\n *  This pads data the same as **values** are in Solidity\r\n *  (e.g. ``uint128``).\r\n */\r\nexport function zeroPadValue(data, length) {\r\n    return zeroPad(data, length, true);\r\n}\r\n/**\r\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\r\n *  to %%length%% bytes.\r\n *\r\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\r\n *  thrown.\r\n *\r\n *  This pads data the same as **bytes** are in Solidity\r\n *  (e.g. ``bytes16``).\r\n */\r\nexport function zeroPadBytes(data, length) {\r\n    return zeroPad(data, length, false);\r\n}\r\n//# sourceMappingURL=data.js.map","/**\r\n *  Some mathematic operations.\r\n *\r\n *  @_subsection: api/utils:Math Helpers  [about-maths]\r\n */\r\nimport { hexlify, isBytesLike } from \"./data.js\";\r\nimport { assert, assertArgument } from \"./errors.js\";\r\nconst BN_0 = BigInt(0);\r\nconst BN_1 = BigInt(1);\r\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\r\n// IEEE 754 support 53-bits of mantissa\r\nconst maxValue = 0x1fffffffffffff;\r\n/**\r\n *  Convert %%value%% from a twos-compliment representation of %%width%%\r\n *  bits to its value.\r\n *\r\n *  If the highest bit is ``1``, the result will be negative.\r\n */\r\nexport function fromTwos(_value, _width) {\r\n    const value = getUint(_value, \"value\");\r\n    const width = BigInt(getNumber(_width, \"width\"));\r\n    assert((value >> width) === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\r\n        operation: \"fromTwos\", fault: \"overflow\", value: _value\r\n    });\r\n    // Top bit set; treat as a negative value\r\n    if (value >> (width - BN_1)) {\r\n        const mask = (BN_1 << width) - BN_1;\r\n        return -(((~value) & mask) + BN_1);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n *  Convert %%value%% to a twos-compliment representation of\r\n *  %%width%% bits.\r\n *\r\n *  The result will always be positive.\r\n */\r\nexport function toTwos(_value, _width) {\r\n    let value = getBigInt(_value, \"value\");\r\n    const width = BigInt(getNumber(_width, \"width\"));\r\n    const limit = (BN_1 << (width - BN_1));\r\n    if (value < BN_0) {\r\n        value = -value;\r\n        assert(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\r\n            operation: \"toTwos\", fault: \"overflow\", value: _value\r\n        });\r\n        const mask = (BN_1 << width) - BN_1;\r\n        return ((~value) & mask) + BN_1;\r\n    }\r\n    else {\r\n        assert(value < limit, \"too high\", \"NUMERIC_FAULT\", {\r\n            operation: \"toTwos\", fault: \"overflow\", value: _value\r\n        });\r\n    }\r\n    return value;\r\n}\r\n/**\r\n *  Mask %%value%% with a bitmask of %%bits%% ones.\r\n */\r\nexport function mask(_value, _bits) {\r\n    const value = getUint(_value, \"value\");\r\n    const bits = BigInt(getNumber(_bits, \"bits\"));\r\n    return value & ((BN_1 << bits) - BN_1);\r\n}\r\n/**\r\n *  Gets a BigInt from %%value%%. If it is an invalid value for\r\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\r\n */\r\nexport function getBigInt(value, name) {\r\n    switch (typeof (value)) {\r\n        case \"bigint\": return value;\r\n        case \"number\":\r\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\r\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\r\n            return BigInt(value);\r\n        case \"string\":\r\n            try {\r\n                if (value === \"\") {\r\n                    throw new Error(\"empty string\");\r\n                }\r\n                if (value[0] === \"-\" && value[1] !== \"-\") {\r\n                    return -BigInt(value.substring(1));\r\n                }\r\n                return BigInt(value);\r\n            }\r\n            catch (e) {\r\n                assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || \"value\", value);\r\n            }\r\n    }\r\n    assertArgument(false, \"invalid BigNumberish value\", name || \"value\", value);\r\n}\r\n/**\r\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\r\n *  value and that it is positive.\r\n */\r\nexport function getUint(value, name) {\r\n    const result = getBigInt(value, name);\r\n    assert(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\r\n        fault: \"overflow\", operation: \"getUint\", value\r\n    });\r\n    return result;\r\n}\r\nconst Nibbles = \"0123456789abcdef\";\r\n/*\r\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\r\n * is treated as Big Endian data.\r\n */\r\nexport function toBigInt(value) {\r\n    if (value instanceof Uint8Array) {\r\n        let result = \"0x0\";\r\n        for (const v of value) {\r\n            result += Nibbles[v >> 4];\r\n            result += Nibbles[v & 0x0f];\r\n        }\r\n        return BigInt(result);\r\n    }\r\n    return getBigInt(value);\r\n}\r\n/**\r\n *  Gets a //number// from %%value%%. If it is an invalid value for\r\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\r\n */\r\nexport function getNumber(value, name) {\r\n    switch (typeof (value)) {\r\n        case \"bigint\":\r\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\r\n            return Number(value);\r\n        case \"number\":\r\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\r\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\r\n            return value;\r\n        case \"string\":\r\n            try {\r\n                if (value === \"\") {\r\n                    throw new Error(\"empty string\");\r\n                }\r\n                return getNumber(BigInt(value), name);\r\n            }\r\n            catch (e) {\r\n                assertArgument(false, `invalid numeric string: ${e.message}`, name || \"value\", value);\r\n            }\r\n    }\r\n    assertArgument(false, \"invalid numeric value\", name || \"value\", value);\r\n}\r\n/**\r\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\r\n *  is treated as Big Endian data. Throws if the value is not safe.\r\n */\r\nexport function toNumber(value) {\r\n    return getNumber(toBigInt(value));\r\n}\r\n/**\r\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\r\n *  %%width%% bytes.\r\n */\r\nexport function toBeHex(_value, _width) {\r\n    const value = getUint(_value, \"value\");\r\n    let result = value.toString(16);\r\n    if (_width == null) {\r\n        // Ensure the value is of even length\r\n        if (result.length % 2) {\r\n            result = \"0\" + result;\r\n        }\r\n    }\r\n    else {\r\n        const width = getNumber(_width, \"width\");\r\n        assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, \"NUMERIC_FAULT\", {\r\n            operation: \"toBeHex\",\r\n            fault: \"overflow\",\r\n            value: _value\r\n        });\r\n        // Pad the value to the required width\r\n        while (result.length < (width * 2)) {\r\n            result = \"0\" + result;\r\n        }\r\n    }\r\n    return \"0x\" + result;\r\n}\r\n/**\r\n *  Converts %%value%% to a Big Endian Uint8Array.\r\n */\r\nexport function toBeArray(_value) {\r\n    const value = getUint(_value, \"value\");\r\n    if (value === BN_0) {\r\n        return new Uint8Array([]);\r\n    }\r\n    let hex = value.toString(16);\r\n    if (hex.length % 2) {\r\n        hex = \"0\" + hex;\r\n    }\r\n    const result = new Uint8Array(hex.length / 2);\r\n    for (let i = 0; i < result.length; i++) {\r\n        const offset = i * 2;\r\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\r\n *\r\n *  A //Quantity// does not have and leading 0 values unless the value is\r\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\r\n *  numeric values.\r\n */\r\nexport function toQuantity(value) {\r\n    let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);\r\n    while (result.startsWith(\"0\")) {\r\n        result = result.substring(1);\r\n    }\r\n    if (result === \"\") {\r\n        result = \"0\";\r\n    }\r\n    return \"0x\" + result;\r\n}\r\n//# sourceMappingURL=maths.js.map","/**\r\n *  The [Base58 Encoding](link-base58) scheme allows a **numeric** value\r\n *  to be encoded as a compact string using a radix of 58 using only\r\n *  alpha-numeric characters. Confusingly similar characters are omitted\r\n *  (i.e. ``\"l0O\"``).\r\n *\r\n *  Note that Base58 encodes a **numeric** value, not arbitrary bytes,\r\n *  since any zero-bytes on the left would get removed. To mitigate this\r\n *  issue most schemes that use Base58 choose specific high-order values\r\n *  to ensure non-zero prefixes.\r\n *\r\n *  @_subsection: api/utils:Base58 Encoding [about-base58]\r\n */\r\nimport { getBytes } from \"./data.js\";\r\nimport { assertArgument } from \"./errors.js\";\r\nimport { toBigInt } from \"./maths.js\";\r\nconst Alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\nlet Lookup = null;\r\nfunction getAlpha(letter) {\r\n    if (Lookup == null) {\r\n        Lookup = {};\r\n        for (let i = 0; i < Alphabet.length; i++) {\r\n            Lookup[Alphabet[i]] = BigInt(i);\r\n        }\r\n    }\r\n    const result = Lookup[letter];\r\n    assertArgument(result != null, `invalid base58 value`, \"letter\", letter);\r\n    return result;\r\n}\r\nconst BN_0 = BigInt(0);\r\nconst BN_58 = BigInt(58);\r\n/**\r\n *  Encode %%value%% as a Base58-encoded string.\r\n */\r\nexport function encodeBase58(_value) {\r\n    const bytes = getBytes(_value);\r\n    let value = toBigInt(bytes);\r\n    let result = \"\";\r\n    while (value) {\r\n        result = Alphabet[Number(value % BN_58)] + result;\r\n        value /= BN_58;\r\n    }\r\n    // Account for leading padding zeros\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        if (bytes[i]) {\r\n            break;\r\n        }\r\n        result = Alphabet[0] + result;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  Decode the Base58-encoded %%value%%.\r\n */\r\nexport function decodeBase58(value) {\r\n    let result = BN_0;\r\n    for (let i = 0; i < value.length; i++) {\r\n        result *= BN_58;\r\n        result += getAlpha(value[i]);\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=base58.js.map","/**\r\n *  Using strings in Ethereum (or any security-basd system) requires\r\n *  additional care. These utilities attempt to mitigate some of the\r\n *  safety issues as well as provide the ability to recover and analyse\r\n *  strings.\r\n *\r\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\r\n */\r\nimport { getBytes } from \"./data.js\";\r\nimport { assertArgument, assertNormalize } from \"./errors.js\";\r\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\r\n    assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\r\n}\r\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\r\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\r\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\r\n        let i = 0;\r\n        for (let o = offset + 1; o < bytes.length; o++) {\r\n            if (bytes[o] >> 6 !== 0x02) {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        return i;\r\n    }\r\n    // This byte runs us past the end of the string, so just jump to the end\r\n    // (but the first byte was read already read and therefore skipped)\r\n    if (reason === \"OVERRUN\") {\r\n        return bytes.length - offset - 1;\r\n    }\r\n    // Nothing to skip\r\n    return 0;\r\n}\r\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\r\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\r\n    if (reason === \"OVERLONG\") {\r\n        assertArgument(typeof (badCodepoint) === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\r\n        output.push(badCodepoint);\r\n        return 0;\r\n    }\r\n    // Put the replacement character into the output\r\n    output.push(0xfffd);\r\n    // Otherwise, process as if ignoring errors\r\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\r\n}\r\n/**\r\n *  A handful of popular, built-in UTF-8 error handling strategies.\r\n *\r\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\r\n *  non-canonical (overlong) codepoints (this is the default)\r\n *\r\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\r\n *  and accepts non-canonical (overlong) codepoints\r\n *\r\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\r\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\r\n *  non-canonical (overlong) codepoints\r\n *\r\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\r\n */\r\nexport const Utf8ErrorFuncs = Object.freeze({\r\n    error: errorFunc,\r\n    ignore: ignoreFunc,\r\n    replace: replaceFunc\r\n});\r\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\r\nfunction getUtf8CodePoints(_bytes, onError) {\r\n    if (onError == null) {\r\n        onError = Utf8ErrorFuncs.error;\r\n    }\r\n    const bytes = getBytes(_bytes, \"bytes\");\r\n    const result = [];\r\n    let i = 0;\r\n    // Invalid bytes are ignored\r\n    while (i < bytes.length) {\r\n        const c = bytes[i++];\r\n        // 0xxx xxxx\r\n        if (c >> 7 === 0) {\r\n            result.push(c);\r\n            continue;\r\n        }\r\n        // Multibyte; how many bytes left for this character?\r\n        let extraLength = null;\r\n        let overlongMask = null;\r\n        // 110x xxxx 10xx xxxx\r\n        if ((c & 0xe0) === 0xc0) {\r\n            extraLength = 1;\r\n            overlongMask = 0x7f;\r\n            // 1110 xxxx 10xx xxxx 10xx xxxx\r\n        }\r\n        else if ((c & 0xf0) === 0xe0) {\r\n            extraLength = 2;\r\n            overlongMask = 0x7ff;\r\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\r\n        }\r\n        else if ((c & 0xf8) === 0xf0) {\r\n            extraLength = 3;\r\n            overlongMask = 0xffff;\r\n        }\r\n        else {\r\n            if ((c & 0xc0) === 0x80) {\r\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\r\n            }\r\n            else {\r\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\r\n            }\r\n            continue;\r\n        }\r\n        // Do we have enough bytes in our data?\r\n        if (i - 1 + extraLength >= bytes.length) {\r\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\r\n            continue;\r\n        }\r\n        // Remove the length prefix from the char\r\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\r\n        for (let j = 0; j < extraLength; j++) {\r\n            let nextChar = bytes[i];\r\n            // Invalid continuation byte\r\n            if ((nextChar & 0xc0) != 0x80) {\r\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\r\n                res = null;\r\n                break;\r\n            }\r\n            ;\r\n            res = (res << 6) | (nextChar & 0x3f);\r\n            i++;\r\n        }\r\n        // See above loop for invalid continuation byte\r\n        if (res === null) {\r\n            continue;\r\n        }\r\n        // Maximum code point\r\n        if (res > 0x10ffff) {\r\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        // Reserved for UTF-16 surrogate halves\r\n        if (res >= 0xd800 && res <= 0xdfff) {\r\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        // Check for overlong sequences (more bytes than needed)\r\n        if (res <= overlongMask) {\r\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\r\n            continue;\r\n        }\r\n        result.push(res);\r\n    }\r\n    return result;\r\n}\r\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\r\n/**\r\n *  Returns the UTF-8 byte representation of %%str%%.\r\n *\r\n *  If %%form%% is specified, the string is normalized.\r\n */\r\nexport function toUtf8Bytes(str, form) {\r\n    assertArgument(typeof (str) === \"string\", \"invalid string value\", \"str\", str);\r\n    if (form != null) {\r\n        assertNormalize(form);\r\n        str = str.normalize(form);\r\n    }\r\n    let result = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        const c = str.charCodeAt(i);\r\n        if (c < 0x80) {\r\n            result.push(c);\r\n        }\r\n        else if (c < 0x800) {\r\n            result.push((c >> 6) | 0xc0);\r\n            result.push((c & 0x3f) | 0x80);\r\n        }\r\n        else if ((c & 0xfc00) == 0xd800) {\r\n            i++;\r\n            const c2 = str.charCodeAt(i);\r\n            assertArgument(i < str.length && ((c2 & 0xfc00) === 0xdc00), \"invalid surrogate pair\", \"str\", str);\r\n            // Surrogate Pair\r\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\r\n            result.push((pair >> 18) | 0xf0);\r\n            result.push(((pair >> 12) & 0x3f) | 0x80);\r\n            result.push(((pair >> 6) & 0x3f) | 0x80);\r\n            result.push((pair & 0x3f) | 0x80);\r\n        }\r\n        else {\r\n            result.push((c >> 12) | 0xe0);\r\n            result.push(((c >> 6) & 0x3f) | 0x80);\r\n            result.push((c & 0x3f) | 0x80);\r\n        }\r\n    }\r\n    return new Uint8Array(result);\r\n}\r\n;\r\n//export \r\nfunction _toUtf8String(codePoints) {\r\n    return codePoints.map((codePoint) => {\r\n        if (codePoint <= 0xffff) {\r\n            return String.fromCharCode(codePoint);\r\n        }\r\n        codePoint -= 0x10000;\r\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\r\n    }).join(\"\");\r\n}\r\n/**\r\n *  Returns the string represented by the UTF-8 data %%bytes%%.\r\n *\r\n *  When %%onError%% function is specified, it is called on UTF-8\r\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\r\n *  (default: [error](Utf8ErrorFuncs))\r\n */\r\nexport function toUtf8String(bytes, onError) {\r\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\r\n}\r\n/**\r\n *  Returns the UTF-8 code-points for %%str%%.\r\n *\r\n *  If %%form%% is specified, the string is normalized.\r\n */\r\nexport function toUtf8CodePoints(str, form) {\r\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\r\n}\r\n//# sourceMappingURL=utf8.js.map","//See: https://github.com/ethereum/wiki/wiki/RLP\r\nimport { hexlify } from \"./data.js\";\r\nimport { assert, assertArgument } from \"./errors.js\";\r\nimport { getBytes } from \"./data.js\";\r\nfunction hexlifyByte(value) {\r\n    let result = value.toString(16);\r\n    while (result.length < 2) {\r\n        result = \"0\" + result;\r\n    }\r\n    return \"0x\" + result;\r\n}\r\nfunction unarrayifyInteger(data, offset, length) {\r\n    let result = 0;\r\n    for (let i = 0; i < length; i++) {\r\n        result = (result * 256) + data[offset + i];\r\n    }\r\n    return result;\r\n}\r\nfunction _decodeChildren(data, offset, childOffset, length) {\r\n    const result = [];\r\n    while (childOffset < offset + 1 + length) {\r\n        const decoded = _decode(data, childOffset);\r\n        result.push(decoded.result);\r\n        childOffset += decoded.consumed;\r\n        assert(childOffset <= offset + 1 + length, \"child data too short\", \"BUFFER_OVERRUN\", {\r\n            buffer: data, length, offset\r\n        });\r\n    }\r\n    return { consumed: (1 + length), result: result };\r\n}\r\n// returns { consumed: number, result: Object }\r\nfunction _decode(data, offset) {\r\n    assert(data.length !== 0, \"data too short\", \"BUFFER_OVERRUN\", {\r\n        buffer: data, length: 0, offset: 1\r\n    });\r\n    const checkOffset = (offset) => {\r\n        assert(offset <= data.length, \"data short segment too short\", \"BUFFER_OVERRUN\", {\r\n            buffer: data, length: data.length, offset\r\n        });\r\n    };\r\n    // Array with extra length prefix\r\n    if (data[offset] >= 0xf8) {\r\n        const lengthLength = data[offset] - 0xf7;\r\n        checkOffset(offset + 1 + lengthLength);\r\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\r\n        checkOffset(offset + 1 + lengthLength + length);\r\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\r\n    }\r\n    else if (data[offset] >= 0xc0) {\r\n        const length = data[offset] - 0xc0;\r\n        checkOffset(offset + 1 + length);\r\n        return _decodeChildren(data, offset, offset + 1, length);\r\n    }\r\n    else if (data[offset] >= 0xb8) {\r\n        const lengthLength = data[offset] - 0xb7;\r\n        checkOffset(offset + 1 + lengthLength);\r\n        const length = unarrayifyInteger(data, offset + 1, lengthLength);\r\n        checkOffset(offset + 1 + lengthLength + length);\r\n        const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\r\n        return { consumed: (1 + lengthLength + length), result: result };\r\n    }\r\n    else if (data[offset] >= 0x80) {\r\n        const length = data[offset] - 0x80;\r\n        checkOffset(offset + 1 + length);\r\n        const result = hexlify(data.slice(offset + 1, offset + 1 + length));\r\n        return { consumed: (1 + length), result: result };\r\n    }\r\n    return { consumed: 1, result: hexlifyByte(data[offset]) };\r\n}\r\n/**\r\n *  Decodes %%data%% into the structured data it represents.\r\n */\r\nexport function decodeRlp(_data) {\r\n    const data = getBytes(_data, \"data\");\r\n    const decoded = _decode(data, 0);\r\n    assertArgument(decoded.consumed === data.length, \"unexpected junk after rlp payload\", \"data\", _data);\r\n    return decoded.result;\r\n}\r\n//# sourceMappingURL=rlp-decode.js.map","//See: https://github.com/ethereum/wiki/wiki/RLP\r\nimport { getBytes } from \"./data.js\";\r\nfunction arrayifyInteger(value) {\r\n    const result = [];\r\n    while (value) {\r\n        result.unshift(value & 0xff);\r\n        value >>= 8;\r\n    }\r\n    return result;\r\n}\r\nfunction _encode(object) {\r\n    if (Array.isArray(object)) {\r\n        let payload = [];\r\n        object.forEach(function (child) {\r\n            payload = payload.concat(_encode(child));\r\n        });\r\n        if (payload.length <= 55) {\r\n            payload.unshift(0xc0 + payload.length);\r\n            return payload;\r\n        }\r\n        const length = arrayifyInteger(payload.length);\r\n        length.unshift(0xf7 + length.length);\r\n        return length.concat(payload);\r\n    }\r\n    const data = Array.prototype.slice.call(getBytes(object, \"object\"));\r\n    if (data.length === 1 && data[0] <= 0x7f) {\r\n        return data;\r\n    }\r\n    else if (data.length <= 55) {\r\n        data.unshift(0x80 + data.length);\r\n        return data;\r\n    }\r\n    const length = arrayifyInteger(data.length);\r\n    length.unshift(0xb7 + length.length);\r\n    return length.concat(data);\r\n}\r\nconst nibbles = \"0123456789abcdef\";\r\n/**\r\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\r\n */\r\nexport function encodeRlp(object) {\r\n    let result = \"0x\";\r\n    for (const v of _encode(object)) {\r\n        result += nibbles[v >> 4];\r\n        result += nibbles[v & 0xf];\r\n    }\r\n    return result;\r\n}\r\n//# sourceMappingURL=rlp-encode.js.map","/**\r\n *  Explain UUID and link to RFC here.\r\n *\r\n *  @_subsection: api/utils:UUID  [about-uuid]\r\n */\r\nimport { getBytes, hexlify } from \"./data.js\";\r\n/**\r\n *  Returns the version 4 [[link-uuid]] for the %%randomBytes%%.\r\n *\r\n *  @see: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\r\n */\r\nexport function uuidV4(randomBytes) {\r\n    const bytes = getBytes(randomBytes, \"randomBytes\");\r\n    // Section: 4.1.3:\r\n    // - time_hi_and_version[12:16] = 0b0100\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n    // Section 4.4\r\n    // - clock_seq_hi_and_reserved[6] = 0b0\r\n    // - clock_seq_hi_and_reserved[7] = 0b1\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n    const value = hexlify(bytes);\r\n    return [\r\n        value.substring(2, 10),\r\n        value.substring(10, 14),\r\n        value.substring(14, 18),\r\n        value.substring(18, 22),\r\n        value.substring(22, 34),\r\n    ].join(\"-\");\r\n}\r\n//# sourceMappingURL=uuid.js.map","function number(n) {\r\n    if (!Number.isSafeInteger(n) || n < 0)\r\n        throw new Error(`Wrong positive integer: ${n}`);\r\n}\r\nfunction bool(b) {\r\n    if (typeof b !== 'boolean')\r\n        throw new Error(`Expected boolean, not ${b}`);\r\n}\r\nfunction bytes(b, ...lengths) {\r\n    if (!(b instanceof Uint8Array))\r\n        throw new Error('Expected Uint8Array');\r\n    if (lengths.length > 0 && !lengths.includes(b.length))\r\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\r\n}\r\nfunction hash(hash) {\r\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\r\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n    number(hash.outputLen);\r\n    number(hash.blockLen);\r\n}\r\nfunction exists(instance, checkFinished = true) {\r\n    if (instance.destroyed)\r\n        throw new Error('Hash instance has been destroyed');\r\n    if (checkFinished && instance.finished)\r\n        throw new Error('Hash#digest() has already been called');\r\n}\r\nfunction output(out, instance) {\r\n    bytes(out);\r\n    const min = instance.outputLen;\r\n    if (out.length < min) {\r\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n    }\r\n}\r\nexport { number, bool, bytes, hash, exists, output };\r\nconst assert = { number, bool, bytes, hash, exists, output };\r\nexport default assert;\r\n//# sourceMappingURL=_assert.js.map","export const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n//# sourceMappingURL=crypto.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated, we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\nconst u8a = (a) => a instanceof Uint8Array;\r\n// Cast array to different type\r\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n// Cast array to view\r\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n// The rotate right (circular right shift) operation for uint32\r\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\r\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\r\n// early-throw an error because we don't support BE yet.\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\nif (!isLE)\r\n    throw new Error('Non little-endian hardware is not supported');\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes) {\r\n    if (!u8a(bytes))\r\n        throw new Error('Uint8Array expected');\r\n    // pre-caching improves the speed 6x\r\n    let hex = '';\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex += hexes[bytes[i]];\r\n    }\r\n    return hex;\r\n}\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex) {\r\n    if (typeof hex !== 'string')\r\n        throw new Error('hex string expected, got ' + typeof hex);\r\n    const len = hex.length;\r\n    if (len % 2)\r\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n    const array = new Uint8Array(len / 2);\r\n    for (let i = 0; i < array.length; i++) {\r\n        const j = i * 2;\r\n        const hexByte = hex.slice(j, j + 2);\r\n        const byte = Number.parseInt(hexByte, 16);\r\n        if (Number.isNaN(byte) || byte < 0)\r\n            throw new Error('Invalid byte sequence');\r\n        array[i] = byte;\r\n    }\r\n    return array;\r\n}\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => { };\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters, tick, cb) {\r\n    let ts = Date.now();\r\n    for (let i = 0; i < iters; i++) {\r\n        cb(i);\r\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n        const diff = Date.now() - ts;\r\n        if (diff >= 0 && diff < tick)\r\n            continue;\r\n        await nextTick();\r\n        ts += diff;\r\n    }\r\n}\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str) {\r\n    if (typeof str !== 'string')\r\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data) {\r\n    if (typeof data === 'string')\r\n        data = utf8ToBytes(data);\r\n    if (!u8a(data))\r\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\r\n    return data;\r\n}\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays) {\r\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n    let pad = 0; // walk through each item, ensure they have proper type\r\n    arrays.forEach((a) => {\r\n        if (!u8a(a))\r\n            throw new Error('Uint8Array expected');\r\n        r.set(a, pad);\r\n        pad += a.length;\r\n    });\r\n    return r;\r\n}\r\n// For runtime check if class implements interface\r\nexport class Hash {\r\n    // Safe version that clones internal state\r\n    clone() {\r\n        return this._cloneInto();\r\n    }\r\n}\r\nconst toStr = {}.toString;\r\nexport function checkOpts(defaults, opts) {\r\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\r\n        throw new Error('Options should be object or undefined');\r\n    const merged = Object.assign(defaults, opts);\r\n    return merged;\r\n}\r\nexport function wrapConstructor(hashCons) {\r\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\r\n    const tmp = hashCons();\r\n    hashC.outputLen = tmp.outputLen;\r\n    hashC.blockLen = tmp.blockLen;\r\n    hashC.create = () => hashCons();\r\n    return hashC;\r\n}\r\nexport function wrapConstructorWithOpts(hashCons) {\r\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\r\n    const tmp = hashCons({});\r\n    hashC.outputLen = tmp.outputLen;\r\n    hashC.blockLen = tmp.blockLen;\r\n    hashC.create = (opts) => hashCons(opts);\r\n    return hashC;\r\n}\r\nexport function wrapXOFConstructorWithOpts(hashCons) {\r\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\r\n    const tmp = hashCons({});\r\n    hashC.outputLen = tmp.outputLen;\r\n    hashC.blockLen = tmp.blockLen;\r\n    hashC.create = (opts) => hashCons(opts);\r\n    return hashC;\r\n}\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nexport function randomBytes(bytesLength = 32) {\r\n    if (crypto && typeof crypto.getRandomValues === 'function') {\r\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n    }\r\n    throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n//# sourceMappingURL=utils.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\r\nimport { Hash, toBytes } from './utils.js';\r\n// HMAC (RFC 2104)\r\nexport class HMAC extends Hash {\r\n    constructor(hash, _key) {\r\n        super();\r\n        this.finished = false;\r\n        this.destroyed = false;\r\n        assertHash(hash);\r\n        const key = toBytes(_key);\r\n        this.iHash = hash.create();\r\n        if (typeof this.iHash.update !== 'function')\r\n            throw new Error('Expected instance of class which extends utils.Hash');\r\n        this.blockLen = this.iHash.blockLen;\r\n        this.outputLen = this.iHash.outputLen;\r\n        const blockLen = this.blockLen;\r\n        const pad = new Uint8Array(blockLen);\r\n        // blockLen can be bigger than outputLen\r\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n        for (let i = 0; i < pad.length; i++)\r\n            pad[i] ^= 0x36;\r\n        this.iHash.update(pad);\r\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n        this.oHash = hash.create();\r\n        // Undo internal XOR && apply outer XOR\r\n        for (let i = 0; i < pad.length; i++)\r\n            pad[i] ^= 0x36 ^ 0x5c;\r\n        this.oHash.update(pad);\r\n        pad.fill(0);\r\n    }\r\n    update(buf) {\r\n        assertExists(this);\r\n        this.iHash.update(buf);\r\n        return this;\r\n    }\r\n    digestInto(out) {\r\n        assertExists(this);\r\n        assertBytes(out, this.outputLen);\r\n        this.finished = true;\r\n        this.iHash.digestInto(out);\r\n        this.oHash.update(out);\r\n        this.oHash.digestInto(out);\r\n        this.destroy();\r\n    }\r\n    digest() {\r\n        const out = new Uint8Array(this.oHash.outputLen);\r\n        this.digestInto(out);\r\n        return out;\r\n    }\r\n    _cloneInto(to) {\r\n        // Create new instance without calling constructor since key already in state and we don't know it.\r\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\r\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n        to = to;\r\n        to.finished = finished;\r\n        to.destroyed = destroyed;\r\n        to.blockLen = blockLen;\r\n        to.outputLen = outputLen;\r\n        to.oHash = oHash._cloneInto(to.oHash);\r\n        to.iHash = iHash._cloneInto(to.iHash);\r\n        return to;\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.oHash.destroy();\r\n        this.iHash.destroy();\r\n    }\r\n}\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n */\r\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\r\nhmac.create = (hash, key) => new HMAC(hash, key);\r\n//# sourceMappingURL=hmac.js.map","import { hash as assertHash, number as assertNumber } from './_assert.js';\r\nimport { hmac } from './hmac.js';\r\nimport { createView, toBytes, checkOpts, asyncLoop } from './utils.js';\r\n// Common prologue and epilogue for sync/async functions\r\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\r\n    assertHash(hash);\r\n    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\r\n    const { c, dkLen, asyncTick } = opts;\r\n    assertNumber(c);\r\n    assertNumber(dkLen);\r\n    assertNumber(asyncTick);\r\n    if (c < 1)\r\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\r\n    const password = toBytes(_password);\r\n    const salt = toBytes(_salt);\r\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\r\n    const DK = new Uint8Array(dkLen);\r\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n    const PRF = hmac.create(hash, password);\r\n    const PRFSalt = PRF._cloneInto().update(salt);\r\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\r\n}\r\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\r\n    PRF.destroy();\r\n    PRFSalt.destroy();\r\n    if (prfW)\r\n        prfW.destroy();\r\n    u.fill(0);\r\n    return DK;\r\n}\r\n/**\r\n * PBKDF2-HMAC: RFC 2898 key derivation function\r\n * @param hash - hash function that would be used e.g. sha256\r\n * @param password - password from which a derived key is generated\r\n * @param salt - cryptographic salt\r\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\r\n */\r\nexport function pbkdf2(hash, password, salt, opts) {\r\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\r\n    let prfW; // Working copy\r\n    const arr = new Uint8Array(4);\r\n    const view = createView(arr);\r\n    const u = new Uint8Array(PRF.outputLen);\r\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\r\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\r\n        // Ti = F(Password, Salt, c, i)\r\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\r\n        view.setInt32(0, ti, false);\r\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\r\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\r\n        Ti.set(u.subarray(0, Ti.length));\r\n        for (let ui = 1; ui < c; ui++) {\r\n            // Uc = PRF(Password, Uc−1)\r\n            PRF._cloneInto(prfW).update(u).digestInto(u);\r\n            for (let i = 0; i < Ti.length; i++)\r\n                Ti[i] ^= u[i];\r\n        }\r\n    }\r\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\r\n}\r\nexport async function pbkdf2Async(hash, password, salt, opts) {\r\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\r\n    let prfW; // Working copy\r\n    const arr = new Uint8Array(4);\r\n    const view = createView(arr);\r\n    const u = new Uint8Array(PRF.outputLen);\r\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\r\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\r\n        // Ti = F(Password, Salt, c, i)\r\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\r\n        view.setInt32(0, ti, false);\r\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\r\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\r\n        Ti.set(u.subarray(0, Ti.length));\r\n        await asyncLoop(c - 1, asyncTick, () => {\r\n            // Uc = PRF(Password, Uc−1)\r\n            PRF._cloneInto(prfW).update(u).digestInto(u);\r\n            for (let i = 0; i < Ti.length; i++)\r\n                Ti[i] ^= u[i];\r\n        });\r\n    }\r\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\r\n}\r\n//# sourceMappingURL=pbkdf2.js.map","import { exists, output } from './_assert.js';\r\nimport { Hash, createView, toBytes } from './utils.js';\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view, byteOffset, value, isLE) {\r\n    if (typeof view.setBigUint64 === 'function')\r\n        return view.setBigUint64(byteOffset, value, isLE);\r\n    const _32n = BigInt(32);\r\n    const _u32_max = BigInt(0xffffffff);\r\n    const wh = Number((value >> _32n) & _u32_max);\r\n    const wl = Number(value & _u32_max);\r\n    const h = isLE ? 4 : 0;\r\n    const l = isLE ? 0 : 4;\r\n    view.setUint32(byteOffset + h, wh, isLE);\r\n    view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n// Base SHA2 class (RFC 6234)\r\nexport class SHA2 extends Hash {\r\n    constructor(blockLen, outputLen, padOffset, isLE) {\r\n        super();\r\n        this.blockLen = blockLen;\r\n        this.outputLen = outputLen;\r\n        this.padOffset = padOffset;\r\n        this.isLE = isLE;\r\n        this.finished = false;\r\n        this.length = 0;\r\n        this.pos = 0;\r\n        this.destroyed = false;\r\n        this.buffer = new Uint8Array(blockLen);\r\n        this.view = createView(this.buffer);\r\n    }\r\n    update(data) {\r\n        exists(this);\r\n        const { view, buffer, blockLen } = this;\r\n        data = toBytes(data);\r\n        const len = data.length;\r\n        for (let pos = 0; pos < len;) {\r\n            const take = Math.min(blockLen - this.pos, len - pos);\r\n            // Fast path: we have at least one block in input, cast it to view and process\r\n            if (take === blockLen) {\r\n                const dataView = createView(data);\r\n                for (; blockLen <= len - pos; pos += blockLen)\r\n                    this.process(dataView, pos);\r\n                continue;\r\n            }\r\n            buffer.set(data.subarray(pos, pos + take), this.pos);\r\n            this.pos += take;\r\n            pos += take;\r\n            if (this.pos === blockLen) {\r\n                this.process(view, 0);\r\n                this.pos = 0;\r\n            }\r\n        }\r\n        this.length += data.length;\r\n        this.roundClean();\r\n        return this;\r\n    }\r\n    digestInto(out) {\r\n        exists(this);\r\n        output(out, this);\r\n        this.finished = true;\r\n        // Padding\r\n        // We can avoid allocation of buffer for padding completely if it\r\n        // was previously not allocated here. But it won't change performance.\r\n        const { buffer, view, blockLen, isLE } = this;\r\n        let { pos } = this;\r\n        // append the bit '1' to the message\r\n        buffer[pos++] = 0b10000000;\r\n        this.buffer.subarray(pos).fill(0);\r\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\r\n        if (this.padOffset > blockLen - pos) {\r\n            this.process(view, 0);\r\n            pos = 0;\r\n        }\r\n        // Pad until full block byte with zeros\r\n        for (let i = pos; i < blockLen; i++)\r\n            buffer[i] = 0;\r\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n        // So we just write lowest 64 bits of that value.\r\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n        this.process(view, 0);\r\n        const oview = createView(out);\r\n        const len = this.outputLen;\r\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n        if (len % 4)\r\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n        const outLen = len / 4;\r\n        const state = this.get();\r\n        if (outLen > state.length)\r\n            throw new Error('_sha2: outputLen bigger than state');\r\n        for (let i = 0; i < outLen; i++)\r\n            oview.setUint32(4 * i, state[i], isLE);\r\n    }\r\n    digest() {\r\n        const { buffer, outputLen } = this;\r\n        this.digestInto(buffer);\r\n        const res = buffer.slice(0, outputLen);\r\n        this.destroy();\r\n        return res;\r\n    }\r\n    _cloneInto(to) {\r\n        to || (to = new this.constructor());\r\n        to.set(...this.get());\r\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n        to.length = length;\r\n        to.pos = pos;\r\n        to.finished = finished;\r\n        to.destroyed = destroyed;\r\n        if (length % blockLen)\r\n            to.buffer.set(buffer);\r\n        return to;\r\n    }\r\n}\r\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\r\nimport { rotr, wrapConstructor } from './utils.js';\r\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\r\n// BTC network is doing 2^67 hashes/sec as per early 2023.\r\n// Choice: a ? b : c\r\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\r\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n// prettier-ignore\r\nconst IV = /* @__PURE__ */ new Uint32Array([\r\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\r\nclass SHA256 extends SHA2 {\r\n    constructor() {\r\n        super(64, 32, 8, false);\r\n        // We cannot use array here since array allows indexing by variable\r\n        // which means optimizer/compiler cannot use registers.\r\n        this.A = IV[0] | 0;\r\n        this.B = IV[1] | 0;\r\n        this.C = IV[2] | 0;\r\n        this.D = IV[3] | 0;\r\n        this.E = IV[4] | 0;\r\n        this.F = IV[5] | 0;\r\n        this.G = IV[6] | 0;\r\n        this.H = IV[7] | 0;\r\n    }\r\n    get() {\r\n        const { A, B, C, D, E, F, G, H } = this;\r\n        return [A, B, C, D, E, F, G, H];\r\n    }\r\n    // prettier-ignore\r\n    set(A, B, C, D, E, F, G, H) {\r\n        this.A = A | 0;\r\n        this.B = B | 0;\r\n        this.C = C | 0;\r\n        this.D = D | 0;\r\n        this.E = E | 0;\r\n        this.F = F | 0;\r\n        this.G = G | 0;\r\n        this.H = H | 0;\r\n    }\r\n    process(view, offset) {\r\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n        for (let i = 0; i < 16; i++, offset += 4)\r\n            SHA256_W[i] = view.getUint32(offset, false);\r\n        for (let i = 16; i < 64; i++) {\r\n            const W15 = SHA256_W[i - 15];\r\n            const W2 = SHA256_W[i - 2];\r\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n        }\r\n        // Compression function main loop, 64 rounds\r\n        let { A, B, C, D, E, F, G, H } = this;\r\n        for (let i = 0; i < 64; i++) {\r\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n            H = G;\r\n            G = F;\r\n            F = E;\r\n            E = (D + T1) | 0;\r\n            D = C;\r\n            C = B;\r\n            B = A;\r\n            A = (T1 + T2) | 0;\r\n        }\r\n        // Add the compressed chunk to the current hash value\r\n        A = (A + this.A) | 0;\r\n        B = (B + this.B) | 0;\r\n        C = (C + this.C) | 0;\r\n        D = (D + this.D) | 0;\r\n        E = (E + this.E) | 0;\r\n        F = (F + this.F) | 0;\r\n        G = (G + this.G) | 0;\r\n        H = (H + this.H) | 0;\r\n        this.set(A, B, C, D, E, F, G, H);\r\n    }\r\n    roundClean() {\r\n        SHA256_W.fill(0);\r\n    }\r\n    destroy() {\r\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n        this.buffer.fill(0);\r\n    }\r\n}\r\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\r\nclass SHA224 extends SHA256 {\r\n    constructor() {\r\n        super();\r\n        this.A = 0xc1059ed8 | 0;\r\n        this.B = 0x367cd507 | 0;\r\n        this.C = 0x3070dd17 | 0;\r\n        this.D = 0xf70e5939 | 0;\r\n        this.E = 0xffc00b31 | 0;\r\n        this.F = 0x68581511 | 0;\r\n        this.G = 0x64f98fa7 | 0;\r\n        this.H = 0xbefa4fa4 | 0;\r\n        this.outputLen = 28;\r\n    }\r\n}\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\r\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\r\n//# sourceMappingURL=sha256.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\r\nconst _32n = /* @__PURE__ */ BigInt(32);\r\n// We are not using BigUint64Array, because they are extremely slow as per 2022\r\nfunction fromBig(n, le = false) {\r\n    if (le)\r\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\r\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\r\n}\r\nfunction split(lst, le = false) {\r\n    let Ah = new Uint32Array(lst.length);\r\n    let Al = new Uint32Array(lst.length);\r\n    for (let i = 0; i < lst.length; i++) {\r\n        const { h, l } = fromBig(lst[i], le);\r\n        [Ah[i], Al[i]] = [h, l];\r\n    }\r\n    return [Ah, Al];\r\n}\r\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\r\n// for Shift in [0, 32)\r\nconst shrSH = (h, _l, s) => h >>> s;\r\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in [1, 32)\r\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\r\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\r\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\r\n// Right rotate for shift===32 (just swaps l&h)\r\nconst rotr32H = (_h, l) => l;\r\nconst rotr32L = (h, _l) => h;\r\n// Left rotate for Shift in [1, 32)\r\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\r\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\r\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\r\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\r\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\r\n// simple take carry out of low bit sum by shift, we need to use division.\r\nfunction add(Ah, Al, Bh, Bl) {\r\n    const l = (Al >>> 0) + (Bl >>> 0);\r\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\r\n}\r\n// Addition with more than 2 elements\r\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\r\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\r\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\r\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\r\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\r\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\r\n// prettier-ignore\r\nexport { fromBig, split, toBig, shrSH, shrSL, rotrSH, rotrSL, rotrBH, rotrBL, rotr32H, rotr32L, rotlSH, rotlSL, rotlBH, rotlBL, add, add3L, add3H, add4L, add4H, add5H, add5L, };\r\n// prettier-ignore\r\nconst u64 = {\r\n    fromBig, split, toBig,\r\n    shrSH, shrSL,\r\n    rotrSH, rotrSL, rotrBH, rotrBL,\r\n    rotr32H, rotr32L,\r\n    rotlSH, rotlSL, rotlBH, rotlBL,\r\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\nexport default u64;\r\n//# sourceMappingURL=_u64.js.map","import { SHA2 } from './_sha2.js';\r\nimport u64 from './_u64.js';\r\nimport { wrapConstructor } from './utils.js';\r\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\r\n// prettier-ignore\r\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\r\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\r\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\r\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\r\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\r\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\r\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\r\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\r\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\r\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\r\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\r\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\r\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\r\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\r\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\r\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\r\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\r\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\r\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\r\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\r\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\r\n].map(n => BigInt(n))))();\r\n// Temporary buffer, not used to store anything between runs\r\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\r\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\r\nexport class SHA512 extends SHA2 {\r\n    constructor() {\r\n        super(128, 64, 16, false);\r\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\r\n        // Also looks cleaner and easier to verify with spec.\r\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n        // h -- high 32 bits, l -- low 32 bits\r\n        this.Ah = 0x6a09e667 | 0;\r\n        this.Al = 0xf3bcc908 | 0;\r\n        this.Bh = 0xbb67ae85 | 0;\r\n        this.Bl = 0x84caa73b | 0;\r\n        this.Ch = 0x3c6ef372 | 0;\r\n        this.Cl = 0xfe94f82b | 0;\r\n        this.Dh = 0xa54ff53a | 0;\r\n        this.Dl = 0x5f1d36f1 | 0;\r\n        this.Eh = 0x510e527f | 0;\r\n        this.El = 0xade682d1 | 0;\r\n        this.Fh = 0x9b05688c | 0;\r\n        this.Fl = 0x2b3e6c1f | 0;\r\n        this.Gh = 0x1f83d9ab | 0;\r\n        this.Gl = 0xfb41bd6b | 0;\r\n        this.Hh = 0x5be0cd19 | 0;\r\n        this.Hl = 0x137e2179 | 0;\r\n    }\r\n    // prettier-ignore\r\n    get() {\r\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\r\n    }\r\n    // prettier-ignore\r\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\r\n        this.Ah = Ah | 0;\r\n        this.Al = Al | 0;\r\n        this.Bh = Bh | 0;\r\n        this.Bl = Bl | 0;\r\n        this.Ch = Ch | 0;\r\n        this.Cl = Cl | 0;\r\n        this.Dh = Dh | 0;\r\n        this.Dl = Dl | 0;\r\n        this.Eh = Eh | 0;\r\n        this.El = El | 0;\r\n        this.Fh = Fh | 0;\r\n        this.Fl = Fl | 0;\r\n        this.Gh = Gh | 0;\r\n        this.Gl = Gl | 0;\r\n        this.Hh = Hh | 0;\r\n        this.Hl = Hl | 0;\r\n    }\r\n    process(view, offset) {\r\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\r\n        for (let i = 0; i < 16; i++, offset += 4) {\r\n            SHA512_W_H[i] = view.getUint32(offset);\r\n            SHA512_W_L[i] = view.getUint32((offset += 4));\r\n        }\r\n        for (let i = 16; i < 80; i++) {\r\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\r\n            const W15h = SHA512_W_H[i - 15] | 0;\r\n            const W15l = SHA512_W_L[i - 15] | 0;\r\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\r\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\r\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\r\n            const W2h = SHA512_W_H[i - 2] | 0;\r\n            const W2l = SHA512_W_L[i - 2] | 0;\r\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\r\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\r\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\r\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\r\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\r\n            SHA512_W_H[i] = SUMh | 0;\r\n            SHA512_W_L[i] = SUMl | 0;\r\n        }\r\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n        // Compression function main loop, 80 rounds\r\n        for (let i = 0; i < 80; i++) {\r\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\r\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\r\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\r\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\r\n            const CHIl = (El & Fl) ^ (~El & Gl);\r\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\r\n            // prettier-ignore\r\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\r\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\r\n            const T1l = T1ll | 0;\r\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\r\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\r\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\r\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\r\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\r\n            Hh = Gh | 0;\r\n            Hl = Gl | 0;\r\n            Gh = Fh | 0;\r\n            Gl = Fl | 0;\r\n            Fh = Eh | 0;\r\n            Fl = El | 0;\r\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\r\n            Dh = Ch | 0;\r\n            Dl = Cl | 0;\r\n            Ch = Bh | 0;\r\n            Cl = Bl | 0;\r\n            Bh = Ah | 0;\r\n            Bl = Al | 0;\r\n            const All = u64.add3L(T1l, sigma0l, MAJl);\r\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\r\n            Al = All | 0;\r\n        }\r\n        // Add the compressed chunk to the current hash value\r\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\r\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\r\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\r\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\r\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\r\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\r\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\r\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\r\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\r\n    }\r\n    roundClean() {\r\n        SHA512_W_H.fill(0);\r\n        SHA512_W_L.fill(0);\r\n    }\r\n    destroy() {\r\n        this.buffer.fill(0);\r\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n    }\r\n}\r\nclass SHA512_224 extends SHA512 {\r\n    constructor() {\r\n        super();\r\n        // h -- high 32 bits, l -- low 32 bits\r\n        this.Ah = 0x8c3d37c8 | 0;\r\n        this.Al = 0x19544da2 | 0;\r\n        this.Bh = 0x73e19966 | 0;\r\n        this.Bl = 0x89dcd4d6 | 0;\r\n        this.Ch = 0x1dfab7ae | 0;\r\n        this.Cl = 0x32ff9c82 | 0;\r\n        this.Dh = 0x679dd514 | 0;\r\n        this.Dl = 0x582f9fcf | 0;\r\n        this.Eh = 0x0f6d2b69 | 0;\r\n        this.El = 0x7bd44da8 | 0;\r\n        this.Fh = 0x77e36f73 | 0;\r\n        this.Fl = 0x04c48942 | 0;\r\n        this.Gh = 0x3f9d85a8 | 0;\r\n        this.Gl = 0x6a1d36c8 | 0;\r\n        this.Hh = 0x1112e6ad | 0;\r\n        this.Hl = 0x91d692a1 | 0;\r\n        this.outputLen = 28;\r\n    }\r\n}\r\nclass SHA512_256 extends SHA512 {\r\n    constructor() {\r\n        super();\r\n        // h -- high 32 bits, l -- low 32 bits\r\n        this.Ah = 0x22312194 | 0;\r\n        this.Al = 0xfc2bf72c | 0;\r\n        this.Bh = 0x9f555fa3 | 0;\r\n        this.Bl = 0xc84c64c2 | 0;\r\n        this.Ch = 0x2393b86b | 0;\r\n        this.Cl = 0x6f53b151 | 0;\r\n        this.Dh = 0x96387719 | 0;\r\n        this.Dl = 0x5940eabd | 0;\r\n        this.Eh = 0x96283ee2 | 0;\r\n        this.El = 0xa88effe3 | 0;\r\n        this.Fh = 0xbe5e1e25 | 0;\r\n        this.Fl = 0x53863992 | 0;\r\n        this.Gh = 0x2b0199fc | 0;\r\n        this.Gl = 0x2c85b8aa | 0;\r\n        this.Hh = 0x0eb72ddc | 0;\r\n        this.Hl = 0x81c52ca2 | 0;\r\n        this.outputLen = 32;\r\n    }\r\n}\r\nclass SHA384 extends SHA512 {\r\n    constructor() {\r\n        super();\r\n        // h -- high 32 bits, l -- low 32 bits\r\n        this.Ah = 0xcbbb9d5d | 0;\r\n        this.Al = 0xc1059ed8 | 0;\r\n        this.Bh = 0x629a292a | 0;\r\n        this.Bl = 0x367cd507 | 0;\r\n        this.Ch = 0x9159015a | 0;\r\n        this.Cl = 0x3070dd17 | 0;\r\n        this.Dh = 0x152fecd8 | 0;\r\n        this.Dl = 0xf70e5939 | 0;\r\n        this.Eh = 0x67332667 | 0;\r\n        this.El = 0xffc00b31 | 0;\r\n        this.Fh = 0x8eb44a87 | 0;\r\n        this.Fl = 0x68581511 | 0;\r\n        this.Gh = 0xdb0c2e0d | 0;\r\n        this.Gl = 0x64f98fa7 | 0;\r\n        this.Hh = 0x47b5481d | 0;\r\n        this.Hl = 0xbefa4fa4 | 0;\r\n        this.outputLen = 48;\r\n    }\r\n}\r\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\r\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\r\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\r\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\r\n//# sourceMappingURL=sha512.js.map","/* Browser Crypto Shims */\r\nimport { hmac } from \"@noble/hashes/hmac\";\r\nimport { pbkdf2 } from \"@noble/hashes/pbkdf2\";\r\nimport { sha256 } from \"@noble/hashes/sha256\";\r\nimport { sha512 } from \"@noble/hashes/sha512\";\r\nimport { assert, assertArgument } from \"../utils/index.js\";\r\nfunction getGlobal() {\r\n    if (typeof self !== 'undefined') {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined') {\r\n        return window;\r\n    }\r\n    if (typeof global !== 'undefined') {\r\n        return global;\r\n    }\r\n    throw new Error('unable to locate global object');\r\n}\r\n;\r\nconst anyGlobal = getGlobal();\r\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\r\nexport function createHash(algo) {\r\n    switch (algo) {\r\n        case \"sha256\": return sha256.create();\r\n        case \"sha512\": return sha512.create();\r\n    }\r\n    assertArgument(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\r\n}\r\nexport function createHmac(_algo, key) {\r\n    const algo = ({ sha256, sha512 }[_algo]);\r\n    assertArgument(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\r\n    return hmac.create(algo, key);\r\n}\r\nexport function pbkdf2Sync(password, salt, iterations, keylen, _algo) {\r\n    const algo = ({ sha256, sha512 }[_algo]);\r\n    assertArgument(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\r\n    return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });\r\n}\r\nexport function randomBytes(length) {\r\n    assert(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\r\n        operation: \"randomBytes\"\r\n    });\r\n    assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\r\n    const result = new Uint8Array(length);\r\n    crypto.getRandomValues(result);\r\n    return result;\r\n}\r\n//# sourceMappingURL=crypto-browser.js.map","/**\r\n *  An **HMAC** enables verification that a given key was used\r\n *  to authenticate a payload.\r\n *\r\n *  See: [[link-wiki-hmac]]\r\n *\r\n *  @_subsection: api/crypto:HMAC  [about-hmac]\r\n */\r\nimport { createHmac } from \"./crypto.js\";\r\nimport { getBytes, hexlify } from \"../utils/index.js\";\r\nlet locked = false;\r\nconst _computeHmac = function (algorithm, key, data) {\r\n    return createHmac(algorithm, key).update(data).digest();\r\n};\r\nlet __computeHmac = _computeHmac;\r\n/**\r\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\r\n *  %%algo%% used for compression.\r\n *\r\n *  @example:\r\n *    key = id(\"some-secret\")\r\n *\r\n *    // Compute the HMAC\r\n *    computeHmac(\"sha256\", key, \"0x1337\")\r\n *    //_result:\r\n *\r\n *    // To compute the HMAC of UTF-8 data, the data must be\r\n *    // converted to UTF-8 bytes\r\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\r\n *    //_result:\r\n *\r\n */\r\nexport function computeHmac(algorithm, _key, _data) {\r\n    const key = getBytes(_key, \"key\");\r\n    const data = getBytes(_data, \"data\");\r\n    return hexlify(__computeHmac(algorithm, key, data));\r\n}\r\ncomputeHmac._ = _computeHmac;\r\ncomputeHmac.lock = function () { locked = true; };\r\ncomputeHmac.register = function (func) {\r\n    if (locked) {\r\n        throw new Error(\"computeHmac is locked\");\r\n    }\r\n    __computeHmac = func;\r\n};\r\nObject.freeze(computeHmac);\r\n//# sourceMappingURL=hmac.js.map","import { bytes, exists, number, output } from './_assert.js';\r\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\r\nimport { Hash, u32, toBytes, wrapConstructor, wrapXOFConstructorWithOpts, } from './utils.js';\r\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\r\n// It's called a sponge function.\r\n// Various per round constants calculations\r\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\r\nconst _0n = /* @__PURE__ */ BigInt(0);\r\nconst _1n = /* @__PURE__ */ BigInt(1);\r\nconst _2n = /* @__PURE__ */ BigInt(2);\r\nconst _7n = /* @__PURE__ */ BigInt(7);\r\nconst _256n = /* @__PURE__ */ BigInt(256);\r\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\r\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\r\n    // Pi\r\n    [x, y] = [y, (2 * x + 3 * y) % 5];\r\n    SHA3_PI.push(2 * (5 * y + x));\r\n    // Rotational\r\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\r\n    // Iota\r\n    let t = _0n;\r\n    for (let j = 0; j < 7; j++) {\r\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\r\n        if (R & _2n)\r\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\r\n    }\r\n    _SHA3_IOTA.push(t);\r\n}\r\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\r\n// Left rotation (without 0, 32, 64)\r\nconst rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\r\nconst rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\r\n// Same as keccakf1600, but allows to skip some rounds\r\nexport function keccakP(s, rounds = 24) {\r\n    const B = new Uint32Array(5 * 2);\r\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\r\n    for (let round = 24 - rounds; round < 24; round++) {\r\n        // Theta θ\r\n        for (let x = 0; x < 10; x++)\r\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\r\n        for (let x = 0; x < 10; x += 2) {\r\n            const idx1 = (x + 8) % 10;\r\n            const idx0 = (x + 2) % 10;\r\n            const B0 = B[idx0];\r\n            const B1 = B[idx0 + 1];\r\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\r\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\r\n            for (let y = 0; y < 50; y += 10) {\r\n                s[x + y] ^= Th;\r\n                s[x + y + 1] ^= Tl;\r\n            }\r\n        }\r\n        // Rho (ρ) and Pi (π)\r\n        let curH = s[2];\r\n        let curL = s[3];\r\n        for (let t = 0; t < 24; t++) {\r\n            const shift = SHA3_ROTL[t];\r\n            const Th = rotlH(curH, curL, shift);\r\n            const Tl = rotlL(curH, curL, shift);\r\n            const PI = SHA3_PI[t];\r\n            curH = s[PI];\r\n            curL = s[PI + 1];\r\n            s[PI] = Th;\r\n            s[PI + 1] = Tl;\r\n        }\r\n        // Chi (χ)\r\n        for (let y = 0; y < 50; y += 10) {\r\n            for (let x = 0; x < 10; x++)\r\n                B[x] = s[y + x];\r\n            for (let x = 0; x < 10; x++)\r\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\r\n        }\r\n        // Iota (ι)\r\n        s[0] ^= SHA3_IOTA_H[round];\r\n        s[1] ^= SHA3_IOTA_L[round];\r\n    }\r\n    B.fill(0);\r\n}\r\nexport class Keccak extends Hash {\r\n    // NOTE: we accept arguments in bytes instead of bits here.\r\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\r\n        super();\r\n        this.blockLen = blockLen;\r\n        this.suffix = suffix;\r\n        this.outputLen = outputLen;\r\n        this.enableXOF = enableXOF;\r\n        this.rounds = rounds;\r\n        this.pos = 0;\r\n        this.posOut = 0;\r\n        this.finished = false;\r\n        this.destroyed = false;\r\n        // Can be passed from user as dkLen\r\n        number(outputLen);\r\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\r\n        if (0 >= this.blockLen || this.blockLen >= 200)\r\n            throw new Error('Sha3 supports only keccak-f1600 function');\r\n        this.state = new Uint8Array(200);\r\n        this.state32 = u32(this.state);\r\n    }\r\n    keccak() {\r\n        keccakP(this.state32, this.rounds);\r\n        this.posOut = 0;\r\n        this.pos = 0;\r\n    }\r\n    update(data) {\r\n        exists(this);\r\n        const { blockLen, state } = this;\r\n        data = toBytes(data);\r\n        const len = data.length;\r\n        for (let pos = 0; pos < len;) {\r\n            const take = Math.min(blockLen - this.pos, len - pos);\r\n            for (let i = 0; i < take; i++)\r\n                state[this.pos++] ^= data[pos++];\r\n            if (this.pos === blockLen)\r\n                this.keccak();\r\n        }\r\n        return this;\r\n    }\r\n    finish() {\r\n        if (this.finished)\r\n            return;\r\n        this.finished = true;\r\n        const { state, suffix, pos, blockLen } = this;\r\n        // Do the padding\r\n        state[pos] ^= suffix;\r\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\r\n            this.keccak();\r\n        state[blockLen - 1] ^= 0x80;\r\n        this.keccak();\r\n    }\r\n    writeInto(out) {\r\n        exists(this, false);\r\n        bytes(out);\r\n        this.finish();\r\n        const bufferOut = this.state;\r\n        const { blockLen } = this;\r\n        for (let pos = 0, len = out.length; pos < len;) {\r\n            if (this.posOut >= blockLen)\r\n                this.keccak();\r\n            const take = Math.min(blockLen - this.posOut, len - pos);\r\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\r\n            this.posOut += take;\r\n            pos += take;\r\n        }\r\n        return out;\r\n    }\r\n    xofInto(out) {\r\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\r\n        if (!this.enableXOF)\r\n            throw new Error('XOF is not possible for this instance');\r\n        return this.writeInto(out);\r\n    }\r\n    xof(bytes) {\r\n        number(bytes);\r\n        return this.xofInto(new Uint8Array(bytes));\r\n    }\r\n    digestInto(out) {\r\n        output(out, this);\r\n        if (this.finished)\r\n            throw new Error('digest() was already called');\r\n        this.writeInto(out);\r\n        this.destroy();\r\n        return out;\r\n    }\r\n    digest() {\r\n        return this.digestInto(new Uint8Array(this.outputLen));\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.state.fill(0);\r\n    }\r\n    _cloneInto(to) {\r\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\r\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\r\n        to.state32.set(this.state32);\r\n        to.pos = this.pos;\r\n        to.posOut = this.posOut;\r\n        to.finished = this.finished;\r\n        to.rounds = rounds;\r\n        // Suffix can change in cSHAKE\r\n        to.suffix = suffix;\r\n        to.outputLen = outputLen;\r\n        to.enableXOF = enableXOF;\r\n        to.destroyed = this.destroyed;\r\n        return to;\r\n    }\r\n}\r\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\r\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\r\n/**\r\n * SHA3-256 hash function\r\n * @param message - that would be hashed\r\n */\r\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\r\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\r\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\r\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\r\n/**\r\n * keccak-256 hash function. Different from SHA3-256.\r\n * @param message - that would be hashed\r\n */\r\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\r\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\r\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\r\nconst genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\r\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\r\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\r\n//# sourceMappingURL=sha3.js.map","/**\r\n *  Cryptographic hashing functions\r\n *\r\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\r\n */\r\nimport { keccak_256 } from \"@noble/hashes/sha3\";\r\nimport { getBytes, hexlify } from \"../utils/index.js\";\r\nlet locked = false;\r\nconst _keccak256 = function (data) {\r\n    return keccak_256(data);\r\n};\r\nlet __keccak256 = _keccak256;\r\n/**\r\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\r\n *\r\n *  The %%data%% **must** be a data representation, to compute the\r\n *  hash of UTF-8 data use the [[id]] function.\r\n *\r\n *  @returns DataHexstring\r\n *  @example:\r\n *    keccak256(\"0x\")\r\n *    //_result:\r\n *\r\n *    keccak256(\"0x1337\")\r\n *    //_result:\r\n *\r\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\r\n *    //_result:\r\n *\r\n *    // Strings are assumed to be DataHexString, otherwise it will\r\n *    // throw. To hash UTF-8 data, see the note above.\r\n *    keccak256(\"Hello World\")\r\n *    //_error:\r\n */\r\nexport function keccak256(_data) {\r\n    const data = getBytes(_data, \"data\");\r\n    return hexlify(__keccak256(data));\r\n}\r\nkeccak256._ = _keccak256;\r\nkeccak256.lock = function () { locked = true; };\r\nkeccak256.register = function (func) {\r\n    if (locked) {\r\n        throw new TypeError(\"keccak256 is locked\");\r\n    }\r\n    __keccak256 = func;\r\n};\r\nObject.freeze(keccak256);\r\n//# sourceMappingURL=keccak.js.map","import { SHA2 } from './_sha2.js';\r\nimport { wrapConstructor } from './utils.js';\r\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\r\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\r\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\r\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\r\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\r\nlet idxL = [Id];\r\nlet idxR = [Pi];\r\nfor (let i = 0; i < 4; i++)\r\n    for (let j of [idxL, idxR])\r\n        j.push(j[i].map((k) => Rho[k]));\r\nconst shifts = /* @__PURE__ */ [\r\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\r\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\r\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\r\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\r\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\r\n].map((i) => new Uint8Array(i));\r\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\r\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\r\nconst Kl = /* @__PURE__ */ new Uint32Array([\r\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\r\n]);\r\nconst Kr = /* @__PURE__ */ new Uint32Array([\r\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\r\n]);\r\n// The rotate left (circular left shift) operation for uint32\r\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\r\n// It's called f() in spec.\r\nfunction f(group, x, y, z) {\r\n    if (group === 0)\r\n        return x ^ y ^ z;\r\n    else if (group === 1)\r\n        return (x & y) | (~x & z);\r\n    else if (group === 2)\r\n        return (x | ~y) ^ z;\r\n    else if (group === 3)\r\n        return (x & z) | (y & ~z);\r\n    else\r\n        return x ^ (y | ~z);\r\n}\r\n// Temporary buffer, not used to store anything between runs\r\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\r\nexport class RIPEMD160 extends SHA2 {\r\n    constructor() {\r\n        super(64, 20, 8, true);\r\n        this.h0 = 0x67452301 | 0;\r\n        this.h1 = 0xefcdab89 | 0;\r\n        this.h2 = 0x98badcfe | 0;\r\n        this.h3 = 0x10325476 | 0;\r\n        this.h4 = 0xc3d2e1f0 | 0;\r\n    }\r\n    get() {\r\n        const { h0, h1, h2, h3, h4 } = this;\r\n        return [h0, h1, h2, h3, h4];\r\n    }\r\n    set(h0, h1, h2, h3, h4) {\r\n        this.h0 = h0 | 0;\r\n        this.h1 = h1 | 0;\r\n        this.h2 = h2 | 0;\r\n        this.h3 = h3 | 0;\r\n        this.h4 = h4 | 0;\r\n    }\r\n    process(view, offset) {\r\n        for (let i = 0; i < 16; i++, offset += 4)\r\n            BUF[i] = view.getUint32(offset, true);\r\n        // prettier-ignore\r\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\r\n        // Instead of iterating 0 to 80, we split it into 5 groups\r\n        // And use the groups in constants, functions, etc. Much simpler\r\n        for (let group = 0; group < 5; group++) {\r\n            const rGroup = 4 - group;\r\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\r\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\r\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\r\n            for (let i = 0; i < 16; i++) {\r\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\r\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\r\n            }\r\n            // 2 loops are 10% faster\r\n            for (let i = 0; i < 16; i++) {\r\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\r\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\r\n            }\r\n        }\r\n        // Add the compressed chunk to the current hash value\r\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\r\n    }\r\n    roundClean() {\r\n        BUF.fill(0);\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        this.buffer.fill(0);\r\n        this.set(0, 0, 0, 0, 0);\r\n    }\r\n}\r\n/**\r\n * RIPEMD-160 - a hash function from 1990s.\r\n * @param message - msg that would be hashed\r\n */\r\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\r\n//# sourceMappingURL=ripemd160.js.map","import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\r\nimport { getBytes, hexlify } from \"../utils/index.js\";\r\nlet locked = false;\r\nconst _ripemd160 = function (data) {\r\n    return noble_ripemd160(data);\r\n};\r\nlet __ripemd160 = _ripemd160;\r\n/**\r\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\r\n *\r\n *  @_docloc: api/crypto:Hash Functions\r\n *  @returns DataHexstring\r\n *\r\n *  @example:\r\n *    ripemd160(\"0x\")\r\n *    //_result:\r\n *\r\n *    ripemd160(\"0x1337\")\r\n *    //_result:\r\n *\r\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\r\n *    //_result:\r\n *\r\n */\r\nexport function ripemd160(_data) {\r\n    const data = getBytes(_data, \"data\");\r\n    return hexlify(__ripemd160(data));\r\n}\r\nripemd160._ = _ripemd160;\r\nripemd160.lock = function () { locked = true; };\r\nripemd160.register = function (func) {\r\n    if (locked) {\r\n        throw new TypeError(\"ripemd160 is locked\");\r\n    }\r\n    __ripemd160 = func;\r\n};\r\nObject.freeze(ripemd160);\r\n//# sourceMappingURL=ripemd160.js.map","/**\r\n *  A **Password-Based Key-Derivation Function** is designed to create\r\n *  a sequence of bytes suitible as a **key** from a human-rememberable\r\n *  password.\r\n *\r\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\r\n */\r\nimport { pbkdf2Sync } from \"./crypto.js\";\r\nimport { getBytes, hexlify } from \"../utils/index.js\";\r\nlet locked = false;\r\nconst _pbkdf2 = function (password, salt, iterations, keylen, algo) {\r\n    return pbkdf2Sync(password, salt, iterations, keylen, algo);\r\n};\r\nlet __pbkdf2 = _pbkdf2;\r\n/**\r\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\r\n *  the %%salt%% and using %%iterations%% of %%algo%%.\r\n *\r\n *  This PBKDF is outdated and should not be used in new projects, but is\r\n *  required to decrypt older files.\r\n *\r\n *  @example:\r\n *    // The password must be converted to bytes, and it is generally\r\n *    // best practices to ensure the string has been normalized. Many\r\n *    // formats explicitly indicate the normalization form to use.\r\n *    password = \"hello\"\r\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\r\n *\r\n *    salt = id(\"some-salt\")\r\n *\r\n *    // Compute the PBKDF2\r\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\r\n *    //_result:\r\n */\r\nexport function pbkdf2(_password, _salt, iterations, keylen, algo) {\r\n    const password = getBytes(_password, \"password\");\r\n    const salt = getBytes(_salt, \"salt\");\r\n    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));\r\n}\r\npbkdf2._ = _pbkdf2;\r\npbkdf2.lock = function () { locked = true; };\r\npbkdf2.register = function (func) {\r\n    if (locked) {\r\n        throw new Error(\"pbkdf2 is locked\");\r\n    }\r\n    __pbkdf2 = func;\r\n};\r\nObject.freeze(pbkdf2);\r\n//# sourceMappingURL=pbkdf2.js.map","/**\r\n *  A **Cryptographically Secure Random Value** is one that has been\r\n *  generated with additional care take to prevent side-channels\r\n *  from allowing others to detect it and prevent others from through\r\n *  coincidence generate the same values.\r\n *\r\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\r\n */\r\nimport { randomBytes as crypto_random } from \"./crypto.js\";\r\nlet locked = false;\r\nconst _randomBytes = function (length) {\r\n    return new Uint8Array(crypto_random(length));\r\n};\r\nlet __randomBytes = _randomBytes;\r\n/**\r\n *  Return %%length%% bytes of cryptographically secure random data.\r\n *\r\n *  @example:\r\n *    randomBytes(8)\r\n *    //_result:\r\n */\r\nexport function randomBytes(length) {\r\n    return __randomBytes(length);\r\n}\r\nrandomBytes._ = _randomBytes;\r\nrandomBytes.lock = function () { locked = true; };\r\nrandomBytes.register = function (func) {\r\n    if (locked) {\r\n        throw new Error(\"randomBytes is locked\");\r\n    }\r\n    __randomBytes = func;\r\n};\r\nObject.freeze(randomBytes);\r\n//# sourceMappingURL=random.js.map","import { number as assertNumber } from './_assert.js';\r\nimport { sha256 } from './sha256.js';\r\nimport { pbkdf2 } from './pbkdf2.js';\r\nimport { asyncLoop, checkOpts, u32 } from './utils.js';\r\n// RFC 7914 Scrypt KDF\r\n// Left rotate for uint32\r\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\r\n// The main Scrypt loop: uses Salsa extensively.\r\n// Six versions of the function were tried, this is the fastest one.\r\n// prettier-ignore\r\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\r\n    // Based on https://cr.yp.to/salsa20.html\r\n    // Xor blocks\r\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\r\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\r\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\r\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\r\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\r\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\r\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\r\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\r\n    // Save state to temporary variables (salsa)\r\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\r\n    // Main loop (salsa)\r\n    for (let i = 0; i < 8; i += 2) {\r\n        x04 ^= rotl(x00 + x12 | 0, 7);\r\n        x08 ^= rotl(x04 + x00 | 0, 9);\r\n        x12 ^= rotl(x08 + x04 | 0, 13);\r\n        x00 ^= rotl(x12 + x08 | 0, 18);\r\n        x09 ^= rotl(x05 + x01 | 0, 7);\r\n        x13 ^= rotl(x09 + x05 | 0, 9);\r\n        x01 ^= rotl(x13 + x09 | 0, 13);\r\n        x05 ^= rotl(x01 + x13 | 0, 18);\r\n        x14 ^= rotl(x10 + x06 | 0, 7);\r\n        x02 ^= rotl(x14 + x10 | 0, 9);\r\n        x06 ^= rotl(x02 + x14 | 0, 13);\r\n        x10 ^= rotl(x06 + x02 | 0, 18);\r\n        x03 ^= rotl(x15 + x11 | 0, 7);\r\n        x07 ^= rotl(x03 + x15 | 0, 9);\r\n        x11 ^= rotl(x07 + x03 | 0, 13);\r\n        x15 ^= rotl(x11 + x07 | 0, 18);\r\n        x01 ^= rotl(x00 + x03 | 0, 7);\r\n        x02 ^= rotl(x01 + x00 | 0, 9);\r\n        x03 ^= rotl(x02 + x01 | 0, 13);\r\n        x00 ^= rotl(x03 + x02 | 0, 18);\r\n        x06 ^= rotl(x05 + x04 | 0, 7);\r\n        x07 ^= rotl(x06 + x05 | 0, 9);\r\n        x04 ^= rotl(x07 + x06 | 0, 13);\r\n        x05 ^= rotl(x04 + x07 | 0, 18);\r\n        x11 ^= rotl(x10 + x09 | 0, 7);\r\n        x08 ^= rotl(x11 + x10 | 0, 9);\r\n        x09 ^= rotl(x08 + x11 | 0, 13);\r\n        x10 ^= rotl(x09 + x08 | 0, 18);\r\n        x12 ^= rotl(x15 + x14 | 0, 7);\r\n        x13 ^= rotl(x12 + x15 | 0, 9);\r\n        x14 ^= rotl(x13 + x12 | 0, 13);\r\n        x15 ^= rotl(x14 + x13 | 0, 18);\r\n    }\r\n    // Write output (salsa)\r\n    out[oi++] = (y00 + x00) | 0;\r\n    out[oi++] = (y01 + x01) | 0;\r\n    out[oi++] = (y02 + x02) | 0;\r\n    out[oi++] = (y03 + x03) | 0;\r\n    out[oi++] = (y04 + x04) | 0;\r\n    out[oi++] = (y05 + x05) | 0;\r\n    out[oi++] = (y06 + x06) | 0;\r\n    out[oi++] = (y07 + x07) | 0;\r\n    out[oi++] = (y08 + x08) | 0;\r\n    out[oi++] = (y09 + x09) | 0;\r\n    out[oi++] = (y10 + x10) | 0;\r\n    out[oi++] = (y11 + x11) | 0;\r\n    out[oi++] = (y12 + x12) | 0;\r\n    out[oi++] = (y13 + x13) | 0;\r\n    out[oi++] = (y14 + x14) | 0;\r\n    out[oi++] = (y15 + x15) | 0;\r\n}\r\nfunction BlockMix(input, ii, out, oi, r) {\r\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\r\n    let head = oi + 0;\r\n    let tail = oi + 16 * r;\r\n    for (let i = 0; i < 16; i++)\r\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\r\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\r\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\r\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\r\n        if (i > 0)\r\n            tail += 16; // First iteration overwrites tmp value in tail\r\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\r\n    }\r\n}\r\n// Common prologue and epilogue for sync/async functions\r\nfunction scryptInit(password, salt, _opts) {\r\n    // Maxmem - 1GB+1KB by default\r\n    const opts = checkOpts({\r\n        dkLen: 32,\r\n        asyncTick: 10,\r\n        maxmem: 1024 ** 3 + 1024,\r\n    }, _opts);\r\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\r\n    assertNumber(N);\r\n    assertNumber(r);\r\n    assertNumber(p);\r\n    assertNumber(dkLen);\r\n    assertNumber(asyncTick);\r\n    assertNumber(maxmem);\r\n    if (onProgress !== undefined && typeof onProgress !== 'function')\r\n        throw new Error('progressCb should be function');\r\n    const blockSize = 128 * r;\r\n    const blockSize32 = blockSize / 4;\r\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\r\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\r\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\r\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\r\n    }\r\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\r\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\r\n    }\r\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\r\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\r\n    }\r\n    const memUsed = blockSize * (N + p);\r\n    if (memUsed > maxmem) {\r\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\r\n    }\r\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\r\n    // Since it has only one iteration there is no reason to use async variant\r\n    const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\r\n    const B32 = u32(B);\r\n    // Re-used between parallel iterations. Array(iterations) of B\r\n    const V = u32(new Uint8Array(blockSize * N));\r\n    const tmp = u32(new Uint8Array(blockSize));\r\n    let blockMixCb = () => { };\r\n    if (onProgress) {\r\n        const totalBlockMix = 2 * N * p;\r\n        // Invoke callback if progress changes from 10.01 to 10.02\r\n        // Allows to draw smooth progress bar on up to 8K screen\r\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\r\n        let blockMixCnt = 0;\r\n        blockMixCb = () => {\r\n            blockMixCnt++;\r\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\r\n                onProgress(blockMixCnt / totalBlockMix);\r\n        };\r\n    }\r\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\r\n}\r\nfunction scryptOutput(password, dkLen, B, V, tmp) {\r\n    const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\r\n    B.fill(0);\r\n    V.fill(0);\r\n    tmp.fill(0);\r\n    return res;\r\n}\r\n/**\r\n * Scrypt KDF from RFC 7914.\r\n * @param password - pass\r\n * @param salt - salt\r\n * @param opts - parameters\r\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\r\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\r\n * - `p` is parallelization factor (1 is common)\r\n * - `dkLen` is output key length in bytes e.g. 32.\r\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\r\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\r\n * - `onProgress` - callback function that would be executed for progress report\r\n * @returns Derived key\r\n */\r\nexport function scrypt(password, salt, opts) {\r\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\r\n    for (let pi = 0; pi < p; pi++) {\r\n        const Pi = blockSize32 * pi;\r\n        for (let i = 0; i < blockSize32; i++)\r\n            V[i] = B32[Pi + i]; // V[0] = B[i]\r\n        for (let i = 0, pos = 0; i < N - 1; i++) {\r\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\r\n            blockMixCb();\r\n        }\r\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\r\n        blockMixCb();\r\n        for (let i = 0; i < N; i++) {\r\n            // First u32 of the last 64-byte block (u32 is LE)\r\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\r\n            for (let k = 0; k < blockSize32; k++)\r\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\r\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\r\n            blockMixCb();\r\n        }\r\n    }\r\n    return scryptOutput(password, dkLen, B, V, tmp);\r\n}\r\n/**\r\n * Scrypt KDF from RFC 7914.\r\n */\r\nexport async function scryptAsync(password, salt, opts) {\r\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\r\n    for (let pi = 0; pi < p; pi++) {\r\n        const Pi = blockSize32 * pi;\r\n        for (let i = 0; i < blockSize32; i++)\r\n            V[i] = B32[Pi + i]; // V[0] = B[i]\r\n        let pos = 0;\r\n        await asyncLoop(N - 1, asyncTick, () => {\r\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\r\n            blockMixCb();\r\n        });\r\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\r\n        blockMixCb();\r\n        await asyncLoop(N, asyncTick, () => {\r\n            // First u32 of the last 64-byte block (u32 is LE)\r\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\r\n            for (let k = 0; k < blockSize32; k++)\r\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\r\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\r\n            blockMixCb();\r\n        });\r\n    }\r\n    return scryptOutput(password, dkLen, B, V, tmp);\r\n}\r\n//# sourceMappingURL=scrypt.js.map","import { scrypt as _nobleSync, scryptAsync as _nobleAsync } from \"@noble/hashes/scrypt\";\r\nimport { getBytes, hexlify as H } from \"../utils/index.js\";\r\nlet lockedSync = false, lockedAsync = false;\r\nconst _scryptAsync = async function (passwd, salt, N, r, p, dkLen, onProgress) {\r\n    return await _nobleAsync(passwd, salt, { N, r, p, dkLen, onProgress });\r\n};\r\nconst _scryptSync = function (passwd, salt, N, r, p, dkLen) {\r\n    return _nobleSync(passwd, salt, { N, r, p, dkLen });\r\n};\r\nlet __scryptAsync = _scryptAsync;\r\nlet __scryptSync = _scryptSync;\r\n/**\r\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\r\n *  derivation to increase the resource cost to brute-force a password\r\n *  for a given key.\r\n *\r\n *  This means this algorithm is intentionally slow, and can be tuned to\r\n *  become slower. As computation and memory speed improve over time,\r\n *  increasing the difficulty maintains the cost of an attacker.\r\n *\r\n *  For example, if a target time of 5 seconds is used, a legitimate user\r\n *  which knows their password requires only 5 seconds to unlock their\r\n *  account. A 6 character password has 68 billion possibilities, which\r\n *  would require an attacker to invest over 10,000 years of CPU time. This\r\n *  is of course a crude example (as password generally aren't random),\r\n *  but demonstrates to value of imposing large costs to decryption.\r\n *\r\n *  For this reason, if building a UI which involved decrypting or\r\n *  encrypting datsa using scrypt, it is recommended to use a\r\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\r\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\r\n *  can also help, assuring the user their waiting is for a good reason.\r\n *\r\n *  @_docloc: api/crypto:Passwords\r\n *\r\n *  @example:\r\n *    // The password must be converted to bytes, and it is generally\r\n *    // best practices to ensure the string has been normalized. Many\r\n *    // formats explicitly indicate the normalization form to use.\r\n *    password = \"hello\"\r\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\r\n *\r\n *    salt = id(\"some-salt\")\r\n *\r\n *    // Compute the scrypt\r\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\r\n *    //_result:\r\n */\r\nexport async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {\r\n    const passwd = getBytes(_passwd, \"passwd\");\r\n    const salt = getBytes(_salt, \"salt\");\r\n    return H(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\r\n}\r\nscrypt._ = _scryptAsync;\r\nscrypt.lock = function () { lockedAsync = true; };\r\nscrypt.register = function (func) {\r\n    if (lockedAsync) {\r\n        throw new Error(\"scrypt is locked\");\r\n    }\r\n    __scryptAsync = func;\r\n};\r\nObject.freeze(scrypt);\r\n/**\r\n *  Provides a synchronous variant of [[scrypt]].\r\n *\r\n *  This will completely lock up and freeze the UI in a browser and will\r\n *  prevent any event loop from progressing. For this reason, it is\r\n *  preferred to use the [async variant](scrypt).\r\n *\r\n *  @_docloc: api/crypto:Passwords\r\n *\r\n *  @example:\r\n *    // The password must be converted to bytes, and it is generally\r\n *    // best practices to ensure the string has been normalized. Many\r\n *    // formats explicitly indicate the normalization form to use.\r\n *    password = \"hello\"\r\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\r\n *\r\n *    salt = id(\"some-salt\")\r\n *\r\n *    // Compute the scrypt\r\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\r\n *    //_result:\r\n */\r\nexport function scryptSync(_passwd, _salt, N, r, p, dkLen) {\r\n    const passwd = getBytes(_passwd, \"passwd\");\r\n    const salt = getBytes(_salt, \"salt\");\r\n    return H(__scryptSync(passwd, salt, N, r, p, dkLen));\r\n}\r\nscryptSync._ = _scryptSync;\r\nscryptSync.lock = function () { lockedSync = true; };\r\nscryptSync.register = function (func) {\r\n    if (lockedSync) {\r\n        throw new Error(\"scryptSync is locked\");\r\n    }\r\n    __scryptSync = func;\r\n};\r\nObject.freeze(scryptSync);\r\n//# sourceMappingURL=scrypt.js.map","import { createHash } from \"./crypto.js\";\r\nimport { getBytes, hexlify } from \"../utils/index.js\";\r\nconst _sha256 = function (data) {\r\n    return createHash(\"sha256\").update(data).digest();\r\n};\r\nconst _sha512 = function (data) {\r\n    return createHash(\"sha512\").update(data).digest();\r\n};\r\nlet __sha256 = _sha256;\r\nlet __sha512 = _sha512;\r\nlet locked256 = false, locked512 = false;\r\n/**\r\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\r\n *\r\n *  @_docloc: api/crypto:Hash Functions\r\n *  @returns DataHexstring\r\n *\r\n *  @example:\r\n *    sha256(\"0x\")\r\n *    //_result:\r\n *\r\n *    sha256(\"0x1337\")\r\n *    //_result:\r\n *\r\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\r\n *    //_result:\r\n *\r\n */\r\nexport function sha256(_data) {\r\n    const data = getBytes(_data, \"data\");\r\n    return hexlify(__sha256(data));\r\n}\r\nsha256._ = _sha256;\r\nsha256.lock = function () { locked256 = true; };\r\nsha256.register = function (func) {\r\n    if (locked256) {\r\n        throw new Error(\"sha256 is locked\");\r\n    }\r\n    __sha256 = func;\r\n};\r\nObject.freeze(sha256);\r\n/**\r\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\r\n *\r\n *  @_docloc: api/crypto:Hash Functions\r\n *  @returns DataHexstring\r\n *\r\n *  @example:\r\n *    sha512(\"0x\")\r\n *    //_result:\r\n *\r\n *    sha512(\"0x1337\")\r\n *    //_result:\r\n *\r\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\r\n *    //_result:\r\n */\r\nexport function sha512(_data) {\r\n    const data = getBytes(_data, \"data\");\r\n    return hexlify(__sha512(data));\r\n}\r\nsha512._ = _sha512;\r\nsha512.lock = function () { locked512 = true; };\r\nsha512.register = function (func) {\r\n    if (locked512) {\r\n        throw new Error(\"sha512 is locked\");\r\n    }\r\n    __sha512 = func;\r\n};\r\nObject.freeze(sha256);\r\n//# sourceMappingURL=sha2.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\r\n// This is OK: `abstract` directory does not use noble-hashes.\r\n// User may opt-in into using different hashing library. This way, noble-hashes\r\n// won't be included into their bundle.\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst u8a = (a) => a instanceof Uint8Array;\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes) {\r\n    if (!u8a(bytes))\r\n        throw new Error('Uint8Array expected');\r\n    // pre-caching improves the speed 6x\r\n    let hex = '';\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        hex += hexes[bytes[i]];\r\n    }\r\n    return hex;\r\n}\r\nexport function numberToHexUnpadded(num) {\r\n    const hex = num.toString(16);\r\n    return hex.length & 1 ? `0${hex}` : hex;\r\n}\r\nexport function hexToNumber(hex) {\r\n    if (typeof hex !== 'string')\r\n        throw new Error('hex string expected, got ' + typeof hex);\r\n    // Big Endian\r\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\r\n}\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex) {\r\n    if (typeof hex !== 'string')\r\n        throw new Error('hex string expected, got ' + typeof hex);\r\n    const len = hex.length;\r\n    if (len % 2)\r\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n    const array = new Uint8Array(len / 2);\r\n    for (let i = 0; i < array.length; i++) {\r\n        const j = i * 2;\r\n        const hexByte = hex.slice(j, j + 2);\r\n        const byte = Number.parseInt(hexByte, 16);\r\n        if (Number.isNaN(byte) || byte < 0)\r\n            throw new Error('Invalid byte sequence');\r\n        array[i] = byte;\r\n    }\r\n    return array;\r\n}\r\n// BE: Big Endian, LE: Little Endian\r\nexport function bytesToNumberBE(bytes) {\r\n    return hexToNumber(bytesToHex(bytes));\r\n}\r\nexport function bytesToNumberLE(bytes) {\r\n    if (!u8a(bytes))\r\n        throw new Error('Uint8Array expected');\r\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\r\n}\r\nexport function numberToBytesBE(n, len) {\r\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\r\n}\r\nexport function numberToBytesLE(n, len) {\r\n    return numberToBytesBE(n, len).reverse();\r\n}\r\n// Unpadded, rarely used\r\nexport function numberToVarBytesBE(n) {\r\n    return hexToBytes(numberToHexUnpadded(n));\r\n}\r\n/**\r\n * Takes hex string or Uint8Array, converts to Uint8Array.\r\n * Validates output length.\r\n * Will throw error for other types.\r\n * @param title descriptive title for an error e.g. 'private key'\r\n * @param hex hex string or Uint8Array\r\n * @param expectedLength optional, will compare to result array's length\r\n * @returns\r\n */\r\nexport function ensureBytes(title, hex, expectedLength) {\r\n    let res;\r\n    if (typeof hex === 'string') {\r\n        try {\r\n            res = hexToBytes(hex);\r\n        }\r\n        catch (e) {\r\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\r\n        }\r\n    }\r\n    else if (u8a(hex)) {\r\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\r\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\r\n        res = Uint8Array.from(hex);\r\n    }\r\n    else {\r\n        throw new Error(`${title} must be hex string or Uint8Array`);\r\n    }\r\n    const len = res.length;\r\n    if (typeof expectedLength === 'number' && len !== expectedLength)\r\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\r\n    return res;\r\n}\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays) {\r\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n    let pad = 0; // walk through each item, ensure they have proper type\r\n    arrays.forEach((a) => {\r\n        if (!u8a(a))\r\n            throw new Error('Uint8Array expected');\r\n        r.set(a, pad);\r\n        pad += a.length;\r\n    });\r\n    return r;\r\n}\r\nexport function equalBytes(b1, b2) {\r\n    // We don't care about timing attacks here\r\n    if (b1.length !== b2.length)\r\n        return false;\r\n    for (let i = 0; i < b1.length; i++)\r\n        if (b1[i] !== b2[i])\r\n            return false;\r\n    return true;\r\n}\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str) {\r\n    if (typeof str !== 'string')\r\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n// Bit operations\r\n/**\r\n * Calculates amount of bits in a bigint.\r\n * Same as `n.toString(2).length`\r\n */\r\nexport function bitLen(n) {\r\n    let len;\r\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\r\n        ;\r\n    return len;\r\n}\r\n/**\r\n * Gets single bit at position.\r\n * NOTE: first bit position is 0 (same as arrays)\r\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\r\n */\r\nexport function bitGet(n, pos) {\r\n    return (n >> BigInt(pos)) & _1n;\r\n}\r\n/**\r\n * Sets single bit at position.\r\n */\r\nexport const bitSet = (n, pos, value) => {\r\n    return n | ((value ? _1n : _0n) << BigInt(pos));\r\n};\r\n/**\r\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\r\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\r\n */\r\nexport const bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\r\n// DRBG\r\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\r\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\r\n/**\r\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n * @returns function that will call DRBG until 2nd arg returns something meaningful\r\n * @example\r\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\r\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\r\n */\r\nexport function createHmacDrbg(hashLen, qByteLen, hmacFn) {\r\n    if (typeof hashLen !== 'number' || hashLen < 2)\r\n        throw new Error('hashLen must be a number');\r\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\r\n        throw new Error('qByteLen must be a number');\r\n    if (typeof hmacFn !== 'function')\r\n        throw new Error('hmacFn must be a function');\r\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\r\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\r\n    let i = 0; // Iterations counter, will throw when over 1000\r\n    const reset = () => {\r\n        v.fill(1);\r\n        k.fill(0);\r\n        i = 0;\r\n    };\r\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\r\n    const reseed = (seed = u8n()) => {\r\n        // HMAC-DRBG reseed() function. Steps D-G\r\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\r\n        v = h(); // v = hmac(k || v)\r\n        if (seed.length === 0)\r\n            return;\r\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\r\n        v = h(); // v = hmac(k || v)\r\n    };\r\n    const gen = () => {\r\n        // HMAC-DRBG generate() function\r\n        if (i++ >= 1000)\r\n            throw new Error('drbg: tried 1000 values');\r\n        let len = 0;\r\n        const out = [];\r\n        while (len < qByteLen) {\r\n            v = h();\r\n            const sl = v.slice();\r\n            out.push(sl);\r\n            len += v.length;\r\n        }\r\n        return concatBytes(...out);\r\n    };\r\n    const genUntil = (seed, pred) => {\r\n        reset();\r\n        reseed(seed); // Steps D-G\r\n        let res = undefined; // Step H: grind until k is in [1..n-1]\r\n        while (!(res = pred(gen())))\r\n            reseed();\r\n        reset();\r\n        return res;\r\n    };\r\n    return genUntil;\r\n}\r\n// Validating curves and fields\r\nconst validatorFns = {\r\n    bigint: (val) => typeof val === 'bigint',\r\n    function: (val) => typeof val === 'function',\r\n    boolean: (val) => typeof val === 'boolean',\r\n    string: (val) => typeof val === 'string',\r\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\r\n    isSafeInteger: (val) => Number.isSafeInteger(val),\r\n    array: (val) => Array.isArray(val),\r\n    field: (val, object) => object.Fp.isValid(val),\r\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\r\n};\r\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\r\nexport function validateObject(object, validators, optValidators = {}) {\r\n    const checkField = (fieldName, type, isOptional) => {\r\n        const checkVal = validatorFns[type];\r\n        if (typeof checkVal !== 'function')\r\n            throw new Error(`Invalid validator \"${type}\", expected function`);\r\n        const val = object[fieldName];\r\n        if (isOptional && val === undefined)\r\n            return;\r\n        if (!checkVal(val, object)) {\r\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\r\n        }\r\n    };\r\n    for (const [fieldName, type] of Object.entries(validators))\r\n        checkField(fieldName, type, false);\r\n    for (const [fieldName, type] of Object.entries(optValidators))\r\n        checkField(fieldName, type, true);\r\n    return object;\r\n}\r\n// validate type tests\r\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\r\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\r\n// // Should fail type-check\r\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\r\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\r\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\r\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\r\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Utilities for modular arithmetics and finite fields\r\nimport { bitMask, numberToBytesBE, numberToBytesLE, bytesToNumberBE, bytesToNumberLE, ensureBytes, validateObject, } from './utils.js';\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\r\n// prettier-ignore\r\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\r\n// prettier-ignore\r\nconst _9n = BigInt(9), _16n = BigInt(16);\r\n// Calculates a modulo b\r\nexport function mod(a, b) {\r\n    const result = a % b;\r\n    return result >= _0n ? result : b + result;\r\n}\r\n/**\r\n * Efficiently raise num to power and do modular division.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n * @example\r\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\r\n */\r\n// TODO: use field version && remove\r\nexport function pow(num, power, modulo) {\r\n    if (modulo <= _0n || power < _0n)\r\n        throw new Error('Expected power/modulo > 0');\r\n    if (modulo === _1n)\r\n        return _0n;\r\n    let res = _1n;\r\n    while (power > _0n) {\r\n        if (power & _1n)\r\n            res = (res * num) % modulo;\r\n        num = (num * num) % modulo;\r\n        power >>= _1n;\r\n    }\r\n    return res;\r\n}\r\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\r\nexport function pow2(x, power, modulo) {\r\n    let res = x;\r\n    while (power-- > _0n) {\r\n        res *= res;\r\n        res %= modulo;\r\n    }\r\n    return res;\r\n}\r\n// Inverses number over modulo\r\nexport function invert(number, modulo) {\r\n    if (number === _0n || modulo <= _0n) {\r\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\r\n    }\r\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\r\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\r\n    let a = mod(number, modulo);\r\n    let b = modulo;\r\n    // prettier-ignore\r\n    let x = _0n, y = _1n, u = _1n, v = _0n;\r\n    while (a !== _0n) {\r\n        // JIT applies optimization if those two lines follow each other\r\n        const q = b / a;\r\n        const r = b % a;\r\n        const m = x - u * q;\r\n        const n = y - v * q;\r\n        // prettier-ignore\r\n        b = a, a = r, x = u, y = v, u = m, v = n;\r\n    }\r\n    const gcd = b;\r\n    if (gcd !== _1n)\r\n        throw new Error('invert: does not exist');\r\n    return mod(x, modulo);\r\n}\r\n/**\r\n * Tonelli-Shanks square root search algorithm.\r\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\r\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\r\n * Will start an infinite loop if field order P is not prime.\r\n * @param P field order\r\n * @returns function that takes field Fp (created from P) and number n\r\n */\r\nexport function tonelliShanks(P) {\r\n    // Legendre constant: used to calculate Legendre symbol (a | p),\r\n    // which denotes the value of a^((p-1)/2) (mod p).\r\n    // (a | p) ≡ 1    if a is a square (mod p)\r\n    // (a | p) ≡ -1   if a is not a square (mod p)\r\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\r\n    const legendreC = (P - _1n) / _2n;\r\n    let Q, S, Z;\r\n    // Step 1: By factoring out powers of 2 from p - 1,\r\n    // find q and s such that p - 1 = q*(2^s) with q odd\r\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\r\n        ;\r\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\r\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\r\n        ;\r\n    // Fast-path\r\n    if (S === 1) {\r\n        const p1div4 = (P + _1n) / _4n;\r\n        return function tonelliFast(Fp, n) {\r\n            const root = Fp.pow(n, p1div4);\r\n            if (!Fp.eql(Fp.sqr(root), n))\r\n                throw new Error('Cannot find square root');\r\n            return root;\r\n        };\r\n    }\r\n    // Slow-path\r\n    const Q1div2 = (Q + _1n) / _2n;\r\n    return function tonelliSlow(Fp, n) {\r\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\r\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\r\n            throw new Error('Cannot find square root');\r\n        let r = S;\r\n        // TODO: will fail at Fp2/etc\r\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\r\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\r\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\r\n        while (!Fp.eql(b, Fp.ONE)) {\r\n            if (Fp.eql(b, Fp.ZERO))\r\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\r\n            // Find m such b^(2^m)==1\r\n            let m = 1;\r\n            for (let t2 = Fp.sqr(b); m < r; m++) {\r\n                if (Fp.eql(t2, Fp.ONE))\r\n                    break;\r\n                t2 = Fp.sqr(t2); // t2 *= t2\r\n            }\r\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\r\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\r\n            g = Fp.sqr(ge); // g = ge * ge\r\n            x = Fp.mul(x, ge); // x *= ge\r\n            b = Fp.mul(b, g); // b *= g\r\n            r = m;\r\n        }\r\n        return x;\r\n    };\r\n}\r\nexport function FpSqrt(P) {\r\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\r\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\r\n    // P ≡ 3 (mod 4)\r\n    // √n = n^((P+1)/4)\r\n    if (P % _4n === _3n) {\r\n        // Not all roots possible!\r\n        // const ORDER =\r\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\r\n        // const NUM = 72057594037927816n;\r\n        const p1div4 = (P + _1n) / _4n;\r\n        return function sqrt3mod4(Fp, n) {\r\n            const root = Fp.pow(n, p1div4);\r\n            // Throw if root**2 != n\r\n            if (!Fp.eql(Fp.sqr(root), n))\r\n                throw new Error('Cannot find square root');\r\n            return root;\r\n        };\r\n    }\r\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\r\n    if (P % _8n === _5n) {\r\n        const c1 = (P - _5n) / _8n;\r\n        return function sqrt5mod8(Fp, n) {\r\n            const n2 = Fp.mul(n, _2n);\r\n            const v = Fp.pow(n2, c1);\r\n            const nv = Fp.mul(n, v);\r\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\r\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\r\n            if (!Fp.eql(Fp.sqr(root), n))\r\n                throw new Error('Cannot find square root');\r\n            return root;\r\n        };\r\n    }\r\n    // P ≡ 9 (mod 16)\r\n    if (P % _16n === _9n) {\r\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\r\n        // Means we cannot use sqrt for constants at all!\r\n        //\r\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\r\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\r\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\r\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\r\n        // sqrt = (x) => {\r\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\r\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\r\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\r\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\r\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\r\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\r\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\r\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\r\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\r\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\r\n        // }\r\n    }\r\n    // Other cases: Tonelli-Shanks algorithm\r\n    return tonelliShanks(P);\r\n}\r\n// Little-endian check for first LE bit (last BE bit);\r\nexport const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\r\n// prettier-ignore\r\nconst FIELD_FIELDS = [\r\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\r\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\r\n    'addN', 'subN', 'mulN', 'sqrN'\r\n];\r\nexport function validateField(field) {\r\n    const initial = {\r\n        ORDER: 'bigint',\r\n        MASK: 'bigint',\r\n        BYTES: 'isSafeInteger',\r\n        BITS: 'isSafeInteger',\r\n    };\r\n    const opts = FIELD_FIELDS.reduce((map, val) => {\r\n        map[val] = 'function';\r\n        return map;\r\n    }, initial);\r\n    return validateObject(field, opts);\r\n}\r\n// Generic field functions\r\n/**\r\n * Same as `pow` but for Fp: non-constant-time.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n */\r\nexport function FpPow(f, num, power) {\r\n    // Should have same speed as pow for bigints\r\n    // TODO: benchmark!\r\n    if (power < _0n)\r\n        throw new Error('Expected power > 0');\r\n    if (power === _0n)\r\n        return f.ONE;\r\n    if (power === _1n)\r\n        return num;\r\n    let p = f.ONE;\r\n    let d = num;\r\n    while (power > _0n) {\r\n        if (power & _1n)\r\n            p = f.mul(p, d);\r\n        d = f.sqr(d);\r\n        power >>= _1n;\r\n    }\r\n    return p;\r\n}\r\n/**\r\n * Efficiently invert an array of Field elements.\r\n * `inv(0)` will return `undefined` here: make sure to throw an error.\r\n */\r\nexport function FpInvertBatch(f, nums) {\r\n    const tmp = new Array(nums.length);\r\n    // Walk from first to last, multiply them by each other MOD p\r\n    const lastMultiplied = nums.reduce((acc, num, i) => {\r\n        if (f.is0(num))\r\n            return acc;\r\n        tmp[i] = acc;\r\n        return f.mul(acc, num);\r\n    }, f.ONE);\r\n    // Invert last element\r\n    const inverted = f.inv(lastMultiplied);\r\n    // Walk from last to first, multiply them by inverted each other MOD p\r\n    nums.reduceRight((acc, num, i) => {\r\n        if (f.is0(num))\r\n            return acc;\r\n        tmp[i] = f.mul(acc, tmp[i]);\r\n        return f.mul(acc, num);\r\n    }, inverted);\r\n    return tmp;\r\n}\r\nexport function FpDiv(f, lhs, rhs) {\r\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\r\n}\r\n// This function returns True whenever the value x is a square in the field F.\r\nexport function FpIsSquare(f) {\r\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\r\n    return (x) => {\r\n        const p = f.pow(x, legendreConst);\r\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\r\n    };\r\n}\r\n// CURVE.n lengths\r\nexport function nLength(n, nBitLength) {\r\n    // Bit size, byte size of CURVE.n\r\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\r\n    const nByteLength = Math.ceil(_nBitLength / 8);\r\n    return { nBitLength: _nBitLength, nByteLength };\r\n}\r\n/**\r\n * Initializes a finite field over prime. **Non-primes are not supported.**\r\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\r\n * Major performance optimizations:\r\n * * a) denormalized operations like mulN instead of mul\r\n * * b) same object shape: never add or remove keys\r\n * * c) Object.freeze\r\n * @param ORDER prime positive bigint\r\n * @param bitLen how many bits the field consumes\r\n * @param isLE (def: false) if encoding / decoding should be in little-endian\r\n * @param redef optional faster redefinitions of sqrt and other methods\r\n */\r\nexport function Field(ORDER, bitLen, isLE = false, redef = {}) {\r\n    if (ORDER <= _0n)\r\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\r\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\r\n    if (BYTES > 2048)\r\n        throw new Error('Field lengths over 2048 bytes are not supported');\r\n    const sqrtP = FpSqrt(ORDER);\r\n    const f = Object.freeze({\r\n        ORDER,\r\n        BITS,\r\n        BYTES,\r\n        MASK: bitMask(BITS),\r\n        ZERO: _0n,\r\n        ONE: _1n,\r\n        create: (num) => mod(num, ORDER),\r\n        isValid: (num) => {\r\n            if (typeof num !== 'bigint')\r\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\r\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\r\n        },\r\n        is0: (num) => num === _0n,\r\n        isOdd: (num) => (num & _1n) === _1n,\r\n        neg: (num) => mod(-num, ORDER),\r\n        eql: (lhs, rhs) => lhs === rhs,\r\n        sqr: (num) => mod(num * num, ORDER),\r\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\r\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\r\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\r\n        pow: (num, power) => FpPow(f, num, power),\r\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\r\n        // Same as above, but doesn't normalize\r\n        sqrN: (num) => num * num,\r\n        addN: (lhs, rhs) => lhs + rhs,\r\n        subN: (lhs, rhs) => lhs - rhs,\r\n        mulN: (lhs, rhs) => lhs * rhs,\r\n        inv: (num) => invert(num, ORDER),\r\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\r\n        invertBatch: (lst) => FpInvertBatch(f, lst),\r\n        // TODO: do we really need constant cmov?\r\n        // We don't have const-time bigints anyway, so probably will be not very useful\r\n        cmov: (a, b, c) => (c ? b : a),\r\n        toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\r\n        fromBytes: (bytes) => {\r\n            if (bytes.length !== BYTES)\r\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\r\n            return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\r\n        },\r\n    });\r\n    return Object.freeze(f);\r\n}\r\nexport function FpSqrtOdd(Fp, elm) {\r\n    if (!Fp.isOdd)\r\n        throw new Error(`Field doesn't have isOdd`);\r\n    const root = Fp.sqrt(elm);\r\n    return Fp.isOdd(root) ? root : Fp.neg(root);\r\n}\r\nexport function FpSqrtEven(Fp, elm) {\r\n    if (!Fp.isOdd)\r\n        throw new Error(`Field doesn't have isOdd`);\r\n    const root = Fp.sqrt(elm);\r\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\r\n}\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\r\n * Which makes it slightly more biased, less secure.\r\n * @deprecated use mapKeyToField instead\r\n */\r\nexport function hashToPrivateScalar(hash, groupOrder, isLE = false) {\r\n    hash = ensureBytes('privateHash', hash);\r\n    const hashLen = hash.length;\r\n    const minLen = nLength(groupOrder).nByteLength + 8;\r\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\r\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\r\n    const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\r\n    return mod(num, groupOrder - _1n) + _1n;\r\n}\r\n/**\r\n * Returns total number of bytes consumed by the field element.\r\n * For example, 32 bytes for usual 256-bit weierstrass curve.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of field\r\n */\r\nexport function getFieldBytesLength(fieldOrder) {\r\n    if (typeof fieldOrder !== 'bigint')\r\n        throw new Error('field order must be bigint');\r\n    const bitLength = fieldOrder.toString(2).length;\r\n    return Math.ceil(bitLength / 8);\r\n}\r\n/**\r\n * Returns minimal amount of bytes that can be safely reduced\r\n * by field order.\r\n * Should be 2^-128 for 128-bit curve such as P256.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of target hash\r\n */\r\nexport function getMinHashLength(fieldOrder) {\r\n    const length = getFieldBytesLength(fieldOrder);\r\n    return length + Math.ceil(length / 2);\r\n}\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\r\n * and convert them into private scalar, with the modulo bias being negligible.\r\n * Needs at least 48 bytes of input for 32-byte private key.\r\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\r\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\r\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\r\n * @param hash hash output from SHA3 or a similar function\r\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\r\n * @param isLE interpret hash bytes as LE num\r\n * @returns valid private scalar\r\n */\r\nexport function mapHashToField(key, fieldOrder, isLE = false) {\r\n    const len = key.length;\r\n    const fieldLen = getFieldBytesLength(fieldOrder);\r\n    const minLen = getMinHashLength(fieldOrder);\r\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\r\n    if (len < 16 || len < minLen || len > 1024)\r\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\r\n    const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\r\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\r\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\r\n    return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\r\n}\r\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Abelian group utilities\r\nimport { validateField, nLength } from './modular.js';\r\nimport { validateObject } from './utils.js';\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\n// Elliptic curve multiplication of Point by scalar. Fragile.\r\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\r\n// Creates precomputation tables for fast multiplication:\r\n// - private scalar is split by fixed size windows of W bits\r\n// - every window point is collected from window's table & added to accumulator\r\n// - since windows are different, same point inside tables won't be accessed more than once per calc\r\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\r\n// - +1 window is neccessary for wNAF\r\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\r\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\r\n// windows to be in different memory locations\r\nexport function wNAF(c, bits) {\r\n    const constTimeNegate = (condition, item) => {\r\n        const neg = item.negate();\r\n        return condition ? neg : item;\r\n    };\r\n    const opts = (W) => {\r\n        const windows = Math.ceil(bits / W) + 1; // +1, because\r\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\r\n        return { windows, windowSize };\r\n    };\r\n    return {\r\n        constTimeNegate,\r\n        // non-const time multiplication ladder\r\n        unsafeLadder(elm, n) {\r\n            let p = c.ZERO;\r\n            let d = elm;\r\n            while (n > _0n) {\r\n                if (n & _1n)\r\n                    p = p.add(d);\r\n                d = d.double();\r\n                n >>= _1n;\r\n            }\r\n            return p;\r\n        },\r\n        /**\r\n         * Creates a wNAF precomputation window. Used for caching.\r\n         * Default window size is set by `utils.precompute()` and is equal to 8.\r\n         * Number of precomputed points depends on the curve size:\r\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\r\n         * - 𝑊 is the window size\r\n         * - 𝑛 is the bitlength of the curve order.\r\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\r\n         * @returns precomputed point tables flattened to a single array\r\n         */\r\n        precomputeWindow(elm, W) {\r\n            const { windows, windowSize } = opts(W);\r\n            const points = [];\r\n            let p = elm;\r\n            let base = p;\r\n            for (let window = 0; window < windows; window++) {\r\n                base = p;\r\n                points.push(base);\r\n                // =1, because we skip zero\r\n                for (let i = 1; i < windowSize; i++) {\r\n                    base = base.add(p);\r\n                    points.push(base);\r\n                }\r\n                p = base.double();\r\n            }\r\n            return points;\r\n        },\r\n        /**\r\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\r\n         * @param W window size\r\n         * @param precomputes precomputed tables\r\n         * @param n scalar (we don't check here, but should be less than curve order)\r\n         * @returns real and fake (for const-time) points\r\n         */\r\n        wNAF(W, precomputes, n) {\r\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\r\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\r\n            const { windows, windowSize } = opts(W);\r\n            let p = c.ZERO;\r\n            let f = c.BASE;\r\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\r\n            const maxNumber = 2 ** W;\r\n            const shiftBy = BigInt(W);\r\n            for (let window = 0; window < windows; window++) {\r\n                const offset = window * windowSize;\r\n                // Extract W bits.\r\n                let wbits = Number(n & mask);\r\n                // Shift number by W bits.\r\n                n >>= shiftBy;\r\n                // If the bits are bigger than max size, we'll split those.\r\n                // +224 => 256 - 32\r\n                if (wbits > windowSize) {\r\n                    wbits -= maxNumber;\r\n                    n += _1n;\r\n                }\r\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\r\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\r\n                // there is negate now: it is possible that negated element from low value\r\n                // would be the same as high element, which will create carry into next window.\r\n                // It's not obvious how this can fail, but still worth investigating later.\r\n                // Check if we're onto Zero point.\r\n                // Add random point inside current window to f.\r\n                const offset1 = offset;\r\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\r\n                const cond1 = window % 2 !== 0;\r\n                const cond2 = wbits < 0;\r\n                if (wbits === 0) {\r\n                    // The most important part for const-time getPublicKey\r\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\r\n                }\r\n                else {\r\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\r\n                }\r\n            }\r\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\r\n            // Even if the variable is still unused, there are some checks which will\r\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\r\n            // At this point there is a way to F be infinity-point even if p is not,\r\n            // which makes it less const-time: around 1 bigint multiply.\r\n            return { p, f };\r\n        },\r\n        wNAFCached(P, precomputesMap, n, transform) {\r\n            // @ts-ignore\r\n            const W = P._WINDOW_SIZE || 1;\r\n            // Calculate precomputes on a first run, reuse them after\r\n            let comp = precomputesMap.get(P);\r\n            if (!comp) {\r\n                comp = this.precomputeWindow(P, W);\r\n                if (W !== 1) {\r\n                    precomputesMap.set(P, transform(comp));\r\n                }\r\n            }\r\n            return this.wNAF(W, comp, n);\r\n        },\r\n    };\r\n}\r\nexport function validateBasic(curve) {\r\n    validateField(curve.Fp);\r\n    validateObject(curve, {\r\n        n: 'bigint',\r\n        h: 'bigint',\r\n        Gx: 'field',\r\n        Gy: 'field',\r\n    }, {\r\n        nBitLength: 'isSafeInteger',\r\n        nByteLength: 'isSafeInteger',\r\n    });\r\n    // Set defaults\r\n    return Object.freeze({\r\n        ...nLength(curve.n, curve.nBitLength),\r\n        ...curve,\r\n        ...{ p: curve.Fp.ORDER },\r\n    });\r\n}\r\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\r\nimport * as mod from './modular.js';\r\nimport * as ut from './utils.js';\r\nimport { ensureBytes } from './utils.js';\r\nimport { wNAF, validateBasic } from './curve.js';\r\nfunction validatePointOpts(curve) {\r\n    const opts = validateBasic(curve);\r\n    ut.validateObject(opts, {\r\n        a: 'field',\r\n        b: 'field',\r\n    }, {\r\n        allowedPrivateKeyLengths: 'array',\r\n        wrapPrivateKey: 'boolean',\r\n        isTorsionFree: 'function',\r\n        clearCofactor: 'function',\r\n        allowInfinityPoint: 'boolean',\r\n        fromBytes: 'function',\r\n        toBytes: 'function',\r\n    });\r\n    const { endo, Fp, a } = opts;\r\n    if (endo) {\r\n        if (!Fp.eql(a, Fp.ZERO)) {\r\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\r\n        }\r\n        if (typeof endo !== 'object' ||\r\n            typeof endo.beta !== 'bigint' ||\r\n            typeof endo.splitScalar !== 'function') {\r\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\r\n        }\r\n    }\r\n    return Object.freeze({ ...opts });\r\n}\r\n// ASN.1 DER encoding utilities\r\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\r\nexport const DER = {\r\n    // asn.1 DER encoding utils\r\n    Err: class DERErr extends Error {\r\n        constructor(m = '') {\r\n            super(m);\r\n        }\r\n    },\r\n    _parseInt(data) {\r\n        const { Err: E } = DER;\r\n        if (data.length < 2 || data[0] !== 0x02)\r\n            throw new E('Invalid signature integer tag');\r\n        const len = data[1];\r\n        const res = data.subarray(2, len + 2);\r\n        if (!len || res.length !== len)\r\n            throw new E('Invalid signature integer: wrong length');\r\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n        // since we always use positive integers here. It must always be empty:\r\n        // - add zero byte if exists\r\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n        if (res[0] & 0b10000000)\r\n            throw new E('Invalid signature integer: negative');\r\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\r\n            throw new E('Invalid signature integer: unnecessary leading zero');\r\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\r\n    },\r\n    toSig(hex) {\r\n        // parse DER signature\r\n        const { Err: E } = DER;\r\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\r\n        if (!(data instanceof Uint8Array))\r\n            throw new Error('ui8a expected');\r\n        let l = data.length;\r\n        if (l < 2 || data[0] != 0x30)\r\n            throw new E('Invalid signature tag');\r\n        if (data[1] !== l - 2)\r\n            throw new E('Invalid signature: incorrect length');\r\n        const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\r\n        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\r\n        if (rBytesLeft.length)\r\n            throw new E('Invalid signature: left bytes after parsing');\r\n        return { r, s };\r\n    },\r\n    hexFromSig(sig) {\r\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\r\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\r\n        const h = (num) => {\r\n            const hex = num.toString(16);\r\n            return hex.length & 1 ? `0${hex}` : hex;\r\n        };\r\n        const s = slice(h(sig.s));\r\n        const r = slice(h(sig.r));\r\n        const shl = s.length / 2;\r\n        const rhl = r.length / 2;\r\n        const sl = h(shl);\r\n        const rl = h(rhl);\r\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\r\n    },\r\n};\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\r\nexport function weierstrassPoints(opts) {\r\n    const CURVE = validatePointOpts(opts);\r\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\r\n    const toBytes = CURVE.toBytes ||\r\n        ((_c, point, _isCompressed) => {\r\n            const a = point.toAffine();\r\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\r\n        });\r\n    const fromBytes = CURVE.fromBytes ||\r\n        ((bytes) => {\r\n            // const head = bytes[0];\r\n            const tail = bytes.subarray(1);\r\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\r\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n            return { x, y };\r\n        });\r\n    /**\r\n     * y² = x³ + ax + b: Short weierstrass curve formula\r\n     * @returns y²\r\n     */\r\n    function weierstrassEquation(x) {\r\n        const { a, b } = CURVE;\r\n        const x2 = Fp.sqr(x); // x * x\r\n        const x3 = Fp.mul(x2, x); // x2 * x\r\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\r\n    }\r\n    // Validate whether the passed curve params are valid.\r\n    // We check if curve equation works for generator point.\r\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\r\n    // ProjectivePoint class has not been initialized yet.\r\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\r\n        throw new Error('bad generator point: equation left != right');\r\n    // Valid group elements reside in range 1..n-1\r\n    function isWithinCurveOrder(num) {\r\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\r\n    }\r\n    function assertGE(num) {\r\n        if (!isWithinCurveOrder(num))\r\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\r\n    }\r\n    // Validates if priv key is valid and converts it to bigint.\r\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\r\n    function normPrivateKeyToScalar(key) {\r\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\r\n        if (lengths && typeof key !== 'bigint') {\r\n            if (key instanceof Uint8Array)\r\n                key = ut.bytesToHex(key);\r\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\r\n            if (typeof key !== 'string' || !lengths.includes(key.length))\r\n                throw new Error('Invalid key');\r\n            key = key.padStart(nByteLength * 2, '0');\r\n        }\r\n        let num;\r\n        try {\r\n            num =\r\n                typeof key === 'bigint'\r\n                    ? key\r\n                    : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\r\n        }\r\n        catch (error) {\r\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\r\n        }\r\n        if (wrapPrivateKey)\r\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\r\n        assertGE(num); // num in range [1..N-1]\r\n        return num;\r\n    }\r\n    const pointPrecomputes = new Map();\r\n    function assertPrjPoint(other) {\r\n        if (!(other instanceof Point))\r\n            throw new Error('ProjectivePoint expected');\r\n    }\r\n    /**\r\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\r\n     * Default Point works in 2d / affine coordinates: (x, y)\r\n     * We're doing calculations in projective, because its operations don't require costly inversion.\r\n     */\r\n    class Point {\r\n        constructor(px, py, pz) {\r\n            this.px = px;\r\n            this.py = py;\r\n            this.pz = pz;\r\n            if (px == null || !Fp.isValid(px))\r\n                throw new Error('x required');\r\n            if (py == null || !Fp.isValid(py))\r\n                throw new Error('y required');\r\n            if (pz == null || !Fp.isValid(pz))\r\n                throw new Error('z required');\r\n        }\r\n        // Does not validate if the point is on-curve.\r\n        // Use fromHex instead, or call assertValidity() later.\r\n        static fromAffine(p) {\r\n            const { x, y } = p || {};\r\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\r\n                throw new Error('invalid affine point');\r\n            if (p instanceof Point)\r\n                throw new Error('projective point not allowed');\r\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\r\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\r\n            if (is0(x) && is0(y))\r\n                return Point.ZERO;\r\n            return new Point(x, y, Fp.ONE);\r\n        }\r\n        get x() {\r\n            return this.toAffine().x;\r\n        }\r\n        get y() {\r\n            return this.toAffine().y;\r\n        }\r\n        /**\r\n         * Takes a bunch of Projective Points but executes only one\r\n         * inversion on all of them. Inversion is very slow operation,\r\n         * so this improves performance massively.\r\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\r\n         */\r\n        static normalizeZ(points) {\r\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\r\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n        }\r\n        /**\r\n         * Converts hash string or Uint8Array to Point.\r\n         * @param hex short/long ECDSA hex\r\n         */\r\n        static fromHex(hex) {\r\n            const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\r\n            P.assertValidity();\r\n            return P;\r\n        }\r\n        // Multiplies generator point by privateKey.\r\n        static fromPrivateKey(privateKey) {\r\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\r\n        }\r\n        // \"Private method\", don't use it directly\r\n        _setWindowSize(windowSize) {\r\n            this._WINDOW_SIZE = windowSize;\r\n            pointPrecomputes.delete(this);\r\n        }\r\n        // A point on curve is valid if it conforms to equation.\r\n        assertValidity() {\r\n            if (this.is0()) {\r\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\r\n                // In BLS, ZERO can be serialized, so we allow it.\r\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\r\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\r\n                    return;\r\n                throw new Error('bad point: ZERO');\r\n            }\r\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\r\n            const { x, y } = this.toAffine();\r\n            // Check if x, y are valid field elements\r\n            if (!Fp.isValid(x) || !Fp.isValid(y))\r\n                throw new Error('bad point: x or y not FE');\r\n            const left = Fp.sqr(y); // y²\r\n            const right = weierstrassEquation(x); // x³ + ax + b\r\n            if (!Fp.eql(left, right))\r\n                throw new Error('bad point: equation left != right');\r\n            if (!this.isTorsionFree())\r\n                throw new Error('bad point: not in prime-order subgroup');\r\n        }\r\n        hasEvenY() {\r\n            const { y } = this.toAffine();\r\n            if (Fp.isOdd)\r\n                return !Fp.isOdd(y);\r\n            throw new Error(\"Field doesn't support isOdd\");\r\n        }\r\n        /**\r\n         * Compare one point to another.\r\n         */\r\n        equals(other) {\r\n            assertPrjPoint(other);\r\n            const { px: X1, py: Y1, pz: Z1 } = this;\r\n            const { px: X2, py: Y2, pz: Z2 } = other;\r\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\r\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\r\n            return U1 && U2;\r\n        }\r\n        /**\r\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\r\n         */\r\n        negate() {\r\n            return new Point(this.px, Fp.neg(this.py), this.pz);\r\n        }\r\n        // Renes-Costello-Batina exception-free doubling formula.\r\n        // There is 30% faster Jacobian formula, but it is not complete.\r\n        // https://eprint.iacr.org/2015/1060, algorithm 3\r\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\r\n        double() {\r\n            const { a, b } = CURVE;\r\n            const b3 = Fp.mul(b, _3n);\r\n            const { px: X1, py: Y1, pz: Z1 } = this;\r\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n            let t0 = Fp.mul(X1, X1); // step 1\r\n            let t1 = Fp.mul(Y1, Y1);\r\n            let t2 = Fp.mul(Z1, Z1);\r\n            let t3 = Fp.mul(X1, Y1);\r\n            t3 = Fp.add(t3, t3); // step 5\r\n            Z3 = Fp.mul(X1, Z1);\r\n            Z3 = Fp.add(Z3, Z3);\r\n            X3 = Fp.mul(a, Z3);\r\n            Y3 = Fp.mul(b3, t2);\r\n            Y3 = Fp.add(X3, Y3); // step 10\r\n            X3 = Fp.sub(t1, Y3);\r\n            Y3 = Fp.add(t1, Y3);\r\n            Y3 = Fp.mul(X3, Y3);\r\n            X3 = Fp.mul(t3, X3);\r\n            Z3 = Fp.mul(b3, Z3); // step 15\r\n            t2 = Fp.mul(a, t2);\r\n            t3 = Fp.sub(t0, t2);\r\n            t3 = Fp.mul(a, t3);\r\n            t3 = Fp.add(t3, Z3);\r\n            Z3 = Fp.add(t0, t0); // step 20\r\n            t0 = Fp.add(Z3, t0);\r\n            t0 = Fp.add(t0, t2);\r\n            t0 = Fp.mul(t0, t3);\r\n            Y3 = Fp.add(Y3, t0);\r\n            t2 = Fp.mul(Y1, Z1); // step 25\r\n            t2 = Fp.add(t2, t2);\r\n            t0 = Fp.mul(t2, t3);\r\n            X3 = Fp.sub(X3, t0);\r\n            Z3 = Fp.mul(t2, t1);\r\n            Z3 = Fp.add(Z3, Z3); // step 30\r\n            Z3 = Fp.add(Z3, Z3);\r\n            return new Point(X3, Y3, Z3);\r\n        }\r\n        // Renes-Costello-Batina exception-free addition formula.\r\n        // There is 30% faster Jacobian formula, but it is not complete.\r\n        // https://eprint.iacr.org/2015/1060, algorithm 1\r\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\r\n        add(other) {\r\n            assertPrjPoint(other);\r\n            const { px: X1, py: Y1, pz: Z1 } = this;\r\n            const { px: X2, py: Y2, pz: Z2 } = other;\r\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n            const a = CURVE.a;\r\n            const b3 = Fp.mul(CURVE.b, _3n);\r\n            let t0 = Fp.mul(X1, X2); // step 1\r\n            let t1 = Fp.mul(Y1, Y2);\r\n            let t2 = Fp.mul(Z1, Z2);\r\n            let t3 = Fp.add(X1, Y1);\r\n            let t4 = Fp.add(X2, Y2); // step 5\r\n            t3 = Fp.mul(t3, t4);\r\n            t4 = Fp.add(t0, t1);\r\n            t3 = Fp.sub(t3, t4);\r\n            t4 = Fp.add(X1, Z1);\r\n            let t5 = Fp.add(X2, Z2); // step 10\r\n            t4 = Fp.mul(t4, t5);\r\n            t5 = Fp.add(t0, t2);\r\n            t4 = Fp.sub(t4, t5);\r\n            t5 = Fp.add(Y1, Z1);\r\n            X3 = Fp.add(Y2, Z2); // step 15\r\n            t5 = Fp.mul(t5, X3);\r\n            X3 = Fp.add(t1, t2);\r\n            t5 = Fp.sub(t5, X3);\r\n            Z3 = Fp.mul(a, t4);\r\n            X3 = Fp.mul(b3, t2); // step 20\r\n            Z3 = Fp.add(X3, Z3);\r\n            X3 = Fp.sub(t1, Z3);\r\n            Z3 = Fp.add(t1, Z3);\r\n            Y3 = Fp.mul(X3, Z3);\r\n            t1 = Fp.add(t0, t0); // step 25\r\n            t1 = Fp.add(t1, t0);\r\n            t2 = Fp.mul(a, t2);\r\n            t4 = Fp.mul(b3, t4);\r\n            t1 = Fp.add(t1, t2);\r\n            t2 = Fp.sub(t0, t2); // step 30\r\n            t2 = Fp.mul(a, t2);\r\n            t4 = Fp.add(t4, t2);\r\n            t0 = Fp.mul(t1, t4);\r\n            Y3 = Fp.add(Y3, t0);\r\n            t0 = Fp.mul(t5, t4); // step 35\r\n            X3 = Fp.mul(t3, X3);\r\n            X3 = Fp.sub(X3, t0);\r\n            t0 = Fp.mul(t3, t1);\r\n            Z3 = Fp.mul(t5, Z3);\r\n            Z3 = Fp.add(Z3, t0); // step 40\r\n            return new Point(X3, Y3, Z3);\r\n        }\r\n        subtract(other) {\r\n            return this.add(other.negate());\r\n        }\r\n        is0() {\r\n            return this.equals(Point.ZERO);\r\n        }\r\n        wNAF(n) {\r\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\r\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\r\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n            });\r\n        }\r\n        /**\r\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\r\n         * It's faster, but should only be used when you don't care about\r\n         * an exposed private key e.g. sig verification, which works over *public* keys.\r\n         */\r\n        multiplyUnsafe(n) {\r\n            const I = Point.ZERO;\r\n            if (n === _0n)\r\n                return I;\r\n            assertGE(n); // Will throw on 0\r\n            if (n === _1n)\r\n                return this;\r\n            const { endo } = CURVE;\r\n            if (!endo)\r\n                return wnaf.unsafeLadder(this, n);\r\n            // Apply endomorphism\r\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n            let k1p = I;\r\n            let k2p = I;\r\n            let d = this;\r\n            while (k1 > _0n || k2 > _0n) {\r\n                if (k1 & _1n)\r\n                    k1p = k1p.add(d);\r\n                if (k2 & _1n)\r\n                    k2p = k2p.add(d);\r\n                d = d.double();\r\n                k1 >>= _1n;\r\n                k2 >>= _1n;\r\n            }\r\n            if (k1neg)\r\n                k1p = k1p.negate();\r\n            if (k2neg)\r\n                k2p = k2p.negate();\r\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n            return k1p.add(k2p);\r\n        }\r\n        /**\r\n         * Constant time multiplication.\r\n         * Uses wNAF method. Windowed method may be 10% faster,\r\n         * but takes 2x longer to generate and consumes 2x memory.\r\n         * Uses precomputes when available.\r\n         * Uses endomorphism for Koblitz curves.\r\n         * @param scalar by which the point would be multiplied\r\n         * @returns New point\r\n         */\r\n        multiply(scalar) {\r\n            assertGE(scalar);\r\n            let n = scalar;\r\n            let point, fake; // Fake point is used to const-time mult\r\n            const { endo } = CURVE;\r\n            if (endo) {\r\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n                let { p: k1p, f: f1p } = this.wNAF(k1);\r\n                let { p: k2p, f: f2p } = this.wNAF(k2);\r\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\r\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\r\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n                point = k1p.add(k2p);\r\n                fake = f1p.add(f2p);\r\n            }\r\n            else {\r\n                const { p, f } = this.wNAF(n);\r\n                point = p;\r\n                fake = f;\r\n            }\r\n            // Normalize `z` for both points, but return only real one\r\n            return Point.normalizeZ([point, fake])[0];\r\n        }\r\n        /**\r\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\r\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\r\n         * The trick could be useful if both P and Q are not G (not in our case).\r\n         * @returns non-zero affine point\r\n         */\r\n        multiplyAndAddUnsafe(Q, a, b) {\r\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\r\n            const mul = (P, a // Select faster multiply() method\r\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\r\n            const sum = mul(this, a).add(mul(Q, b));\r\n            return sum.is0() ? undefined : sum;\r\n        }\r\n        // Converts Projective point to affine (x, y) coordinates.\r\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\r\n        // (x, y, z) ∋ (x=x/z, y=y/z)\r\n        toAffine(iz) {\r\n            const { px: x, py: y, pz: z } = this;\r\n            const is0 = this.is0();\r\n            // If invZ was 0, we return zero point. However we still want to execute\r\n            // all operations, so we replace invZ with a random number, 1.\r\n            if (iz == null)\r\n                iz = is0 ? Fp.ONE : Fp.inv(z);\r\n            const ax = Fp.mul(x, iz);\r\n            const ay = Fp.mul(y, iz);\r\n            const zz = Fp.mul(z, iz);\r\n            if (is0)\r\n                return { x: Fp.ZERO, y: Fp.ZERO };\r\n            if (!Fp.eql(zz, Fp.ONE))\r\n                throw new Error('invZ was invalid');\r\n            return { x: ax, y: ay };\r\n        }\r\n        isTorsionFree() {\r\n            const { h: cofactor, isTorsionFree } = CURVE;\r\n            if (cofactor === _1n)\r\n                return true; // No subgroups, always torsion-free\r\n            if (isTorsionFree)\r\n                return isTorsionFree(Point, this);\r\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\r\n        }\r\n        clearCofactor() {\r\n            const { h: cofactor, clearCofactor } = CURVE;\r\n            if (cofactor === _1n)\r\n                return this; // Fast-path\r\n            if (clearCofactor)\r\n                return clearCofactor(Point, this);\r\n            return this.multiplyUnsafe(CURVE.h);\r\n        }\r\n        toRawBytes(isCompressed = true) {\r\n            this.assertValidity();\r\n            return toBytes(Point, this, isCompressed);\r\n        }\r\n        toHex(isCompressed = true) {\r\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\r\n        }\r\n    }\r\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\r\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\r\n    const _bits = CURVE.nBitLength;\r\n    const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\r\n    // Validate if generator point is on curve\r\n    return {\r\n        CURVE,\r\n        ProjectivePoint: Point,\r\n        normPrivateKeyToScalar,\r\n        weierstrassEquation,\r\n        isWithinCurveOrder,\r\n    };\r\n}\r\nfunction validateOpts(curve) {\r\n    const opts = validateBasic(curve);\r\n    ut.validateObject(opts, {\r\n        hash: 'hash',\r\n        hmac: 'function',\r\n        randomBytes: 'function',\r\n    }, {\r\n        bits2int: 'function',\r\n        bits2int_modN: 'function',\r\n        lowS: 'boolean',\r\n    });\r\n    return Object.freeze({ lowS: true, ...opts });\r\n}\r\nexport function weierstrass(curveDef) {\r\n    const CURVE = validateOpts(curveDef);\r\n    const { Fp, n: CURVE_ORDER } = CURVE;\r\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\r\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\r\n    function isValidFieldElement(num) {\r\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\r\n    }\r\n    function modN(a) {\r\n        return mod.mod(a, CURVE_ORDER);\r\n    }\r\n    function invN(a) {\r\n        return mod.invert(a, CURVE_ORDER);\r\n    }\r\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\r\n        ...CURVE,\r\n        toBytes(_c, point, isCompressed) {\r\n            const a = point.toAffine();\r\n            const x = Fp.toBytes(a.x);\r\n            const cat = ut.concatBytes;\r\n            if (isCompressed) {\r\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\r\n            }\r\n            else {\r\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\r\n            }\r\n        },\r\n        fromBytes(bytes) {\r\n            const len = bytes.length;\r\n            const head = bytes[0];\r\n            const tail = bytes.subarray(1);\r\n            // this.assertValidity() is done inside of fromHex\r\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\r\n                const x = ut.bytesToNumberBE(tail);\r\n                if (!isValidFieldElement(x))\r\n                    throw new Error('Point is not on curve');\r\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\r\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\r\n                const isYOdd = (y & _1n) === _1n;\r\n                // ECDSA\r\n                const isHeadOdd = (head & 1) === 1;\r\n                if (isHeadOdd !== isYOdd)\r\n                    y = Fp.neg(y);\r\n                return { x, y };\r\n            }\r\n            else if (len === uncompressedLen && head === 0x04) {\r\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n                return { x, y };\r\n            }\r\n            else {\r\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\r\n            }\r\n        },\r\n    });\r\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\r\n    function isBiggerThanHalfOrder(number) {\r\n        const HALF = CURVE_ORDER >> _1n;\r\n        return number > HALF;\r\n    }\r\n    function normalizeS(s) {\r\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\r\n    }\r\n    // slice bytes num\r\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\r\n    /**\r\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\r\n     */\r\n    class Signature {\r\n        constructor(r, s, recovery) {\r\n            this.r = r;\r\n            this.s = s;\r\n            this.recovery = recovery;\r\n            this.assertValidity();\r\n        }\r\n        // pair (bytes of r, bytes of s)\r\n        static fromCompact(hex) {\r\n            const l = CURVE.nByteLength;\r\n            hex = ensureBytes('compactSignature', hex, l * 2);\r\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\r\n        }\r\n        // DER encoded ECDSA signature\r\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\r\n        static fromDER(hex) {\r\n            const { r, s } = DER.toSig(ensureBytes('DER', hex));\r\n            return new Signature(r, s);\r\n        }\r\n        assertValidity() {\r\n            // can use assertGE here\r\n            if (!isWithinCurveOrder(this.r))\r\n                throw new Error('r must be 0 < r < CURVE.n');\r\n            if (!isWithinCurveOrder(this.s))\r\n                throw new Error('s must be 0 < s < CURVE.n');\r\n        }\r\n        addRecoveryBit(recovery) {\r\n            return new Signature(this.r, this.s, recovery);\r\n        }\r\n        recoverPublicKey(msgHash) {\r\n            const { r, s, recovery: rec } = this;\r\n            const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\r\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\r\n                throw new Error('recovery id invalid');\r\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\r\n            if (radj >= Fp.ORDER)\r\n                throw new Error('recovery id 2 or 3 invalid');\r\n            const prefix = (rec & 1) === 0 ? '02' : '03';\r\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\r\n            const ir = invN(radj); // r^-1\r\n            const u1 = modN(-h * ir); // -hr^-1\r\n            const u2 = modN(s * ir); // sr^-1\r\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\r\n            if (!Q)\r\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\r\n            Q.assertValidity();\r\n            return Q;\r\n        }\r\n        // Signatures should be low-s, to prevent malleability.\r\n        hasHighS() {\r\n            return isBiggerThanHalfOrder(this.s);\r\n        }\r\n        normalizeS() {\r\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\r\n        }\r\n        // DER-encoded\r\n        toDERRawBytes() {\r\n            return ut.hexToBytes(this.toDERHex());\r\n        }\r\n        toDERHex() {\r\n            return DER.hexFromSig({ r: this.r, s: this.s });\r\n        }\r\n        // padded bytes of r, then padded bytes of s\r\n        toCompactRawBytes() {\r\n            return ut.hexToBytes(this.toCompactHex());\r\n        }\r\n        toCompactHex() {\r\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\r\n        }\r\n    }\r\n    const utils = {\r\n        isValidPrivateKey(privateKey) {\r\n            try {\r\n                normPrivateKeyToScalar(privateKey);\r\n                return true;\r\n            }\r\n            catch (error) {\r\n                return false;\r\n            }\r\n        },\r\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\r\n        /**\r\n         * Produces cryptographically secure private key from random of size\r\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\r\n         */\r\n        randomPrivateKey: () => {\r\n            const length = mod.getMinHashLength(CURVE.n);\r\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\r\n        },\r\n        /**\r\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\r\n         * Allows to massively speed-up `point.multiply(scalar)`.\r\n         * @returns cached point\r\n         * @example\r\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\r\n         * fast.multiply(privKey); // much faster ECDH now\r\n         */\r\n        precompute(windowSize = 8, point = Point.BASE) {\r\n            point._setWindowSize(windowSize);\r\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\r\n            return point;\r\n        },\r\n    };\r\n    /**\r\n     * Computes public key for a private key. Checks for validity of the private key.\r\n     * @param privateKey private key\r\n     * @param isCompressed whether to return compact (default), or full key\r\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\r\n     */\r\n    function getPublicKey(privateKey, isCompressed = true) {\r\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\r\n    }\r\n    /**\r\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\r\n     */\r\n    function isProbPub(item) {\r\n        const arr = item instanceof Uint8Array;\r\n        const str = typeof item === 'string';\r\n        const len = (arr || str) && item.length;\r\n        if (arr)\r\n            return len === compressedLen || len === uncompressedLen;\r\n        if (str)\r\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\r\n        if (item instanceof Point)\r\n            return true;\r\n        return false;\r\n    }\r\n    /**\r\n     * ECDH (Elliptic Curve Diffie Hellman).\r\n     * Computes shared public key from private key and public key.\r\n     * Checks: 1) private key validity 2) shared key is on-curve.\r\n     * Does NOT hash the result.\r\n     * @param privateA private key\r\n     * @param publicB different public key\r\n     * @param isCompressed whether to return compact (default), or full key\r\n     * @returns shared public key\r\n     */\r\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\r\n        if (isProbPub(privateA))\r\n            throw new Error('first arg must be private key');\r\n        if (!isProbPub(publicB))\r\n            throw new Error('second arg must be public key');\r\n        const b = Point.fromHex(publicB); // check for being on-curve\r\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\r\n    }\r\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\r\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\r\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\r\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\r\n    const bits2int = CURVE.bits2int ||\r\n        function (bytes) {\r\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\r\n            // for some cases, since bytes.length * 8 is not actual bitLength.\r\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\r\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\r\n            return delta > 0 ? num >> BigInt(delta) : num;\r\n        };\r\n    const bits2int_modN = CURVE.bits2int_modN ||\r\n        function (bytes) {\r\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\r\n        };\r\n    // NOTE: pads output with zero as per spec\r\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\r\n    /**\r\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\r\n     */\r\n    function int2octets(num) {\r\n        if (typeof num !== 'bigint')\r\n            throw new Error('bigint expected');\r\n        if (!(_0n <= num && num < ORDER_MASK))\r\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\r\n        // works with order, can have different size than numToField!\r\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\r\n    }\r\n    // Steps A, D of RFC6979 3.2\r\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\r\n    // Used only in sign, not in verify.\r\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\r\n    // Also it can be bigger for P224 + SHA256\r\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\r\n        if (['recovered', 'canonical'].some((k) => k in opts))\r\n            throw new Error('sign() legacy options not supported');\r\n        const { hash, randomBytes } = CURVE;\r\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\r\n        if (lowS == null)\r\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\r\n        msgHash = ensureBytes('msgHash', msgHash);\r\n        if (prehash)\r\n            msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\r\n        // We can't later call bits2octets, since nested bits2int is broken for curves\r\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\r\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\r\n        const h1int = bits2int_modN(msgHash);\r\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\r\n        const seedArgs = [int2octets(d), int2octets(h1int)];\r\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\r\n        if (ent != null) {\r\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\r\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\r\n            seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\r\n        }\r\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\r\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\r\n        // Converts signature params into point w r/s, checks result for validity.\r\n        function k2sig(kBytes) {\r\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\r\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\r\n            if (!isWithinCurveOrder(k))\r\n                return; // Important: all mod() calls here must be done over N\r\n            const ik = invN(k); // k^-1 mod n\r\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\r\n            const r = modN(q.x); // r = q.x mod n\r\n            if (r === _0n)\r\n                return;\r\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\r\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\r\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\r\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\r\n            if (s === _0n)\r\n                return;\r\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\r\n            let normS = s;\r\n            if (lowS && isBiggerThanHalfOrder(s)) {\r\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\r\n                recovery ^= 1; // // in the bottom half of N\r\n            }\r\n            return new Signature(r, normS, recovery); // use normS, not s\r\n        }\r\n        return { seed, k2sig };\r\n    }\r\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\r\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\r\n    /**\r\n     * Signs message hash with a private key.\r\n     * ```\r\n     * sign(m, d, k) where\r\n     *   (x, y) = G × k\r\n     *   r = x mod n\r\n     *   s = (m + dr)/k mod n\r\n     * ```\r\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\r\n     * @param privKey private key\r\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\r\n     * @returns signature with recovery param\r\n     */\r\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\r\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\r\n        const C = CURVE;\r\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\r\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\r\n    }\r\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\r\n    Point.BASE._setWindowSize(8);\r\n    // utils.precompute(8, ProjectivePoint.BASE)\r\n    /**\r\n     * Verifies a signature against message hash and public key.\r\n     * Rejects lowS signatures by default: to override,\r\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\r\n     *\r\n     * ```\r\n     * verify(r, s, h, P) where\r\n     *   U1 = hs^-1 mod n\r\n     *   U2 = rs^-1 mod n\r\n     *   R = U1⋅G - U2⋅P\r\n     *   mod(R.x, n) == r\r\n     * ```\r\n     */\r\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\r\n        const sg = signature;\r\n        msgHash = ensureBytes('msgHash', msgHash);\r\n        publicKey = ensureBytes('publicKey', publicKey);\r\n        if ('strict' in opts)\r\n            throw new Error('options.strict was renamed to lowS');\r\n        const { lowS, prehash } = opts;\r\n        let _sig = undefined;\r\n        let P;\r\n        try {\r\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\r\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\r\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\r\n                try {\r\n                    _sig = Signature.fromDER(sg);\r\n                }\r\n                catch (derError) {\r\n                    if (!(derError instanceof DER.Err))\r\n                        throw derError;\r\n                    _sig = Signature.fromCompact(sg);\r\n                }\r\n            }\r\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\r\n                const { r, s } = sg;\r\n                _sig = new Signature(r, s);\r\n            }\r\n            else {\r\n                throw new Error('PARSE');\r\n            }\r\n            P = Point.fromHex(publicKey);\r\n        }\r\n        catch (error) {\r\n            if (error.message === 'PARSE')\r\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\r\n            return false;\r\n        }\r\n        if (lowS && _sig.hasHighS())\r\n            return false;\r\n        if (prehash)\r\n            msgHash = CURVE.hash(msgHash);\r\n        const { r, s } = _sig;\r\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\r\n        const is = invN(s); // s^-1\r\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\r\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\r\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\r\n        if (!R)\r\n            return false;\r\n        const v = modN(R.x);\r\n        return v === r;\r\n    }\r\n    return {\r\n        CURVE,\r\n        getPublicKey,\r\n        getSharedSecret,\r\n        sign,\r\n        verify,\r\n        ProjectivePoint: Point,\r\n        Signature,\r\n        utils,\r\n    };\r\n}\r\n/**\r\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\r\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\r\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\r\n * b = False and y = sqrt(Z * (u / v)) otherwise.\r\n * @param Fp\r\n * @param Z\r\n * @returns\r\n */\r\nexport function SWUFpSqrtRatio(Fp, Z) {\r\n    // Generic implementation\r\n    const q = Fp.ORDER;\r\n    let l = _0n;\r\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\r\n        l += _1n;\r\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\r\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\r\n    // 2n ** c1 == 2n << (c1-1)\r\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\r\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\r\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\r\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\r\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\r\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\r\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\r\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\r\n    let sqrtRatio = (u, v) => {\r\n        let tv1 = c6; // 1. tv1 = c6\r\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\r\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\r\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\r\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\r\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\r\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\r\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\r\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\r\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\r\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\r\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\r\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\r\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\r\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\r\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\r\n        // 17. for i in (c1, c1 - 1, ..., 2):\r\n        for (let i = c1; i > _1n; i--) {\r\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\r\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\r\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\r\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\r\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\r\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\r\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\r\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\r\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\r\n        }\r\n        return { isValid: isQR, value: tv3 };\r\n    };\r\n    if (Fp.ORDER % _4n === _3n) {\r\n        // sqrt_ratio_3mod4(u, v)\r\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\r\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\r\n        sqrtRatio = (u, v) => {\r\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\r\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\r\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\r\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\r\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\r\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\r\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\r\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\r\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\r\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\r\n        };\r\n    }\r\n    // No curves uses that\r\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\r\n    return sqrtRatio;\r\n}\r\n/**\r\n * Simplified Shallue-van de Woestijne-Ulas Method\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\r\n */\r\nexport function mapToCurveSimpleSWU(Fp, opts) {\r\n    mod.validateField(Fp);\r\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\r\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\r\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\r\n    if (!Fp.isOdd)\r\n        throw new Error('Fp.isOdd is not implemented!');\r\n    // Input: u, an element of F.\r\n    // Output: (x, y), a point on E.\r\n    return (u) => {\r\n        // prettier-ignore\r\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\r\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\r\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\r\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\r\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\r\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\r\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\r\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\r\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\r\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\r\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\r\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\r\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\r\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\r\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\r\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\r\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\r\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\r\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\r\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\r\n        y = Fp.mul(y, value); // 20.   y = y * y1\r\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\r\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\r\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\r\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\r\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\r\n        return { x, y };\r\n    };\r\n}\r\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\r\nimport { weierstrass } from './abstract/weierstrass.js';\r\n// connects noble-curves to noble-hashes\r\nexport function getHash(hash) {\r\n    return {\r\n        hash,\r\n        hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),\r\n        randomBytes,\r\n    };\r\n}\r\nexport function createCurve(curveDef, defHash) {\r\n    const create = (hash) => weierstrass({ ...curveDef, ...getHash(hash) });\r\n    return Object.freeze({ ...create(defHash), create });\r\n}\r\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256 } from '@noble/hashes/sha256';\r\nimport { randomBytes } from '@noble/hashes/utils';\r\nimport { Field, mod, pow2 } from './abstract/modular.js';\r\nimport { mapToCurveSimpleSWU } from './abstract/weierstrass.js';\r\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\r\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\r\nimport { createCurve } from './_shortw_utils.js';\r\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\r\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst divNearest = (a, b) => (a + b / _2n) / b;\r\n/**\r\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\r\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\r\n */\r\nfunction sqrtMod(y) {\r\n    const P = secp256k1P;\r\n    // prettier-ignore\r\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\r\n    // prettier-ignore\r\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\r\n    const b2 = (y * y * y) % P; // x^3, 11\r\n    const b3 = (b2 * b2 * y) % P; // x^7\r\n    const b6 = (pow2(b3, _3n, P) * b3) % P;\r\n    const b9 = (pow2(b6, _3n, P) * b3) % P;\r\n    const b11 = (pow2(b9, _2n, P) * b2) % P;\r\n    const b22 = (pow2(b11, _11n, P) * b11) % P;\r\n    const b44 = (pow2(b22, _22n, P) * b22) % P;\r\n    const b88 = (pow2(b44, _44n, P) * b44) % P;\r\n    const b176 = (pow2(b88, _88n, P) * b88) % P;\r\n    const b220 = (pow2(b176, _44n, P) * b44) % P;\r\n    const b223 = (pow2(b220, _3n, P) * b3) % P;\r\n    const t1 = (pow2(b223, _23n, P) * b22) % P;\r\n    const t2 = (pow2(t1, _6n, P) * b2) % P;\r\n    const root = pow2(t2, _2n, P);\r\n    if (!Fp.eql(Fp.sqr(root), y))\r\n        throw new Error('Cannot find square root');\r\n    return root;\r\n}\r\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\r\nexport const secp256k1 = createCurve({\r\n    a: BigInt(0),\r\n    b: BigInt(7),\r\n    Fp,\r\n    n: secp256k1N,\r\n    // Base point (x, y) aka generator point\r\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\r\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\r\n    h: BigInt(1),\r\n    lowS: true,\r\n    /**\r\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\r\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\r\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\r\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\r\n     */\r\n    endo: {\r\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\r\n        splitScalar: (k) => {\r\n            const n = secp256k1N;\r\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\r\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\r\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\r\n            const b2 = a1;\r\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\r\n            const c1 = divNearest(b2 * k, n);\r\n            const c2 = divNearest(-b1 * k, n);\r\n            let k1 = mod(k - c1 * a1 - c2 * a2, n);\r\n            let k2 = mod(-c1 * b1 - c2 * b2, n);\r\n            const k1neg = k1 > POW_2_128;\r\n            const k2neg = k2 > POW_2_128;\r\n            if (k1neg)\r\n                k1 = n - k1;\r\n            if (k2neg)\r\n                k2 = n - k2;\r\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\r\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\r\n            }\r\n            return { k1neg, k1, k2neg, k2 };\r\n        },\r\n    },\r\n}, sha256);\r\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\r\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\nconst _0n = BigInt(0);\r\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\r\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\r\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\r\nconst TAGGED_HASH_PREFIXES = {};\r\nfunction taggedHash(tag, ...messages) {\r\n    let tagP = TAGGED_HASH_PREFIXES[tag];\r\n    if (tagP === undefined) {\r\n        const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\r\n        tagP = concatBytes(tagH, tagH);\r\n        TAGGED_HASH_PREFIXES[tag] = tagP;\r\n    }\r\n    return sha256(concatBytes(tagP, ...messages));\r\n}\r\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\r\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\r\nconst numTo32b = (n) => numberToBytesBE(n, 32);\r\nconst modP = (x) => mod(x, secp256k1P);\r\nconst modN = (x) => mod(x, secp256k1N);\r\nconst Point = secp256k1.ProjectivePoint;\r\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\r\n// Calculate point, scalar and bytes\r\nfunction schnorrGetExtPubKey(priv) {\r\n    let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\r\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\r\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\r\n    return { scalar: scalar, bytes: pointToBytes(p) };\r\n}\r\n/**\r\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\r\n * @returns valid point checked for being on-curve\r\n */\r\nfunction lift_x(x) {\r\n    if (!fe(x))\r\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\r\n    const xx = modP(x * x);\r\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\r\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\r\n    if (y % _2n !== _0n)\r\n        y = modP(-y); // Return the unique point P such that x(P) = x and\r\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\r\n    p.assertValidity();\r\n    return p;\r\n}\r\n/**\r\n * Create tagged hash, convert it to bigint, reduce modulo-n.\r\n */\r\nfunction challenge(...args) {\r\n    return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\r\n}\r\n/**\r\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\r\n */\r\nfunction schnorrGetPublicKey(privateKey) {\r\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\r\n}\r\n/**\r\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\r\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\r\n */\r\nfunction schnorrSign(message, privateKey, auxRand = randomBytes(32)) {\r\n    const m = ensureBytes('message', message);\r\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\r\n    const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\r\n    const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\r\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\r\n    const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\r\n    if (k_ === _0n)\r\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\r\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\r\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\r\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\r\n    sig.set(rx, 0);\r\n    sig.set(numTo32b(modN(k + e * d)), 32);\r\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\r\n    if (!schnorrVerify(sig, m, px))\r\n        throw new Error('sign: Invalid signature produced');\r\n    return sig;\r\n}\r\n/**\r\n * Verifies Schnorr signature.\r\n * Will swallow errors & return false except for initial type validation of arguments.\r\n */\r\nfunction schnorrVerify(signature, message, publicKey) {\r\n    const sig = ensureBytes('signature', signature, 64);\r\n    const m = ensureBytes('message', message);\r\n    const pub = ensureBytes('publicKey', publicKey, 32);\r\n    try {\r\n        const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\r\n        const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\r\n        if (!fe(r))\r\n            return false;\r\n        const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\r\n        if (!ge(s))\r\n            return false;\r\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\r\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\r\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\r\n            return false; // -eP == (n-e)P\r\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\nexport const schnorr = /* @__PURE__ */ (() => ({\r\n    getPublicKey: schnorrGetPublicKey,\r\n    sign: schnorrSign,\r\n    verify: schnorrVerify,\r\n    utils: {\r\n        randomPrivateKey: secp256k1.utils.randomPrivateKey,\r\n        lift_x,\r\n        pointToBytes,\r\n        numberToBytesBE,\r\n        bytesToNumberBE,\r\n        taggedHash,\r\n        mod,\r\n    },\r\n}))();\r\nconst isoMap = /* @__PURE__ */ (() => isogenyMap(Fp, [\r\n    // xNum\r\n    [\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\r\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\r\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\r\n    ],\r\n    // xDen\r\n    [\r\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\r\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n    ],\r\n    // yNum\r\n    [\r\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\r\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\r\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\r\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\r\n    ],\r\n    // yDen\r\n    [\r\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\r\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\r\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n    ],\r\n].map((i) => i.map((j) => BigInt(j)))))();\r\nconst mapSWU = /* @__PURE__ */ (() => mapToCurveSimpleSWU(Fp, {\r\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\r\n    B: BigInt('1771'),\r\n    Z: Fp.create(BigInt('-11')),\r\n}))();\r\nconst htf = /* @__PURE__ */ (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {\r\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\r\n    return isoMap(x, y);\r\n}, {\r\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\r\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\r\n    p: Fp.ORDER,\r\n    m: 1,\r\n    k: 128,\r\n    expand: 'xmd',\r\n    hash: sha256,\r\n}))();\r\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\r\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\r\n//# sourceMappingURL=secp256k1.js.map","/**\r\n *  A constant for the zero address.\r\n *\r\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\r\n */\r\nexport const ZeroAddress = \"0x0000000000000000000000000000000000000000\";\r\n//# sourceMappingURL=addresses.js.map","/**\r\n *  A constant for the zero hash.\r\n *\r\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\r\n */\r\nexport const ZeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\r\n//# sourceMappingURL=hashes.js.map","// NFKC (composed)             // (decomposed)\r\n/**\r\n *  A constant for the ether symbol (normalized using NFKC).\r\n *\r\n *  (**i.e.** ``\"\\\\u039e\"``)\r\n */\r\nexport const EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\r\n/**\r\n *  A constant for the [[link-eip-191]] personal message prefix.\r\n *\r\n *  (**i.e.** ``\"\\\\x19Ethereum Signed Message:\\\\n\"``)\r\n */\r\nexport const MessagePrefix = \"\\x19Ethereum Signed Message:\\n\";\r\n//# sourceMappingURL=strings.js.map","import { ZeroHash } from \"../constants/index.js\";\r\nimport { concat, dataLength, getBigInt, getBytes, getNumber, hexlify, toBeArray, isHexString, zeroPadValue, assertArgument, assertPrivate } from \"../utils/index.js\";\r\n// Constants\r\nconst BN_0 = BigInt(0);\r\nconst BN_1 = BigInt(1);\r\nconst BN_2 = BigInt(2);\r\nconst BN_27 = BigInt(27);\r\nconst BN_28 = BigInt(28);\r\nconst BN_35 = BigInt(35);\r\nconst _guard = {};\r\nfunction toUint256(value) {\r\n    return zeroPadValue(toBeArray(value), 32);\r\n}\r\n/**\r\n *  A Signature  @TODO\r\n *\r\n *\r\n *  @_docloc: api/crypto:Signing\r\n */\r\nexport class Signature {\r\n    #r;\r\n    #s;\r\n    #v;\r\n    #networkV;\r\n    /**\r\n     *  The ``r`` value for a signautre.\r\n     *\r\n     *  This represents the ``x`` coordinate of a \"reference\" or\r\n     *  challenge point, from which the ``y`` can be computed.\r\n     */\r\n    get r() { return this.#r; }\r\n    set r(value) {\r\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\r\n        this.#r = hexlify(value);\r\n    }\r\n    /**\r\n     *  The ``s`` value for a signature.\r\n     */\r\n    get s() { return this.#s; }\r\n    set s(_value) {\r\n        assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\r\n        const value = hexlify(_value);\r\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\r\n        this.#s = value;\r\n    }\r\n    /**\r\n     *  The ``v`` value for a signature.\r\n     *\r\n     *  Since a given ``x`` value for ``r`` has two possible values for\r\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\r\n     *  values to use.\r\n     *\r\n     *  It is normalized to the values ``27`` or ``28`` for legacy\r\n     *  purposes.\r\n     */\r\n    get v() { return this.#v; }\r\n    set v(value) {\r\n        const v = getNumber(value, \"value\");\r\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\r\n        this.#v = v;\r\n    }\r\n    /**\r\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\r\n     *  transactions, this value is ``null``.\r\n     */\r\n    get networkV() { return this.#networkV; }\r\n    /**\r\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\r\n     *  transactions, this value is ``null``.\r\n     */\r\n    get legacyChainId() {\r\n        const v = this.networkV;\r\n        if (v == null) {\r\n            return null;\r\n        }\r\n        return Signature.getChainId(v);\r\n    }\r\n    /**\r\n     *  The ``yParity`` for the signature.\r\n     *\r\n     *  See ``v`` for more details on how this value is used.\r\n     */\r\n    get yParity() {\r\n        return (this.v === 27) ? 0 : 1;\r\n    }\r\n    /**\r\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\r\n     *  and ``s`` compacted into a single ``bytes32``.\r\n     */\r\n    get yParityAndS() {\r\n        // The EIP-2098 compact representation\r\n        const yParityAndS = getBytes(this.s);\r\n        if (this.yParity) {\r\n            yParityAndS[0] |= 0x80;\r\n        }\r\n        return hexlify(yParityAndS);\r\n    }\r\n    /**\r\n     *  The [[link-eip-2098]] compact representation.\r\n     */\r\n    get compactSerialized() {\r\n        return concat([this.r, this.yParityAndS]);\r\n    }\r\n    /**\r\n     *  The serialized representation.\r\n     */\r\n    get serialized() {\r\n        return concat([this.r, this.s, (this.yParity ? \"0x1c\" : \"0x1b\")]);\r\n    }\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, r, s, v) {\r\n        assertPrivate(guard, _guard, \"Signature\");\r\n        this.#r = r;\r\n        this.#s = s;\r\n        this.#v = v;\r\n        this.#networkV = null;\r\n    }\r\n    [Symbol.for('nodejs.util.inspect.custom')]() {\r\n        return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\r\n    }\r\n    /**\r\n     *  Returns a new identical [[Signature]].\r\n     */\r\n    clone() {\r\n        const clone = new Signature(_guard, this.r, this.s, this.v);\r\n        if (this.networkV) {\r\n            clone.#networkV = this.networkV;\r\n        }\r\n        return clone;\r\n    }\r\n    /**\r\n     *  Returns a representation that is compatible with ``JSON.stringify``.\r\n     */\r\n    toJSON() {\r\n        const networkV = this.networkV;\r\n        return {\r\n            _type: \"signature\",\r\n            networkV: ((networkV != null) ? networkV.toString() : null),\r\n            r: this.r, s: this.s, v: this.v,\r\n        };\r\n    }\r\n    /**\r\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\r\n     *\r\n     *  @example:\r\n     *    Signature.getChainId(45)\r\n     *    //_result:\r\n     *\r\n     *    Signature.getChainId(46)\r\n     *    //_result:\r\n     */\r\n    static getChainId(v) {\r\n        const bv = getBigInt(v, \"v\");\r\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\r\n        if ((bv == BN_27) || (bv == BN_28)) {\r\n            return BN_0;\r\n        }\r\n        // Bad value for an EIP-155 v\r\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\r\n        return (bv - BN_35) / BN_2;\r\n    }\r\n    /**\r\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\r\n     *\r\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\r\n     *  property to include the chain ID.\r\n     *\r\n     *  @example:\r\n     *    Signature.getChainIdV(5, 27)\r\n     *    //_result:\r\n     *\r\n     *    Signature.getChainIdV(5, 28)\r\n     *    //_result:\r\n     *\r\n     */\r\n    static getChainIdV(chainId, v) {\r\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\r\n    }\r\n    /**\r\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\r\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\r\n     *\r\n     *  @example:\r\n     *    // The values 0 and 1 imply v is actually yParity\r\n     *    Signature.getNormalizedV(0)\r\n     *    //_result:\r\n     *\r\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\r\n     *    Signature.getNormalizedV(27)\r\n     *    //_result:\r\n     *\r\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\r\n     *    Signature.getNormalizedV(46)\r\n     *    //_result:\r\n     *\r\n     *    // Invalid values throw\r\n     *    Signature.getNormalizedV(5)\r\n     *    //_error:\r\n     */\r\n    static getNormalizedV(v) {\r\n        const bv = getBigInt(v);\r\n        if (bv === BN_0 || bv === BN_27) {\r\n            return 27;\r\n        }\r\n        if (bv === BN_1 || bv === BN_28) {\r\n            return 28;\r\n        }\r\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\r\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\r\n        return (bv & BN_1) ? 27 : 28;\r\n    }\r\n    /**\r\n     *  Creates a new [[Signature]].\r\n     *\r\n     *  If no %%sig%% is provided, a new [[Signature]] is created\r\n     *  with default values.\r\n     *\r\n     *  If %%sig%% is a string, it is parsed.\r\n     */\r\n    static from(sig) {\r\n        function assertError(check, message) {\r\n            assertArgument(check, message, \"signature\", sig);\r\n        }\r\n        ;\r\n        if (sig == null) {\r\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\r\n        }\r\n        if (typeof (sig) === \"string\") {\r\n            const bytes = getBytes(sig, \"signature\");\r\n            if (bytes.length === 64) {\r\n                const r = hexlify(bytes.slice(0, 32));\r\n                const s = bytes.slice(32, 64);\r\n                const v = (s[0] & 0x80) ? 28 : 27;\r\n                s[0] &= 0x7f;\r\n                return new Signature(_guard, r, hexlify(s), v);\r\n            }\r\n            if (bytes.length === 65) {\r\n                const r = hexlify(bytes.slice(0, 32));\r\n                const s = bytes.slice(32, 64);\r\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\r\n                const v = Signature.getNormalizedV(bytes[64]);\r\n                return new Signature(_guard, r, hexlify(s), v);\r\n            }\r\n            assertError(false, \"invalid raw signature length\");\r\n        }\r\n        if (sig instanceof Signature) {\r\n            return sig.clone();\r\n        }\r\n        // Get r\r\n        const _r = sig.r;\r\n        assertError(_r != null, \"missing r\");\r\n        const r = toUint256(_r);\r\n        // Get s; by any means necessary (we check consistency below)\r\n        const s = (function (s, yParityAndS) {\r\n            if (s != null) {\r\n                return toUint256(s);\r\n            }\r\n            if (yParityAndS != null) {\r\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\r\n                const bytes = getBytes(yParityAndS);\r\n                bytes[0] &= 0x7f;\r\n                return hexlify(bytes);\r\n            }\r\n            assertError(false, \"missing s\");\r\n        })(sig.s, sig.yParityAndS);\r\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\r\n        // Get v; by any means necessary (we check consistency below)\r\n        const { networkV, v } = (function (_v, yParityAndS, yParity) {\r\n            if (_v != null) {\r\n                const v = getBigInt(_v);\r\n                return {\r\n                    networkV: ((v >= BN_35) ? v : undefined),\r\n                    v: Signature.getNormalizedV(v)\r\n                };\r\n            }\r\n            if (yParityAndS != null) {\r\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\r\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28 : 27) };\r\n            }\r\n            if (yParity != null) {\r\n                switch (getNumber(yParity, \"sig.yParity\")) {\r\n                    case 0: return { v: 27 };\r\n                    case 1: return { v: 28 };\r\n                }\r\n                assertError(false, \"invalid yParity\");\r\n            }\r\n            assertError(false, \"missing v\");\r\n        })(sig.v, sig.yParityAndS, sig.yParity);\r\n        const result = new Signature(_guard, r, s, v);\r\n        if (networkV) {\r\n            result.#networkV = networkV;\r\n        }\r\n        // If multiple of v, yParity, yParityAndS we given, check they match\r\n        assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\r\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\r\n        return result;\r\n    }\r\n}\r\n//# sourceMappingURL=signature.js.map","/**\r\n *  Add details about signing here.\r\n *\r\n *  @_subsection: api/crypto:Signing  [about-signing]\r\n */\r\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\r\nimport { concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex, assertArgument } from \"../utils/index.js\";\r\nimport { Signature } from \"./signature.js\";\r\n/**\r\n *  A **SigningKey** provides high-level access to the elliptic curve\r\n *  cryptography (ECC) operations and key management.\r\n */\r\nexport class SigningKey {\r\n    #privateKey;\r\n    /**\r\n     *  Creates a new **SigningKey** for %%privateKey%%.\r\n     */\r\n    constructor(privateKey) {\r\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\r\n        this.#privateKey = hexlify(privateKey);\r\n    }\r\n    /**\r\n     *  The private key.\r\n     */\r\n    get privateKey() { return this.#privateKey; }\r\n    /**\r\n     *  The uncompressed public key.\r\n     *\r\n     * This will always begin with the prefix ``0x04`` and be 132\r\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\r\n     */\r\n    get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }\r\n    /**\r\n     *  The compressed public key.\r\n     *\r\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\r\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\r\n     *  nibbles)\r\n     */\r\n    get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }\r\n    /**\r\n     *  Return the signature of the signed %%digest%%.\r\n     */\r\n    sign(digest) {\r\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\r\n        const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\r\n            lowS: true\r\n        });\r\n        return Signature.from({\r\n            r: toBeHex(sig.r, 32),\r\n            s: toBeHex(sig.s, 32),\r\n            v: (sig.recovery ? 0x1c : 0x1b)\r\n        });\r\n    }\r\n    /**\r\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\r\n     *  private key and the %%other%% key.\r\n     *\r\n     *  The %%other%% key may be any type of key, a raw public key,\r\n     *  a compressed/uncompressed pubic key or aprivate key.\r\n     *\r\n     *  Best practice is usually to use a cryptographic hash on the\r\n     *  returned value before using it as a symetric secret.\r\n     *\r\n     *  @example:\r\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\r\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\r\n     *\r\n     *    // Notice that privA.computeSharedSecret(pubB)...\r\n     *    sign1.computeSharedSecret(sign2.publicKey)\r\n     *    //_result:\r\n     *\r\n     *    // ...is equal to privB.computeSharedSecret(pubA).\r\n     *    sign2.computeSharedSecret(sign1.publicKey)\r\n     *    //_result:\r\n     */\r\n    computeSharedSecret(other) {\r\n        const pubKey = SigningKey.computePublicKey(other);\r\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));\r\n    }\r\n    /**\r\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\r\n     *\r\n     *  The %%key%% may be any type of key, a raw public key, a\r\n     *  compressed/uncompressed public key or private key.\r\n     *\r\n     *  @example:\r\n     *    sign = new SigningKey(id(\"some-secret\"));\r\n     *\r\n     *    // Compute the uncompressed public key for a private key\r\n     *    SigningKey.computePublicKey(sign.privateKey)\r\n     *    //_result:\r\n     *\r\n     *    // Compute the compressed public key for a private key\r\n     *    SigningKey.computePublicKey(sign.privateKey, true)\r\n     *    //_result:\r\n     *\r\n     *    // Compute the uncompressed public key\r\n     *    SigningKey.computePublicKey(sign.publicKey, false);\r\n     *    //_result:\r\n     *\r\n     *    // Compute the Compressed a public key\r\n     *    SigningKey.computePublicKey(sign.publicKey, true);\r\n     *    //_result:\r\n     */\r\n    static computePublicKey(key, compressed) {\r\n        let bytes = getBytes(key, \"key\");\r\n        // private key\r\n        if (bytes.length === 32) {\r\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\r\n            return hexlify(pubKey);\r\n        }\r\n        // raw public key; use uncompressed key with 0x04 prefix\r\n        if (bytes.length === 64) {\r\n            const pub = new Uint8Array(65);\r\n            pub[0] = 0x04;\r\n            pub.set(bytes, 1);\r\n            bytes = pub;\r\n        }\r\n        const point = secp256k1.ProjectivePoint.fromHex(bytes);\r\n        return hexlify(point.toRawBytes(compressed));\r\n    }\r\n    /**\r\n     *  Returns the public key for the private key which produced the\r\n     *  %%signature%% for the given %%digest%%.\r\n     *\r\n     *  @example:\r\n     *    key = new SigningKey(id(\"some-secret\"))\r\n     *    digest = id(\"hello world\")\r\n     *    sig = key.sign(digest)\r\n     *\r\n     *    // Notice the signer public key...\r\n     *    key.publicKey\r\n     *    //_result:\r\n     *\r\n     *    // ...is equal to the recovered public key\r\n     *    SigningKey.recoverPublicKey(digest, sig)\r\n     *    //_result:\r\n     *\r\n     */\r\n    static recoverPublicKey(digest, signature) {\r\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\r\n        const sig = Signature.from(signature);\r\n        let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s])));\r\n        secpSig = secpSig.addRecoveryBit(sig.yParity);\r\n        const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));\r\n        assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\r\n        return \"0x\" + pubKey.toHex(false);\r\n    }\r\n    /**\r\n     *  Returns the point resulting from adding the ellipic curve points\r\n     *  %%p0%% and %%p1%%.\r\n     *\r\n     *  This is not a common function most developers should require, but\r\n     *  can be useful for certain privacy-specific techniques.\r\n     *\r\n     *  For example, it is used by [[HDNodeWallet]] to compute child\r\n     *  addresses from parent public keys and chain codes.\r\n     */\r\n    static addPoints(p0, p1, compressed) {\r\n        const pub0 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));\r\n        const pub1 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));\r\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\r\n    }\r\n}\r\n//# sourceMappingURL=signing-key.js.map","import { keccak256 } from \"../crypto/index.js\";\r\nimport { getBytes, assertArgument } from \"../utils/index.js\";\r\nconst BN_0 = BigInt(0);\r\nconst BN_36 = BigInt(36);\r\nfunction getChecksumAddress(address) {\r\n    //    if (!isHexString(address, 20)) {\r\n    //        logger.throwArgumentError(\"invalid address\", \"address\", address);\r\n    //    }\r\n    address = address.toLowerCase();\r\n    const chars = address.substring(2).split(\"\");\r\n    const expanded = new Uint8Array(40);\r\n    for (let i = 0; i < 40; i++) {\r\n        expanded[i] = chars[i].charCodeAt(0);\r\n    }\r\n    const hashed = getBytes(keccak256(expanded));\r\n    for (let i = 0; i < 40; i += 2) {\r\n        if ((hashed[i >> 1] >> 4) >= 8) {\r\n            chars[i] = chars[i].toUpperCase();\r\n        }\r\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\r\n            chars[i + 1] = chars[i + 1].toUpperCase();\r\n        }\r\n    }\r\n    return \"0x\" + chars.join(\"\");\r\n}\r\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\r\n// Create lookup table\r\nconst ibanLookup = {};\r\nfor (let i = 0; i < 10; i++) {\r\n    ibanLookup[String(i)] = String(i);\r\n}\r\nfor (let i = 0; i < 26; i++) {\r\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\r\n}\r\n// How many decimal digits can we process? (for 64-bit float, this is 15)\r\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\r\nconst safeDigits = 15;\r\nfunction ibanChecksum(address) {\r\n    address = address.toUpperCase();\r\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\r\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\r\n    // Javascript can handle integers safely up to 15 (decimal) digits\r\n    while (expanded.length >= safeDigits) {\r\n        let block = expanded.substring(0, safeDigits);\r\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\r\n    }\r\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\r\n    while (checksum.length < 2) {\r\n        checksum = \"0\" + checksum;\r\n    }\r\n    return checksum;\r\n}\r\n;\r\nconst Base36 = (function () {\r\n    ;\r\n    const result = {};\r\n    for (let i = 0; i < 36; i++) {\r\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\r\n        result[key] = BigInt(i);\r\n    }\r\n    return result;\r\n})();\r\nfunction fromBase36(value) {\r\n    value = value.toLowerCase();\r\n    let result = BN_0;\r\n    for (let i = 0; i < value.length; i++) {\r\n        result = result * BN_36 + Base36[value[i]];\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  Returns a normalized and checksumed address for %%address%%.\r\n *  This accepts non-checksum addresses, checksum addresses and\r\n *  [[getIcapAddress]] formats.\r\n *\r\n *  The checksum in Ethereum uses the capitalization (upper-case\r\n *  vs lower-case) of the characters within an address to encode\r\n *  its checksum, which offers, on average, a checksum of 15-bits.\r\n *\r\n *  If %%address%% contains both upper-case and lower-case, it is\r\n *  assumed to already be a checksum address and its checksum is\r\n *  validated, and if the address fails its expected checksum an\r\n *  error is thrown.\r\n *\r\n *  If you wish the checksum of %%address%% to be ignore, it should\r\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\r\n *  being passed in. This should be a very rare situation though,\r\n *  that you wish to bypass the safegaurds in place to protect\r\n *  against an address that has been incorrectly copied from another\r\n *  source.\r\n *\r\n *  @example:\r\n *    // Adds the checksum (via upper-casing specific letters)\r\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\r\n *    //_result:\r\n *\r\n *    // Converts ICAP address and adds checksum\r\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\r\n *    //_result:\r\n *\r\n *    // Throws an error if an address contains mixed case,\r\n *    // but the checksum fails\r\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_error:\r\n */\r\nexport function getAddress(address) {\r\n    assertArgument(typeof (address) === \"string\", \"invalid address\", \"address\", address);\r\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\r\n        // Missing the 0x prefix\r\n        if (!address.startsWith(\"0x\")) {\r\n            address = \"0x\" + address;\r\n        }\r\n        const result = getChecksumAddress(address);\r\n        // It is a checksummed address with a bad checksum\r\n        assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\r\n        return result;\r\n    }\r\n    // Maybe ICAP? (we only support direct mode)\r\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\r\n        // It is an ICAP address with a bad checksum\r\n        assertArgument(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\r\n        let result = fromBase36(address.substring(4)).toString(16);\r\n        while (result.length < 40) {\r\n            result = \"0\" + result;\r\n        }\r\n        return getChecksumAddress(\"0x\" + result);\r\n    }\r\n    assertArgument(false, \"invalid address\", \"address\", address);\r\n}\r\n/**\r\n *  The [ICAP Address format](link-icap) format is an early checksum\r\n *  format which attempts to be compatible with the banking\r\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\r\n *\r\n *  It is no longer common or a recommended format.\r\n *\r\n *  @example:\r\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\r\n *    //_result:\r\n *\r\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\r\n *    //_result:\r\n *\r\n *    // Throws an error if the ICAP checksum is wrong\r\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\r\n *    //_error:\r\n */\r\nexport function getIcapAddress(address) {\r\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\r\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\r\n    while (base36.length < 30) {\r\n        base36 = \"0\" + base36;\r\n    }\r\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\r\n}\r\n//# sourceMappingURL=address.js.map","import { assert, assertArgument } from \"../utils/index.js\";\r\nimport { getAddress } from \"./address.js\";\r\n/**\r\n *  Returns true if %%value%% is an object which implements the\r\n *  [[Addressable]] interface.\r\n *\r\n *  @example:\r\n *    // Wallets and AbstractSigner sub-classes\r\n *    isAddressable(Wallet.createRandom())\r\n *    //_result:\r\n *\r\n *    // Contracts\r\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\r\n *    isAddressable(contract)\r\n *    //_result:\r\n */\r\nexport function isAddressable(value) {\r\n    return (value && typeof (value.getAddress) === \"function\");\r\n}\r\n/**\r\n *  Returns true if %%value%% is a valid address.\r\n *\r\n *  @example:\r\n *    // Valid address\r\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_result:\r\n *\r\n *    // Valid ICAP address\r\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\r\n *    //_result:\r\n *\r\n *    // Invalid checksum\r\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\r\n *    //_result:\r\n *\r\n *    // Invalid ICAP checksum\r\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\r\n *    //_result:\r\n *\r\n *    // Not an address (an ENS name requires a provided and an\r\n *    // asynchronous API to access)\r\n *    isAddress(\"ricmoo.eth\")\r\n *    //_result:\r\n */\r\nexport function isAddress(value) {\r\n    try {\r\n        getAddress(value);\r\n        return true;\r\n    }\r\n    catch (error) { }\r\n    return false;\r\n}\r\nasync function checkAddress(target, promise) {\r\n    const result = await promise;\r\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\r\n        assert(typeof (target) !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", { value: target });\r\n        assertArgument(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\r\n    }\r\n    return getAddress(result);\r\n}\r\n/**\r\n *  Resolves to an address for the %%target%%, which may be any\r\n *  supported address type, an [[Addressable]] or a Promise which\r\n *  resolves to an address.\r\n *\r\n *  If an ENS name is provided, but that name has not been correctly\r\n *  configured a [[UnconfiguredNameError]] is thrown.\r\n *\r\n *  @example:\r\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\r\n *\r\n *    // Addresses are return synchronously\r\n *    resolveAddress(addr, provider)\r\n *    //_result:\r\n *\r\n *    // Address promises are resolved asynchronously\r\n *    resolveAddress(Promise.resolve(addr))\r\n *    //_result:\r\n *\r\n *    // ENS names are resolved asynchronously\r\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\r\n *    //_result:\r\n *\r\n *    // Addressable objects are resolved asynchronously\r\n *    contract = new Contract(addr, [ ])\r\n *    resolveAddress(contract, provider)\r\n *    //_result:\r\n *\r\n *    // Unconfigured ENS names reject\r\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\r\n *    //_error:\r\n *\r\n *    // ENS names require a NameResolver object passed in\r\n *    // (notice the provider was omitted)\r\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\r\n *    //_error:\r\n */\r\nexport function resolveAddress(target, resolver) {\r\n    if (typeof (target) === \"string\") {\r\n        if (target.match(/^0x[0-9a-f]{40}$/i)) {\r\n            return getAddress(target);\r\n        }\r\n        assert(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"resolveName\" });\r\n        return checkAddress(target, resolver.resolveName(target));\r\n    }\r\n    else if (isAddressable(target)) {\r\n        return checkAddress(target, target.getAddress());\r\n    }\r\n    else if (target && typeof (target.then) === \"function\") {\r\n        return checkAddress(target, target);\r\n    }\r\n    assertArgument(false, \"unsupported addressable value\", \"target\", target);\r\n}\r\n//# sourceMappingURL=checks.js.map","import { keccak256 } from \"../crypto/index.js\";\r\nimport { toUtf8Bytes } from \"../utils/index.js\";\r\n/**\r\n *  A simple hashing function which operates on UTF-8 strings to\r\n *  compute an 32-byte identifier.\r\n *\r\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\r\n *  the [[keccak256]].\r\n *\r\n *  @example:\r\n *    id(\"hello world\")\r\n *    //_result:\r\n */\r\nexport function id(value) {\r\n    return keccak256(toUtf8Bytes(value));\r\n}\r\n//# sourceMappingURL=id.js.map","import { getAddress } from \"../address/index.js\";\r\nimport { assertArgument, isHexString } from \"../utils/index.js\";\r\nfunction accessSetify(addr, storageKeys) {\r\n    return {\r\n        address: getAddress(addr),\r\n        storageKeys: storageKeys.map((storageKey, index) => {\r\n            assertArgument(isHexString(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\r\n            return storageKey.toLowerCase();\r\n        })\r\n    };\r\n}\r\n/**\r\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\r\n */\r\nexport function accessListify(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.map((set, index) => {\r\n            if (Array.isArray(set)) {\r\n                assertArgument(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\r\n                return accessSetify(set[0], set[1]);\r\n            }\r\n            assertArgument(set != null && typeof (set) === \"object\", \"invalid address-slot set\", \"value\", value);\r\n            return accessSetify(set.address, set.storageKeys);\r\n        });\r\n    }\r\n    assertArgument(value != null && typeof (value) === \"object\", \"invalid access list\", \"value\", value);\r\n    const result = Object.keys(value).map((addr) => {\r\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\r\n            accum[storageKey] = true;\r\n            return accum;\r\n        }, {});\r\n        return accessSetify(addr, Object.keys(storageKeys).sort());\r\n    });\r\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\r\n    return result;\r\n}\r\n//# sourceMappingURL=accesslist.js.map","import { getAddress } from \"../address/index.js\";\r\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\r\n/**\r\n *  Returns the address for the %%key%%.\r\n *\r\n *  The key may be any standard form of public key or a private key.\r\n */\r\nexport function computeAddress(key) {\r\n    let pubkey;\r\n    if (typeof (key) === \"string\") {\r\n        pubkey = SigningKey.computePublicKey(key, false);\r\n    }\r\n    else {\r\n        pubkey = key.publicKey;\r\n    }\r\n    return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\r\n}\r\n/**\r\n *  Returns the recovered address for the private key that was\r\n *  used to sign %%digest%% that resulted in %%signature%%.\r\n */\r\nexport function recoverAddress(digest, signature) {\r\n    return computeAddress(SigningKey.recoverPublicKey(digest, signature));\r\n}\r\n//# sourceMappingURL=address.js.map","import { getAddress } from \"../address/index.js\";\r\nimport { ZeroAddress } from \"../constants/addresses.js\";\r\nimport { keccak256, sha256, Signature, SigningKey } from \"../crypto/index.js\";\r\nimport { concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify, assert, assertArgument, isBytesLike, isHexString, toBeArray, zeroPadValue } from \"../utils/index.js\";\r\nimport { accessListify } from \"./accesslist.js\";\r\nimport { recoverAddress } from \"./address.js\";\r\nconst BN_0 = BigInt(0);\r\nconst BN_2 = BigInt(2);\r\nconst BN_27 = BigInt(27);\r\nconst BN_28 = BigInt(28);\r\nconst BN_35 = BigInt(35);\r\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\r\nconst BLOB_SIZE = 4096 * 32;\r\nfunction getVersionedHash(version, hash) {\r\n    let versioned = version.toString(16);\r\n    while (versioned.length < 2) {\r\n        versioned = \"0\" + versioned;\r\n    }\r\n    versioned += sha256(hash).substring(4);\r\n    return \"0x\" + versioned;\r\n}\r\nfunction handleAddress(value) {\r\n    if (value === \"0x\") {\r\n        return null;\r\n    }\r\n    return getAddress(value);\r\n}\r\nfunction handleAccessList(value, param) {\r\n    try {\r\n        return accessListify(value);\r\n    }\r\n    catch (error) {\r\n        assertArgument(false, error.message, param, value);\r\n    }\r\n}\r\nfunction handleNumber(_value, param) {\r\n    if (_value === \"0x\") {\r\n        return 0;\r\n    }\r\n    return getNumber(_value, param);\r\n}\r\nfunction handleUint(_value, param) {\r\n    if (_value === \"0x\") {\r\n        return BN_0;\r\n    }\r\n    const value = getBigInt(_value, param);\r\n    assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\r\n    return value;\r\n}\r\nfunction formatNumber(_value, name) {\r\n    const value = getBigInt(_value, \"value\");\r\n    const result = toBeArray(value);\r\n    assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);\r\n    return result;\r\n}\r\nfunction formatAccessList(value) {\r\n    return accessListify(value).map((set) => [set.address, set.storageKeys]);\r\n}\r\nfunction formatHashes(value, param) {\r\n    assertArgument(Array.isArray(value), `invalid ${param}`, \"value\", value);\r\n    for (let i = 0; i < value.length; i++) {\r\n        assertArgument(isHexString(value[i], 32), \"invalid ${ param } hash\", `value[${i}]`, value[i]);\r\n    }\r\n    return value;\r\n}\r\nfunction _parseLegacy(data) {\r\n    const fields = decodeRlp(data);\r\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\r\n    const tx = {\r\n        type: 0,\r\n        nonce: handleNumber(fields[0], \"nonce\"),\r\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\r\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\r\n        to: handleAddress(fields[3]),\r\n        value: handleUint(fields[4], \"value\"),\r\n        data: hexlify(fields[5]),\r\n        chainId: BN_0\r\n    };\r\n    // Legacy unsigned transaction\r\n    if (fields.length === 6) {\r\n        return tx;\r\n    }\r\n    const v = handleUint(fields[6], \"v\");\r\n    const r = handleUint(fields[7], \"r\");\r\n    const s = handleUint(fields[8], \"s\");\r\n    if (r === BN_0 && s === BN_0) {\r\n        // EIP-155 unsigned transaction\r\n        tx.chainId = v;\r\n    }\r\n    else {\r\n        // Compute the EIP-155 chain ID (or 0 for legacy)\r\n        let chainId = (v - BN_35) / BN_2;\r\n        if (chainId < BN_0) {\r\n            chainId = BN_0;\r\n        }\r\n        tx.chainId = chainId;\r\n        // Signed Legacy Transaction\r\n        assertArgument(chainId !== BN_0 || (v === BN_27 || v === BN_28), \"non-canonical legacy v\", \"v\", fields[6]);\r\n        tx.signature = Signature.from({\r\n            r: zeroPadValue(fields[7], 32),\r\n            s: zeroPadValue(fields[8], 32),\r\n            v\r\n        });\r\n        //tx.hash = keccak256(data);\r\n    }\r\n    return tx;\r\n}\r\nfunction _serializeLegacy(tx, sig) {\r\n    const fields = [\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || \"0x\"),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n    ];\r\n    let chainId = BN_0;\r\n    if (tx.chainId != BN_0) {\r\n        // A chainId was provided; if non-zero we'll use EIP-155\r\n        chainId = getBigInt(tx.chainId, \"tx.chainId\");\r\n        // We have a chainId in the tx and an EIP-155 v in the signature,\r\n        // make sure they agree with each other\r\n        assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\r\n    }\r\n    else if (tx.signature) {\r\n        // No explicit chainId, but EIP-155 have a derived implicit chainId\r\n        const legacy = tx.signature.legacyChainId;\r\n        if (legacy != null) {\r\n            chainId = legacy;\r\n        }\r\n    }\r\n    // Requesting an unsigned transaction\r\n    if (!sig) {\r\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\r\n        if (chainId !== BN_0) {\r\n            fields.push(toBeArray(chainId));\r\n            fields.push(\"0x\");\r\n            fields.push(\"0x\");\r\n        }\r\n        return encodeRlp(fields);\r\n    }\r\n    // @TODO: We should probably check that tx.signature, chainId, and sig\r\n    //        match but that logic could break existing code, so schedule\r\n    //        this for the next major bump.\r\n    // Compute the EIP-155 v\r\n    let v = BigInt(27 + sig.yParity);\r\n    if (chainId !== BN_0) {\r\n        v = Signature.getChainIdV(chainId, sig.v);\r\n    }\r\n    else if (BigInt(sig.v) !== v) {\r\n        assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\r\n    }\r\n    // Add the signature\r\n    fields.push(toBeArray(v));\r\n    fields.push(toBeArray(sig.r));\r\n    fields.push(toBeArray(sig.s));\r\n    return encodeRlp(fields);\r\n}\r\nfunction _parseEipSignature(tx, fields) {\r\n    let yParity;\r\n    try {\r\n        yParity = handleNumber(fields[0], \"yParity\");\r\n        if (yParity !== 0 && yParity !== 1) {\r\n            throw new Error(\"bad yParity\");\r\n        }\r\n    }\r\n    catch (error) {\r\n        assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\r\n    }\r\n    const r = zeroPadValue(fields[1], 32);\r\n    const s = zeroPadValue(fields[2], 32);\r\n    const signature = Signature.from({ r, s, yParity });\r\n    tx.signature = signature;\r\n}\r\nfunction _parseEip1559(data) {\r\n    const fields = decodeRlp(getBytes(data).slice(1));\r\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\r\n    const tx = {\r\n        type: 2,\r\n        chainId: handleUint(fields[0], \"chainId\"),\r\n        nonce: handleNumber(fields[1], \"nonce\"),\r\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\r\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\r\n        gasPrice: null,\r\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\r\n        to: handleAddress(fields[5]),\r\n        value: handleUint(fields[6], \"value\"),\r\n        data: hexlify(fields[7]),\r\n        accessList: handleAccessList(fields[8], \"accessList\"),\r\n    };\r\n    // Unsigned EIP-1559 Transaction\r\n    if (fields.length === 9) {\r\n        return tx;\r\n    }\r\n    //tx.hash = keccak256(data);\r\n    _parseEipSignature(tx, fields.slice(9));\r\n    return tx;\r\n}\r\nfunction _serializeEip1559(tx, sig) {\r\n    const fields = [\r\n        formatNumber(tx.chainId, \"chainId\"),\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\r\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || \"0x\"),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n        formatAccessList(tx.accessList || [])\r\n    ];\r\n    if (sig) {\r\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\r\n        fields.push(toBeArray(sig.r));\r\n        fields.push(toBeArray(sig.s));\r\n    }\r\n    return concat([\"0x02\", encodeRlp(fields)]);\r\n}\r\nfunction _parseEip2930(data) {\r\n    const fields = decodeRlp(getBytes(data).slice(1));\r\n    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\r\n    const tx = {\r\n        type: 1,\r\n        chainId: handleUint(fields[0], \"chainId\"),\r\n        nonce: handleNumber(fields[1], \"nonce\"),\r\n        gasPrice: handleUint(fields[2], \"gasPrice\"),\r\n        gasLimit: handleUint(fields[3], \"gasLimit\"),\r\n        to: handleAddress(fields[4]),\r\n        value: handleUint(fields[5], \"value\"),\r\n        data: hexlify(fields[6]),\r\n        accessList: handleAccessList(fields[7], \"accessList\")\r\n    };\r\n    // Unsigned EIP-2930 Transaction\r\n    if (fields.length === 8) {\r\n        return tx;\r\n    }\r\n    //tx.hash = keccak256(data);\r\n    _parseEipSignature(tx, fields.slice(8));\r\n    return tx;\r\n}\r\nfunction _serializeEip2930(tx, sig) {\r\n    const fields = [\r\n        formatNumber(tx.chainId, \"chainId\"),\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || \"0x\"),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n        formatAccessList(tx.accessList || [])\r\n    ];\r\n    if (sig) {\r\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\r\n        fields.push(toBeArray(sig.r));\r\n        fields.push(toBeArray(sig.s));\r\n    }\r\n    return concat([\"0x01\", encodeRlp(fields)]);\r\n}\r\nfunction _parseEip4844(data) {\r\n    let fields = decodeRlp(getBytes(data).slice(1));\r\n    let typeName = \"3\";\r\n    let blobs = null;\r\n    // Parse the network format\r\n    if (fields.length === 4 && Array.isArray(fields[0])) {\r\n        typeName = \"3 (network format)\";\r\n        const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];\r\n        assertArgument(Array.isArray(fBlobs), \"invalid network format: blobs not an array\", \"fields[1]\", fBlobs);\r\n        assertArgument(Array.isArray(fCommits), \"invalid network format: commitments not an array\", \"fields[2]\", fCommits);\r\n        assertArgument(Array.isArray(fProofs), \"invalid network format: proofs not an array\", \"fields[3]\", fProofs);\r\n        assertArgument(fBlobs.length === fCommits.length, \"invalid network format: blobs/commitments length mismatch\", \"fields\", fields);\r\n        assertArgument(fBlobs.length === fProofs.length, \"invalid network format: blobs/proofs length mismatch\", \"fields\", fields);\r\n        blobs = [];\r\n        for (let i = 0; i < fields[1].length; i++) {\r\n            blobs.push({\r\n                data: fBlobs[i],\r\n                commitment: fCommits[i],\r\n                proof: fProofs[i],\r\n            });\r\n        }\r\n        fields = fields[0];\r\n    }\r\n    assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, \"data\", hexlify(data));\r\n    const tx = {\r\n        type: 3,\r\n        chainId: handleUint(fields[0], \"chainId\"),\r\n        nonce: handleNumber(fields[1], \"nonce\"),\r\n        maxPriorityFeePerGas: handleUint(fields[2], \"maxPriorityFeePerGas\"),\r\n        maxFeePerGas: handleUint(fields[3], \"maxFeePerGas\"),\r\n        gasPrice: null,\r\n        gasLimit: handleUint(fields[4], \"gasLimit\"),\r\n        to: handleAddress(fields[5]),\r\n        value: handleUint(fields[6], \"value\"),\r\n        data: hexlify(fields[7]),\r\n        accessList: handleAccessList(fields[8], \"accessList\"),\r\n        maxFeePerBlobGas: handleUint(fields[9], \"maxFeePerBlobGas\"),\r\n        blobVersionedHashes: fields[10]\r\n    };\r\n    if (blobs) {\r\n        tx.blobs = blobs;\r\n    }\r\n    assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, \"data\", data);\r\n    assertArgument(Array.isArray(tx.blobVersionedHashes), \"invalid blobVersionedHashes: must be an array\", \"data\", data);\r\n    for (let i = 0; i < tx.blobVersionedHashes.length; i++) {\r\n        assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, \"data\", data);\r\n    }\r\n    // Unsigned EIP-4844 Transaction\r\n    if (fields.length === 11) {\r\n        return tx;\r\n    }\r\n    // @TODO: Do we need to do this? This is only called internally\r\n    // and used to verify hashes; it might save time to not do this\r\n    //tx.hash = keccak256(concat([ \"0x03\", encodeRlp(fields) ]));\r\n    _parseEipSignature(tx, fields.slice(11));\r\n    return tx;\r\n}\r\nfunction _serializeEip4844(tx, sig, blobs) {\r\n    const fields = [\r\n        formatNumber(tx.chainId, \"chainId\"),\r\n        formatNumber(tx.nonce, \"nonce\"),\r\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\r\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\r\n        formatNumber(tx.gasLimit, \"gasLimit\"),\r\n        (tx.to || ZeroAddress),\r\n        formatNumber(tx.value, \"value\"),\r\n        tx.data,\r\n        formatAccessList(tx.accessList || []),\r\n        formatNumber(tx.maxFeePerBlobGas || 0, \"maxFeePerBlobGas\"),\r\n        formatHashes(tx.blobVersionedHashes || [], \"blobVersionedHashes\")\r\n    ];\r\n    if (sig) {\r\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\r\n        fields.push(toBeArray(sig.r));\r\n        fields.push(toBeArray(sig.s));\r\n        // We have blobs; return the network wrapped format\r\n        if (blobs) {\r\n            return concat([\r\n                \"0x03\",\r\n                encodeRlp([\r\n                    fields,\r\n                    blobs.map((b) => b.data),\r\n                    blobs.map((b) => b.commitment),\r\n                    blobs.map((b) => b.proof),\r\n                ])\r\n            ]);\r\n        }\r\n    }\r\n    return concat([\"0x03\", encodeRlp(fields)]);\r\n}\r\n/**\r\n *  A **Transaction** describes an operation to be executed on\r\n *  Ethereum by an Externally Owned Account (EOA). It includes\r\n *  who (the [[to]] address), what (the [[data]]) and how much (the\r\n *  [[value]] in ether) the operation should entail.\r\n *\r\n *  @example:\r\n *    tx = new Transaction()\r\n *    //_result:\r\n *\r\n *    tx.data = \"0x1234\";\r\n *    //_result:\r\n */\r\nexport class Transaction {\r\n    #type;\r\n    #to;\r\n    #data;\r\n    #nonce;\r\n    #gasLimit;\r\n    #gasPrice;\r\n    #maxPriorityFeePerGas;\r\n    #maxFeePerGas;\r\n    #value;\r\n    #chainId;\r\n    #sig;\r\n    #accessList;\r\n    #maxFeePerBlobGas;\r\n    #blobVersionedHashes;\r\n    #kzg;\r\n    #blobs;\r\n    /**\r\n     *  The transaction type.\r\n     *\r\n     *  If null, the type will be automatically inferred based on\r\n     *  explicit properties.\r\n     */\r\n    get type() { return this.#type; }\r\n    set type(value) {\r\n        switch (value) {\r\n            case null:\r\n                this.#type = null;\r\n                break;\r\n            case 0:\r\n            case \"legacy\":\r\n                this.#type = 0;\r\n                break;\r\n            case 1:\r\n            case \"berlin\":\r\n            case \"eip-2930\":\r\n                this.#type = 1;\r\n                break;\r\n            case 2:\r\n            case \"london\":\r\n            case \"eip-1559\":\r\n                this.#type = 2;\r\n                break;\r\n            case 3:\r\n            case \"cancun\":\r\n            case \"eip-4844\":\r\n                this.#type = 3;\r\n                break;\r\n            default:\r\n                assertArgument(false, \"unsupported transaction type\", \"type\", value);\r\n        }\r\n    }\r\n    /**\r\n     *  The name of the transaction type.\r\n     */\r\n    get typeName() {\r\n        switch (this.type) {\r\n            case 0: return \"legacy\";\r\n            case 1: return \"eip-2930\";\r\n            case 2: return \"eip-1559\";\r\n            case 3: return \"eip-4844\";\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     *  The ``to`` address for the transaction or ``null`` if the\r\n     *  transaction is an ``init`` transaction.\r\n     */\r\n    get to() {\r\n        const value = this.#to;\r\n        if (value == null && this.type === 3) {\r\n            return ZeroAddress;\r\n        }\r\n        return value;\r\n    }\r\n    set to(value) {\r\n        this.#to = (value == null) ? null : getAddress(value);\r\n    }\r\n    /**\r\n     *  The transaction nonce.\r\n     */\r\n    get nonce() { return this.#nonce; }\r\n    set nonce(value) { this.#nonce = getNumber(value, \"value\"); }\r\n    /**\r\n     *  The gas limit.\r\n     */\r\n    get gasLimit() { return this.#gasLimit; }\r\n    set gasLimit(value) { this.#gasLimit = getBigInt(value); }\r\n    /**\r\n     *  The gas price.\r\n     *\r\n     *  On legacy networks this defines the fee that will be paid. On\r\n     *  EIP-1559 networks, this should be ``null``.\r\n     */\r\n    get gasPrice() {\r\n        const value = this.#gasPrice;\r\n        if (value == null && (this.type === 0 || this.type === 1)) {\r\n            return BN_0;\r\n        }\r\n        return value;\r\n    }\r\n    set gasPrice(value) {\r\n        this.#gasPrice = (value == null) ? null : getBigInt(value, \"gasPrice\");\r\n    }\r\n    /**\r\n     *  The maximum priority fee per unit of gas to pay. On legacy\r\n     *  networks this should be ``null``.\r\n     */\r\n    get maxPriorityFeePerGas() {\r\n        const value = this.#maxPriorityFeePerGas;\r\n        if (value == null) {\r\n            if (this.type === 2 || this.type === 3) {\r\n                return BN_0;\r\n            }\r\n            return null;\r\n        }\r\n        return value;\r\n    }\r\n    set maxPriorityFeePerGas(value) {\r\n        this.#maxPriorityFeePerGas = (value == null) ? null : getBigInt(value, \"maxPriorityFeePerGas\");\r\n    }\r\n    /**\r\n     *  The maximum total fee per unit of gas to pay. On legacy\r\n     *  networks this should be ``null``.\r\n     */\r\n    get maxFeePerGas() {\r\n        const value = this.#maxFeePerGas;\r\n        if (value == null) {\r\n            if (this.type === 2 || this.type === 3) {\r\n                return BN_0;\r\n            }\r\n            return null;\r\n        }\r\n        return value;\r\n    }\r\n    set maxFeePerGas(value) {\r\n        this.#maxFeePerGas = (value == null) ? null : getBigInt(value, \"maxFeePerGas\");\r\n    }\r\n    /**\r\n     *  The transaction data. For ``init`` transactions this is the\r\n     *  deployment code.\r\n     */\r\n    get data() { return this.#data; }\r\n    set data(value) { this.#data = hexlify(value); }\r\n    /**\r\n     *  The amount of ether (in wei) to send in this transactions.\r\n     */\r\n    get value() { return this.#value; }\r\n    set value(value) {\r\n        this.#value = getBigInt(value, \"value\");\r\n    }\r\n    /**\r\n     *  The chain ID this transaction is valid on.\r\n     */\r\n    get chainId() { return this.#chainId; }\r\n    set chainId(value) { this.#chainId = getBigInt(value); }\r\n    /**\r\n     *  If signed, the signature for this transaction.\r\n     */\r\n    get signature() { return this.#sig || null; }\r\n    set signature(value) {\r\n        this.#sig = (value == null) ? null : Signature.from(value);\r\n    }\r\n    /**\r\n     *  The access list.\r\n     *\r\n     *  An access list permits discounted (but pre-paid) access to\r\n     *  bytecode and state variable access within contract execution.\r\n     */\r\n    get accessList() {\r\n        const value = this.#accessList || null;\r\n        if (value == null) {\r\n            if (this.type === 1 || this.type === 2 || this.type === 3) {\r\n                // @TODO: in v7, this should assign the value or become\r\n                // a live object itself, otherwise mutation is inconsistent\r\n                return [];\r\n            }\r\n            return null;\r\n        }\r\n        return value;\r\n    }\r\n    set accessList(value) {\r\n        this.#accessList = (value == null) ? null : accessListify(value);\r\n    }\r\n    /**\r\n     *  The max fee per blob gas for Cancun transactions.\r\n     */\r\n    get maxFeePerBlobGas() {\r\n        const value = this.#maxFeePerBlobGas;\r\n        if (value == null && this.type === 3) {\r\n            return BN_0;\r\n        }\r\n        return value;\r\n    }\r\n    set maxFeePerBlobGas(value) {\r\n        this.#maxFeePerBlobGas = (value == null) ? null : getBigInt(value, \"maxFeePerBlobGas\");\r\n    }\r\n    /**\r\n     *  The BLOb versioned hashes for Cancun transactions.\r\n     */\r\n    get blobVersionedHashes() {\r\n        // @TODO: Mutation is inconsistent; if unset, the returned value\r\n        // cannot mutate the object, if set it can\r\n        let value = this.#blobVersionedHashes;\r\n        if (value == null && this.type === 3) {\r\n            return [];\r\n        }\r\n        return value;\r\n    }\r\n    set blobVersionedHashes(value) {\r\n        if (value != null) {\r\n            assertArgument(Array.isArray(value), \"blobVersionedHashes must be an Array\", \"value\", value);\r\n            value = value.slice();\r\n            for (let i = 0; i < value.length; i++) {\r\n                assertArgument(isHexString(value[i], 32), \"invalid blobVersionedHash\", `value[${i}]`, value[i]);\r\n            }\r\n        }\r\n        this.#blobVersionedHashes = value;\r\n    }\r\n    /**\r\n     *  The BLObs for the Transaction, if any.\r\n     *\r\n     *  If ``blobs`` is non-``null``, then the [[seriailized]]\r\n     *  will return the network formatted sidecar, otherwise it\r\n     *  will return the standard [[link-eip-2718]] payload. The\r\n     *  [[unsignedSerialized]] is unaffected regardless.\r\n     *\r\n     *  When setting ``blobs``, either fully valid [[Blob]] objects\r\n     *  may be specified (i.e. correctly padded, with correct\r\n     *  committments and proofs) or a raw [[BytesLike]] may\r\n     *  be provided.\r\n     *\r\n     *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**\r\n     *  be already set. The blob will be correctly padded and the\r\n     *  [[KzgLibrary]] will be used to compute the committment and\r\n     *  proof for the blob.\r\n     *\r\n     *  A BLOb is a sequence of field elements, each of which must\r\n     *  be within the BLS field modulo, so some additional processing\r\n     *  may be required to encode arbitrary data to ensure each 32 byte\r\n     *  field is within the valid range.\r\n     *\r\n     *  Setting this automatically populates [[blobVersionedHashes]],\r\n     *  overwriting any existing values. Setting this to ``null``\r\n     *  does **not** remove the [[blobVersionedHashes]], leaving them\r\n     *  present.\r\n     */\r\n    get blobs() {\r\n        if (this.#blobs == null) {\r\n            return null;\r\n        }\r\n        return this.#blobs.map((b) => Object.assign({}, b));\r\n    }\r\n    set blobs(_blobs) {\r\n        if (_blobs == null) {\r\n            this.#blobs = null;\r\n            return;\r\n        }\r\n        const blobs = [];\r\n        const versionedHashes = [];\r\n        for (let i = 0; i < _blobs.length; i++) {\r\n            const blob = _blobs[i];\r\n            if (isBytesLike(blob)) {\r\n                assert(this.#kzg, \"adding a raw blob requires a KZG library\", \"UNSUPPORTED_OPERATION\", {\r\n                    operation: \"set blobs()\"\r\n                });\r\n                let data = getBytes(blob);\r\n                assertArgument(data.length <= BLOB_SIZE, \"blob is too large\", `blobs[${i}]`, blob);\r\n                // Pad blob if necessary\r\n                if (data.length !== BLOB_SIZE) {\r\n                    const padded = new Uint8Array(BLOB_SIZE);\r\n                    padded.set(data);\r\n                    data = padded;\r\n                }\r\n                const commit = this.#kzg.blobToKzgCommitment(data);\r\n                const proof = hexlify(this.#kzg.computeBlobKzgProof(data, commit));\r\n                blobs.push({\r\n                    data: hexlify(data),\r\n                    commitment: hexlify(commit),\r\n                    proof\r\n                });\r\n                versionedHashes.push(getVersionedHash(1, commit));\r\n            }\r\n            else {\r\n                const commit = hexlify(blob.commitment);\r\n                blobs.push({\r\n                    data: hexlify(blob.data),\r\n                    commitment: commit,\r\n                    proof: hexlify(blob.proof)\r\n                });\r\n                versionedHashes.push(getVersionedHash(1, commit));\r\n            }\r\n        }\r\n        this.#blobs = blobs;\r\n        this.#blobVersionedHashes = versionedHashes;\r\n    }\r\n    get kzg() { return this.#kzg; }\r\n    set kzg(kzg) {\r\n        this.#kzg = kzg;\r\n    }\r\n    /**\r\n     *  Creates a new Transaction with default values.\r\n     */\r\n    constructor() {\r\n        this.#type = null;\r\n        this.#to = null;\r\n        this.#nonce = 0;\r\n        this.#gasLimit = BN_0;\r\n        this.#gasPrice = null;\r\n        this.#maxPriorityFeePerGas = null;\r\n        this.#maxFeePerGas = null;\r\n        this.#data = \"0x\";\r\n        this.#value = BN_0;\r\n        this.#chainId = BN_0;\r\n        this.#sig = null;\r\n        this.#accessList = null;\r\n        this.#maxFeePerBlobGas = null;\r\n        this.#blobVersionedHashes = null;\r\n        this.#blobs = null;\r\n        this.#kzg = null;\r\n    }\r\n    /**\r\n     *  The transaction hash, if signed. Otherwise, ``null``.\r\n     */\r\n    get hash() {\r\n        if (this.signature == null) {\r\n            return null;\r\n        }\r\n        return keccak256(this.#getSerialized(true, false));\r\n    }\r\n    /**\r\n     *  The pre-image hash of this transaction.\r\n     *\r\n     *  This is the digest that a [[Signer]] must sign to authorize\r\n     *  this transaction.\r\n     */\r\n    get unsignedHash() {\r\n        return keccak256(this.unsignedSerialized);\r\n    }\r\n    /**\r\n     *  The sending address, if signed. Otherwise, ``null``.\r\n     */\r\n    get from() {\r\n        if (this.signature == null) {\r\n            return null;\r\n        }\r\n        return recoverAddress(this.unsignedHash, this.signature);\r\n    }\r\n    /**\r\n     *  The public key of the sender, if signed. Otherwise, ``null``.\r\n     */\r\n    get fromPublicKey() {\r\n        if (this.signature == null) {\r\n            return null;\r\n        }\r\n        return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\r\n    }\r\n    /**\r\n     *  Returns true if signed.\r\n     *\r\n     *  This provides a Type Guard that properties requiring a signed\r\n     *  transaction are non-null.\r\n     */\r\n    isSigned() {\r\n        return this.signature != null;\r\n    }\r\n    #getSerialized(signed, sidecar) {\r\n        assert(!signed || this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\r\n        const sig = signed ? this.signature : null;\r\n        switch (this.inferType()) {\r\n            case 0:\r\n                return _serializeLegacy(this, sig);\r\n            case 1:\r\n                return _serializeEip2930(this, sig);\r\n            case 2:\r\n                return _serializeEip1559(this, sig);\r\n            case 3:\r\n                return _serializeEip4844(this, sig, sidecar ? this.blobs : null);\r\n        }\r\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\r\n    }\r\n    /**\r\n     *  The serialized transaction.\r\n     *\r\n     *  This throws if the transaction is unsigned. For the pre-image,\r\n     *  use [[unsignedSerialized]].\r\n     */\r\n    get serialized() {\r\n        return this.#getSerialized(true, true);\r\n    }\r\n    /**\r\n     *  The transaction pre-image.\r\n     *\r\n     *  The hash of this is the digest which needs to be signed to\r\n     *  authorize this transaction.\r\n     */\r\n    get unsignedSerialized() {\r\n        return this.#getSerialized(false, false);\r\n    }\r\n    /**\r\n     *  Return the most \"likely\" type; currently the highest\r\n     *  supported transaction type.\r\n     */\r\n    inferType() {\r\n        const types = this.inferTypes();\r\n        // Prefer London (EIP-1559) over Cancun (BLOb)\r\n        if (types.indexOf(2) >= 0) {\r\n            return 2;\r\n        }\r\n        // Return the highest inferred type\r\n        return (types.pop());\r\n    }\r\n    /**\r\n     *  Validates the explicit properties and returns a list of compatible\r\n     *  transaction types.\r\n     */\r\n    inferTypes() {\r\n        // Checks that there are no conflicting properties set\r\n        const hasGasPrice = this.gasPrice != null;\r\n        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);\r\n        const hasAccessList = (this.accessList != null);\r\n        const hasBlob = (this.#maxFeePerBlobGas != null || this.#blobVersionedHashes);\r\n        //if (hasGasPrice && hasFee) {\r\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\r\n        //}\r\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\r\n            assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\r\n        }\r\n        //if (this.type === 2 && hasGasPrice) {\r\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\r\n        //}\r\n        assert(!hasFee || (this.type !== 0 && this.type !== 1), \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\r\n        assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this });\r\n        const types = [];\r\n        // Explicit type\r\n        if (this.type != null) {\r\n            types.push(this.type);\r\n        }\r\n        else {\r\n            if (hasFee) {\r\n                types.push(2);\r\n            }\r\n            else if (hasGasPrice) {\r\n                types.push(1);\r\n                if (!hasAccessList) {\r\n                    types.push(0);\r\n                }\r\n            }\r\n            else if (hasAccessList) {\r\n                types.push(1);\r\n                types.push(2);\r\n            }\r\n            else if (hasBlob && this.to) {\r\n                types.push(3);\r\n            }\r\n            else {\r\n                types.push(0);\r\n                types.push(1);\r\n                types.push(2);\r\n                types.push(3);\r\n            }\r\n        }\r\n        types.sort();\r\n        return types;\r\n    }\r\n    /**\r\n     *  Returns true if this transaction is a legacy transaction (i.e.\r\n     *  ``type === 0``).\r\n     *\r\n     *  This provides a Type Guard that the related properties are\r\n     *  non-null.\r\n     */\r\n    isLegacy() {\r\n        return (this.type === 0);\r\n    }\r\n    /**\r\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\r\n     *  ``type === 1``).\r\n     *\r\n     *  This provides a Type Guard that the related properties are\r\n     *  non-null.\r\n     */\r\n    isBerlin() {\r\n        return (this.type === 1);\r\n    }\r\n    /**\r\n     *  Returns true if this transaction is london hardform transaction (i.e.\r\n     *  ``type === 2``).\r\n     *\r\n     *  This provides a Type Guard that the related properties are\r\n     *  non-null.\r\n     */\r\n    isLondon() {\r\n        return (this.type === 2);\r\n    }\r\n    /**\r\n     *  Returns true if this transaction is an [[link-eip-4844]] BLOB\r\n     *  transaction.\r\n     *\r\n     *  This provides a Type Guard that the related properties are\r\n     *  non-null.\r\n     */\r\n    isCancun() {\r\n        return (this.type === 3);\r\n    }\r\n    /**\r\n     *  Create a copy of this transaciton.\r\n     */\r\n    clone() {\r\n        return Transaction.from(this);\r\n    }\r\n    /**\r\n     *  Return a JSON-friendly object.\r\n     */\r\n    toJSON() {\r\n        const s = (v) => {\r\n            if (v == null) {\r\n                return null;\r\n            }\r\n            return v.toString();\r\n        };\r\n        return {\r\n            type: this.type,\r\n            to: this.to,\r\n            //            from: this.from,\r\n            data: this.data,\r\n            nonce: this.nonce,\r\n            gasLimit: s(this.gasLimit),\r\n            gasPrice: s(this.gasPrice),\r\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\r\n            maxFeePerGas: s(this.maxFeePerGas),\r\n            value: s(this.value),\r\n            chainId: s(this.chainId),\r\n            sig: this.signature ? this.signature.toJSON() : null,\r\n            accessList: this.accessList\r\n        };\r\n    }\r\n    /**\r\n     *  Create a **Transaction** from a serialized transaction or a\r\n     *  Transaction-like object.\r\n     */\r\n    static from(tx) {\r\n        if (tx == null) {\r\n            return new Transaction();\r\n        }\r\n        if (typeof (tx) === \"string\") {\r\n            const payload = getBytes(tx);\r\n            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??\r\n                return Transaction.from(_parseLegacy(payload));\r\n            }\r\n            switch (payload[0]) {\r\n                case 1: return Transaction.from(_parseEip2930(payload));\r\n                case 2: return Transaction.from(_parseEip1559(payload));\r\n                case 3: return Transaction.from(_parseEip4844(payload));\r\n            }\r\n            assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\r\n        }\r\n        const result = new Transaction();\r\n        if (tx.type != null) {\r\n            result.type = tx.type;\r\n        }\r\n        if (tx.to != null) {\r\n            result.to = tx.to;\r\n        }\r\n        if (tx.nonce != null) {\r\n            result.nonce = tx.nonce;\r\n        }\r\n        if (tx.gasLimit != null) {\r\n            result.gasLimit = tx.gasLimit;\r\n        }\r\n        if (tx.gasPrice != null) {\r\n            result.gasPrice = tx.gasPrice;\r\n        }\r\n        if (tx.maxPriorityFeePerGas != null) {\r\n            result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\r\n        }\r\n        if (tx.maxFeePerGas != null) {\r\n            result.maxFeePerGas = tx.maxFeePerGas;\r\n        }\r\n        if (tx.maxFeePerBlobGas != null) {\r\n            result.maxFeePerBlobGas = tx.maxFeePerBlobGas;\r\n        }\r\n        if (tx.data != null) {\r\n            result.data = tx.data;\r\n        }\r\n        if (tx.value != null) {\r\n            result.value = tx.value;\r\n        }\r\n        if (tx.chainId != null) {\r\n            result.chainId = tx.chainId;\r\n        }\r\n        if (tx.signature != null) {\r\n            result.signature = Signature.from(tx.signature);\r\n        }\r\n        if (tx.accessList != null) {\r\n            result.accessList = tx.accessList;\r\n        }\r\n        // This will get overwritten by blobs, if present\r\n        if (tx.blobVersionedHashes != null) {\r\n            result.blobVersionedHashes = tx.blobVersionedHashes;\r\n        }\r\n        // Make sure we assign the kzg before assigning blobs, which\r\n        // require the library in the event raw blob data is provided.\r\n        if (tx.kzg != null) {\r\n            result.kzg = tx.kzg;\r\n        }\r\n        if (tx.blobs != null) {\r\n            result.blobs = tx.blobs;\r\n        }\r\n        if (tx.hash != null) {\r\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define '.hash'\", \"tx\", tx);\r\n            assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\r\n        }\r\n        if (tx.from != null) {\r\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define '.from'\", \"tx\", tx);\r\n            assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n//# sourceMappingURL=transaction.js.map","import { keccak256 } from \"../crypto/index.js\";\r\nimport { MessagePrefix } from \"../constants/index.js\";\r\nimport { recoverAddress } from \"../transaction/index.js\";\r\nimport { concat, toUtf8Bytes } from \"../utils/index.js\";\r\n/**\r\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\r\n *\r\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\r\n *  of %%message%% and computes the [[keccak256]] digest.\r\n *\r\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\r\n *  first. To compute the digest of a [[DataHexString]], it must be converted\r\n *  to [bytes](getBytes).\r\n *\r\n *  @example:\r\n *    hashMessage(\"Hello World\")\r\n *    //_result:\r\n *\r\n *    // Hashes the SIX (6) string characters, i.e.\r\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\r\n *    hashMessage(\"0x4243\")\r\n *    //_result:\r\n *\r\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\r\n *    hashMessage(getBytes(\"0x4243\"))\r\n *    //_result:\r\n *\r\n *    // ...which is equal to using data\r\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\r\n *    //_result:\r\n *\r\n */\r\nexport function hashMessage(message) {\r\n    if (typeof (message) === \"string\") {\r\n        message = toUtf8Bytes(message);\r\n    }\r\n    return keccak256(concat([\r\n        toUtf8Bytes(MessagePrefix),\r\n        toUtf8Bytes(String(message.length)),\r\n        message\r\n    ]));\r\n}\r\n/**\r\n *  Return the address of the private key that produced\r\n *  the signature %%sig%% during signing for %%message%%.\r\n */\r\nexport function verifyMessage(message, sig) {\r\n    const digest = hashMessage(message);\r\n    return recoverAddress(digest, sig);\r\n}\r\n//# sourceMappingURL=message.js.map","//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\r\nimport { getAddress } from \"../address/index.js\";\r\nimport { keccak256 } from \"../crypto/index.js\";\r\nimport { recoverAddress } from \"../transaction/index.js\";\r\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\r\nimport { id } from \"./id.js\";\r\nconst padding = new Uint8Array(32);\r\npadding.fill(0);\r\nconst BN__1 = BigInt(-1);\r\nconst BN_0 = BigInt(0);\r\nconst BN_1 = BigInt(1);\r\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\r\n;\r\n;\r\nfunction hexPadRight(value) {\r\n    const bytes = getBytes(value);\r\n    const padOffset = bytes.length % 32;\r\n    if (padOffset) {\r\n        return concat([bytes, padding.slice(padOffset)]);\r\n    }\r\n    return hexlify(bytes);\r\n}\r\nconst hexTrue = toBeHex(BN_1, 32);\r\nconst hexFalse = toBeHex(BN_0, 32);\r\nconst domainFieldTypes = {\r\n    name: \"string\",\r\n    version: \"string\",\r\n    chainId: \"uint256\",\r\n    verifyingContract: \"address\",\r\n    salt: \"bytes32\"\r\n};\r\nconst domainFieldNames = [\r\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\r\n];\r\nfunction checkString(key) {\r\n    return function (value) {\r\n        assertArgument(typeof (value) === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\r\n        return value;\r\n    };\r\n}\r\nconst domainChecks = {\r\n    name: checkString(\"name\"),\r\n    version: checkString(\"version\"),\r\n    chainId: function (_value) {\r\n        const value = getBigInt(_value, \"domain.chainId\");\r\n        assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\r\n        if (Number.isSafeInteger(value)) {\r\n            return Number(value);\r\n        }\r\n        return toQuantity(value);\r\n    },\r\n    verifyingContract: function (value) {\r\n        try {\r\n            return getAddress(value).toLowerCase();\r\n        }\r\n        catch (error) { }\r\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\r\n    },\r\n    salt: function (value) {\r\n        const bytes = getBytes(value, \"domain.salt\");\r\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\r\n        return hexlify(bytes);\r\n    }\r\n};\r\nfunction getBaseEncoder(type) {\r\n    // intXX and uintXX\r\n    {\r\n        const match = type.match(/^(u?)int(\\d+)$/);\r\n        if (match) {\r\n            const signed = (match[1] === \"\");\r\n            const width = parseInt(match[2]);\r\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\r\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1) : width);\r\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1) : BN_0;\r\n            return function (_value) {\r\n                const value = getBigInt(_value, \"value\");\r\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\r\n                return toBeHex(signed ? toTwos(value, 256) : value, 32);\r\n            };\r\n        }\r\n    }\r\n    // bytesXX\r\n    {\r\n        const match = type.match(/^bytes(\\d+)$/);\r\n        if (match) {\r\n            const width = parseInt(match[1]);\r\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\r\n            return function (value) {\r\n                const bytes = getBytes(value);\r\n                assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\r\n                return hexPadRight(value);\r\n            };\r\n        }\r\n    }\r\n    switch (type) {\r\n        case \"address\": return function (value) {\r\n            return zeroPadValue(getAddress(value), 32);\r\n        };\r\n        case \"bool\": return function (value) {\r\n            return ((!value) ? hexFalse : hexTrue);\r\n        };\r\n        case \"bytes\": return function (value) {\r\n            return keccak256(value);\r\n        };\r\n        case \"string\": return function (value) {\r\n            return id(value);\r\n        };\r\n    }\r\n    return null;\r\n}\r\nfunction encodeType(name, fields) {\r\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\r\n}\r\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\r\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\r\nfunction splitArray(type) {\r\n    const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\r\n    if (match) {\r\n        return {\r\n            base: match[1],\r\n            index: (match[2] + match[4]),\r\n            array: {\r\n                base: match[1],\r\n                prefix: (match[1] + match[2]),\r\n                count: (match[5] ? parseInt(match[5]) : -1),\r\n            }\r\n        };\r\n    }\r\n    return { base: type };\r\n}\r\n/**\r\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\r\n *  for signed typed data.\r\n *\r\n *  This is useful for those that wish to compute various components of a\r\n *  typed data hash, primary types, or sub-components, but generally the\r\n *  higher level [[Signer-signTypedData]] is more useful.\r\n */\r\nexport class TypedDataEncoder {\r\n    /**\r\n     *  The primary type for the structured [[types]].\r\n     *\r\n     *  This is derived automatically from the [[types]], since no\r\n     *  recursion is possible, once the DAG for the types is consturcted\r\n     *  internally, the primary type must be the only remaining type with\r\n     *  no parent nodes.\r\n     */\r\n    primaryType;\r\n    #types;\r\n    /**\r\n     *  The types.\r\n     */\r\n    get types() {\r\n        return JSON.parse(this.#types);\r\n    }\r\n    #fullTypes;\r\n    #encoderCache;\r\n    /**\r\n     *  Create a new **TypedDataEncoder** for %%types%%.\r\n     *\r\n     *  This performs all necessary checking that types are valid and\r\n     *  do not violate the [[link-eip-712]] structural constraints as\r\n     *  well as computes the [[primaryType]].\r\n     */\r\n    constructor(_types) {\r\n        this.#fullTypes = new Map();\r\n        this.#encoderCache = new Map();\r\n        // Link struct types to their direct child structs\r\n        const links = new Map();\r\n        // Link structs to structs which contain them as a child\r\n        const parents = new Map();\r\n        // Link all subtypes within a given struct\r\n        const subtypes = new Map();\r\n        const types = {};\r\n        Object.keys(_types).forEach((type) => {\r\n            types[type] = _types[type].map(({ name, type }) => {\r\n                // Normalize the base type (unless name conflict)\r\n                let { base, index } = splitArray(type);\r\n                if (base === \"int\" && !_types[\"int\"]) {\r\n                    base = \"int256\";\r\n                }\r\n                if (base === \"uint\" && !_types[\"uint\"]) {\r\n                    base = \"uint256\";\r\n                }\r\n                return { name, type: (base + (index || \"\")) };\r\n            });\r\n            links.set(type, new Set());\r\n            parents.set(type, []);\r\n            subtypes.set(type, new Set());\r\n        });\r\n        this.#types = JSON.stringify(types);\r\n        for (const name in types) {\r\n            const uniqueNames = new Set();\r\n            for (const field of types[name]) {\r\n                // Check each field has a unique name\r\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", _types);\r\n                uniqueNames.add(field.name);\r\n                // Get the base type (drop any array specifiers)\r\n                const baseType = splitArray(field.type).base;\r\n                assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", _types);\r\n                // Is this a base encoding type?\r\n                const encoder = getBaseEncoder(baseType);\r\n                if (encoder) {\r\n                    continue;\r\n                }\r\n                assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", _types);\r\n                // Add linkage\r\n                parents.get(baseType).push(name);\r\n                links.get(name).add(baseType);\r\n            }\r\n        }\r\n        // Deduce the primary type\r\n        const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n).length === 0));\r\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\r\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", _types);\r\n        defineProperties(this, { primaryType: primaryTypes[0] });\r\n        // Check for circular type references\r\n        function checkCircular(type, found) {\r\n            assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", _types);\r\n            found.add(type);\r\n            for (const child of links.get(type)) {\r\n                if (!parents.has(child)) {\r\n                    continue;\r\n                }\r\n                // Recursively check children\r\n                checkCircular(child, found);\r\n                // Mark all ancestors as having this decendant\r\n                for (const subtype of found) {\r\n                    subtypes.get(subtype).add(child);\r\n                }\r\n            }\r\n            found.delete(type);\r\n        }\r\n        checkCircular(this.primaryType, new Set());\r\n        // Compute each fully describe type\r\n        for (const [name, set] of subtypes) {\r\n            const st = Array.from(set);\r\n            st.sort();\r\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\r\n        }\r\n    }\r\n    /**\r\n     *  Returnthe encoder for the specific %%type%%.\r\n     */\r\n    getEncoder(type) {\r\n        let encoder = this.#encoderCache.get(type);\r\n        if (!encoder) {\r\n            encoder = this.#getEncoder(type);\r\n            this.#encoderCache.set(type, encoder);\r\n        }\r\n        return encoder;\r\n    }\r\n    #getEncoder(type) {\r\n        // Basic encoder type (address, bool, uint256, etc)\r\n        {\r\n            const encoder = getBaseEncoder(type);\r\n            if (encoder) {\r\n                return encoder;\r\n            }\r\n        }\r\n        // Array\r\n        const array = splitArray(type).array;\r\n        if (array) {\r\n            const subtype = array.prefix;\r\n            const subEncoder = this.getEncoder(subtype);\r\n            return (value) => {\r\n                assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\r\n                let result = value.map(subEncoder);\r\n                if (this.#fullTypes.has(subtype)) {\r\n                    result = result.map(keccak256);\r\n                }\r\n                return keccak256(concat(result));\r\n            };\r\n        }\r\n        // Struct\r\n        const fields = this.types[type];\r\n        if (fields) {\r\n            const encodedType = id(this.#fullTypes.get(type));\r\n            return (value) => {\r\n                const values = fields.map(({ name, type }) => {\r\n                    const result = this.getEncoder(type)(value[name]);\r\n                    if (this.#fullTypes.has(type)) {\r\n                        return keccak256(result);\r\n                    }\r\n                    return result;\r\n                });\r\n                values.unshift(encodedType);\r\n                return concat(values);\r\n            };\r\n        }\r\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\r\n    }\r\n    /**\r\n     *  Return the full type for %%name%%.\r\n     */\r\n    encodeType(name) {\r\n        const result = this.#fullTypes.get(name);\r\n        assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\r\n        return result;\r\n    }\r\n    /**\r\n     *  Return the encoded %%value%% for the %%type%%.\r\n     */\r\n    encodeData(type, value) {\r\n        return this.getEncoder(type)(value);\r\n    }\r\n    /**\r\n     *  Returns the hash of %%value%% for the type of %%name%%.\r\n     */\r\n    hashStruct(name, value) {\r\n        return keccak256(this.encodeData(name, value));\r\n    }\r\n    /**\r\n     *  Return the fulled encoded %%value%% for the [[types]].\r\n     */\r\n    encode(value) {\r\n        return this.encodeData(this.primaryType, value);\r\n    }\r\n    /**\r\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\r\n     */\r\n    hash(value) {\r\n        return this.hashStruct(this.primaryType, value);\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    _visit(type, value, callback) {\r\n        // Basic encoder type (address, bool, uint256, etc)\r\n        {\r\n            const encoder = getBaseEncoder(type);\r\n            if (encoder) {\r\n                return callback(type, value);\r\n            }\r\n        }\r\n        // Array\r\n        const array = splitArray(type).array;\r\n        if (array) {\r\n            assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\r\n            return value.map((v) => this._visit(array.prefix, v, callback));\r\n        }\r\n        // Struct\r\n        const fields = this.types[type];\r\n        if (fields) {\r\n            return fields.reduce((accum, { name, type }) => {\r\n                accum[name] = this._visit(type, value[name], callback);\r\n                return accum;\r\n            }, {});\r\n        }\r\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\r\n    }\r\n    /**\r\n     *  Call %%calback%% for each value in %%value%%, passing the type and\r\n     *  component within %%value%%.\r\n     *\r\n     *  This is useful for replacing addresses or other transformation that\r\n     *  may be desired on each component, based on its type.\r\n     */\r\n    visit(value, callback) {\r\n        return this._visit(this.primaryType, value, callback);\r\n    }\r\n    /**\r\n     *  Create a new **TypedDataEncoder** for %%types%%.\r\n     */\r\n    static from(types) {\r\n        return new TypedDataEncoder(types);\r\n    }\r\n    /**\r\n     *  Return the primary type for %%types%%.\r\n     */\r\n    static getPrimaryType(types) {\r\n        return TypedDataEncoder.from(types).primaryType;\r\n    }\r\n    /**\r\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\r\n     */\r\n    static hashStruct(name, types, value) {\r\n        return TypedDataEncoder.from(types).hashStruct(name, value);\r\n    }\r\n    /**\r\n     *  Return the domain hash for %%domain%%.\r\n     */\r\n    static hashDomain(domain) {\r\n        const domainFields = [];\r\n        for (const name in domain) {\r\n            if (domain[name] == null) {\r\n                continue;\r\n            }\r\n            const type = domainFieldTypes[name];\r\n            assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\r\n            domainFields.push({ name, type });\r\n        }\r\n        domainFields.sort((a, b) => {\r\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\r\n        });\r\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\r\n    }\r\n    /**\r\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\r\n     */\r\n    static encode(domain, types, value) {\r\n        return concat([\r\n            \"0x1901\",\r\n            TypedDataEncoder.hashDomain(domain),\r\n            TypedDataEncoder.from(types).hash(value)\r\n        ]);\r\n    }\r\n    /**\r\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\r\n     */\r\n    static hash(domain, types, value) {\r\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\r\n    }\r\n    // Replaces all address types with ENS names with their looked up address\r\n    /**\r\n     * Resolves to the value from resolving all addresses in %%value%% for\r\n     * %%types%% and the %%domain%%.\r\n     */\r\n    static async resolveNames(domain, types, value, resolveName) {\r\n        // Make a copy to isolate it from the object passed in\r\n        domain = Object.assign({}, domain);\r\n        // Allow passing null to ignore value\r\n        for (const key in domain) {\r\n            if (domain[key] == null) {\r\n                delete domain[key];\r\n            }\r\n        }\r\n        // Look up all ENS names\r\n        const ensCache = {};\r\n        // Do we need to look up the domain's verifyingContract?\r\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\r\n            ensCache[domain.verifyingContract] = \"0x\";\r\n        }\r\n        // We are going to use the encoder to visit all the base values\r\n        const encoder = TypedDataEncoder.from(types);\r\n        // Get a list of all the addresses\r\n        encoder.visit(value, (type, value) => {\r\n            if (type === \"address\" && !isHexString(value, 20)) {\r\n                ensCache[value] = \"0x\";\r\n            }\r\n            return value;\r\n        });\r\n        // Lookup each name\r\n        for (const name in ensCache) {\r\n            ensCache[name] = await resolveName(name);\r\n        }\r\n        // Replace the domain verifyingContract if needed\r\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\r\n            domain.verifyingContract = ensCache[domain.verifyingContract];\r\n        }\r\n        // Replace all ENS names with their address\r\n        value = encoder.visit(value, (type, value) => {\r\n            if (type === \"address\" && ensCache[value]) {\r\n                return ensCache[value];\r\n            }\r\n            return value;\r\n        });\r\n        return { domain, value };\r\n    }\r\n    /**\r\n     *  Returns the JSON-encoded payload expected by nodes which implement\r\n     *  the JSON-RPC [[link-eip-712]] method.\r\n     */\r\n    static getPayload(domain, types, value) {\r\n        // Validate the domain fields\r\n        TypedDataEncoder.hashDomain(domain);\r\n        // Derive the EIP712Domain Struct reference type\r\n        const domainValues = {};\r\n        const domainTypes = [];\r\n        domainFieldNames.forEach((name) => {\r\n            const value = domain[name];\r\n            if (value == null) {\r\n                return;\r\n            }\r\n            domainValues[name] = domainChecks[name](value);\r\n            domainTypes.push({ name, type: domainFieldTypes[name] });\r\n        });\r\n        const encoder = TypedDataEncoder.from(types);\r\n        // Get the normalized types\r\n        types = encoder.types;\r\n        const typesWithDomain = Object.assign({}, types);\r\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\r\n        typesWithDomain.EIP712Domain = domainTypes;\r\n        // Validate the data structures and types\r\n        encoder.encode(value);\r\n        return {\r\n            types: typesWithDomain,\r\n            domain: domainValues,\r\n            primaryType: encoder.primaryType,\r\n            message: encoder.visit(value, (type, value) => {\r\n                // bytes\r\n                if (type.match(/^bytes(\\d*)/)) {\r\n                    return hexlify(getBytes(value));\r\n                }\r\n                // uint or int\r\n                if (type.match(/^u?int/)) {\r\n                    return getBigInt(value).toString();\r\n                }\r\n                switch (type) {\r\n                    case \"address\":\r\n                        return value.toLowerCase();\r\n                    case \"bool\":\r\n                        return !!value;\r\n                    case \"string\":\r\n                        assertArgument(typeof (value) === \"string\", \"invalid string\", \"value\", value);\r\n                        return value;\r\n                }\r\n                assertArgument(false, \"unsupported type\", \"type\", type);\r\n            })\r\n        };\r\n    }\r\n}\r\n/**\r\n *  Compute the address used to sign the typed data for the %%signature%%.\r\n */\r\nexport function verifyTypedData(domain, types, value, signature) {\r\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\r\n}\r\n//# sourceMappingURL=typed-data.js.map","//import { resolveAddress } from \"@ethersproject/address\";\r\nimport { defineProperties, getBigInt, getNumber, hexlify, isBytesLike, resolveProperties, assert, assertArgument, isError, makeError } from \"../utils/index.js\";\r\nimport { accessListify } from \"../transaction/index.js\";\r\nconst BN_0 = BigInt(0);\r\n// -----------------------\r\nfunction getValue(value) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return value;\r\n}\r\nfunction toJson(value) {\r\n    if (value == null) {\r\n        return null;\r\n    }\r\n    return value.toString();\r\n}\r\n// @TODO? <T extends FeeData = { }> implements Required<T>\r\n/**\r\n *  A **FeeData** wraps all the fee-related values associated with\r\n *  the network.\r\n */\r\nexport class FeeData {\r\n    /**\r\n     *  The gas price for legacy networks.\r\n     */\r\n    gasPrice;\r\n    /**\r\n     *  The maximum fee to pay per gas.\r\n     *\r\n     *  The base fee per gas is defined by the network and based on\r\n     *  congestion, increasing the cost during times of heavy load\r\n     *  and lowering when less busy.\r\n     *\r\n     *  The actual fee per gas will be the base fee for the block\r\n     *  and the priority fee, up to the max fee per gas.\r\n     *\r\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\r\n     */\r\n    maxFeePerGas;\r\n    /**\r\n     *  The additional amout to pay per gas to encourage a validator\r\n     *  to include the transaction.\r\n     *\r\n     *  The purpose of this is to compensate the validator for the\r\n     *  adjusted risk for including a given transaction.\r\n     *\r\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\r\n     */\r\n    maxPriorityFeePerGas;\r\n    /**\r\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\r\n     *  %%maxPriorityFeePerGas%%.\r\n     */\r\n    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\r\n        defineProperties(this, {\r\n            gasPrice: getValue(gasPrice),\r\n            maxFeePerGas: getValue(maxFeePerGas),\r\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\r\n        });\r\n    }\r\n    /**\r\n     *  Returns a JSON-friendly value.\r\n     */\r\n    toJSON() {\r\n        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\r\n        return {\r\n            _type: \"FeeData\",\r\n            gasPrice: toJson(gasPrice),\r\n            maxFeePerGas: toJson(maxFeePerGas),\r\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\r\n        };\r\n    }\r\n}\r\n;\r\n/**\r\n *  Returns a copy of %%req%% with all properties coerced to their strict\r\n *  types.\r\n */\r\nexport function copyRequest(req) {\r\n    const result = {};\r\n    // These could be addresses, ENS names or Addressables\r\n    if (req.to) {\r\n        result.to = req.to;\r\n    }\r\n    if (req.from) {\r\n        result.from = req.from;\r\n    }\r\n    if (req.data) {\r\n        result.data = hexlify(req.data);\r\n    }\r\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\r\n    for (const key of bigIntKeys) {\r\n        if (!(key in req) || req[key] == null) {\r\n            continue;\r\n        }\r\n        result[key] = getBigInt(req[key], `request.${key}`);\r\n    }\r\n    const numberKeys = \"type,nonce\".split(/,/);\r\n    for (const key of numberKeys) {\r\n        if (!(key in req) || req[key] == null) {\r\n            continue;\r\n        }\r\n        result[key] = getNumber(req[key], `request.${key}`);\r\n    }\r\n    if (req.accessList) {\r\n        result.accessList = accessListify(req.accessList);\r\n    }\r\n    if (\"blockTag\" in req) {\r\n        result.blockTag = req.blockTag;\r\n    }\r\n    if (\"enableCcipRead\" in req) {\r\n        result.enableCcipRead = !!req.enableCcipRead;\r\n    }\r\n    if (\"customData\" in req) {\r\n        result.customData = req.customData;\r\n    }\r\n    if (\"blobVersionedHashes\" in req && req.blobVersionedHashes) {\r\n        result.blobVersionedHashes = req.blobVersionedHashes.slice();\r\n    }\r\n    if (\"kzg\" in req) {\r\n        result.kzg = req.kzg;\r\n    }\r\n    if (\"blobs\" in req && req.blobs) {\r\n        result.blobs = req.blobs.map((b) => {\r\n            if (isBytesLike(b)) {\r\n                return hexlify(b);\r\n            }\r\n            return Object.assign({}, b);\r\n        });\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  A **Block** represents the data associated with a full block on\r\n *  Ethereum.\r\n */\r\nexport class Block {\r\n    /**\r\n     *  The provider connected to the block used to fetch additional details\r\n     *  if necessary.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The block number, sometimes called the block height. This is a\r\n     *  sequential number that is one higher than the parent block.\r\n     */\r\n    number;\r\n    /**\r\n     *  The block hash.\r\n     *\r\n     *  This hash includes all properties, so can be safely used to identify\r\n     *  an exact set of block properties.\r\n     */\r\n    hash;\r\n    /**\r\n     *  The timestamp for this block, which is the number of seconds since\r\n     *  epoch that this block was included.\r\n     */\r\n    timestamp;\r\n    /**\r\n     *  The block hash of the parent block.\r\n     */\r\n    parentHash;\r\n    /**\r\n     *  The hash tree root of the parent beacon block for the given\r\n     *  execution block. See [[link-eip-4788]].\r\n     */\r\n    parentBeaconBlockRoot;\r\n    /**\r\n     *  The nonce.\r\n     *\r\n     *  On legacy networks, this is the random number inserted which\r\n     *  permitted the difficulty target to be reached.\r\n     */\r\n    nonce;\r\n    /**\r\n     *  The difficulty target.\r\n     *\r\n     *  On legacy networks, this is the proof-of-work target required\r\n     *  for a block to meet the protocol rules to be included.\r\n     *\r\n     *  On modern networks, this is a random number arrived at using\r\n     *  randao.  @TODO: Find links?\r\n     */\r\n    difficulty;\r\n    /**\r\n     *  The total gas limit for this block.\r\n     */\r\n    gasLimit;\r\n    /**\r\n     *  The total gas used in this block.\r\n     */\r\n    gasUsed;\r\n    /**\r\n     *  The root hash for the global state after applying changes\r\n     *  in this block.\r\n     */\r\n    stateRoot;\r\n    /**\r\n     *  The hash of the transaction receipts trie.\r\n     */\r\n    receiptsRoot;\r\n    /**\r\n     *  The total amount of blob gas consumed by the transactions\r\n     *  within the block. See [[link-eip-4844]].\r\n     */\r\n    blobGasUsed;\r\n    /**\r\n     *  The running total of blob gas consumed in excess of the\r\n     *  target, prior to the block. See [[link-eip-4844]].\r\n     */\r\n    excessBlobGas;\r\n    /**\r\n     *  The miner coinbase address, wihch receives any subsidies for\r\n     *  including this block.\r\n     */\r\n    miner;\r\n    /**\r\n     *  The latest RANDAO mix of the post beacon state of\r\n     *  the previous block.\r\n     */\r\n    prevRandao;\r\n    /**\r\n     *  Any extra data the validator wished to include.\r\n     */\r\n    extraData;\r\n    /**\r\n     *  The base fee per gas that all transactions in this block were\r\n     *  charged.\r\n     *\r\n     *  This adjusts after each block, depending on how congested the network\r\n     *  is.\r\n     */\r\n    baseFeePerGas;\r\n    #transactions;\r\n    /**\r\n     *  Create a new **Block** object.\r\n     *\r\n     *  This should generally not be necessary as the unless implementing a\r\n     *  low-level library.\r\n     */\r\n    constructor(block, provider) {\r\n        this.#transactions = block.transactions.map((tx) => {\r\n            if (typeof (tx) !== \"string\") {\r\n                return new TransactionResponse(tx, provider);\r\n            }\r\n            return tx;\r\n        });\r\n        defineProperties(this, {\r\n            provider,\r\n            hash: getValue(block.hash),\r\n            number: block.number,\r\n            timestamp: block.timestamp,\r\n            parentHash: block.parentHash,\r\n            parentBeaconBlockRoot: block.parentBeaconBlockRoot,\r\n            nonce: block.nonce,\r\n            difficulty: block.difficulty,\r\n            gasLimit: block.gasLimit,\r\n            gasUsed: block.gasUsed,\r\n            blobGasUsed: block.blobGasUsed,\r\n            excessBlobGas: block.excessBlobGas,\r\n            miner: block.miner,\r\n            prevRandao: getValue(block.prevRandao),\r\n            extraData: block.extraData,\r\n            baseFeePerGas: getValue(block.baseFeePerGas),\r\n            stateRoot: block.stateRoot,\r\n            receiptsRoot: block.receiptsRoot,\r\n        });\r\n    }\r\n    /**\r\n     *  Returns the list of transaction hashes, in the order\r\n     *  they were executed within the block.\r\n     */\r\n    get transactions() {\r\n        return this.#transactions.map((tx) => {\r\n            if (typeof (tx) === \"string\") {\r\n                return tx;\r\n            }\r\n            return tx.hash;\r\n        });\r\n    }\r\n    /**\r\n     *  Returns the complete transactions, in the order they\r\n     *  were executed within the block.\r\n     *\r\n     *  This is only available for blocks which prefetched\r\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\r\n     *  into [[Provider-getBlock]].\r\n     */\r\n    get prefetchedTransactions() {\r\n        const txs = this.#transactions.slice();\r\n        // Doesn't matter...\r\n        if (txs.length === 0) {\r\n            return [];\r\n        }\r\n        // Make sure we prefetched the transactions\r\n        assert(typeof (txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"transactionResponses()\"\r\n        });\r\n        return txs;\r\n    }\r\n    /**\r\n     *  Returns a JSON-friendly value.\r\n     */\r\n    toJSON() {\r\n        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, prevRandao, nonce, number, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;\r\n        return {\r\n            _type: \"Block\",\r\n            baseFeePerGas: toJson(baseFeePerGas),\r\n            difficulty: toJson(difficulty),\r\n            extraData,\r\n            gasLimit: toJson(gasLimit),\r\n            gasUsed: toJson(gasUsed),\r\n            blobGasUsed: toJson(this.blobGasUsed),\r\n            excessBlobGas: toJson(this.excessBlobGas),\r\n            hash, miner, prevRandao, nonce, number, parentHash, timestamp,\r\n            parentBeaconBlockRoot, stateRoot, receiptsRoot,\r\n            transactions,\r\n        };\r\n    }\r\n    [Symbol.iterator]() {\r\n        let index = 0;\r\n        const txs = this.transactions;\r\n        return {\r\n            next: () => {\r\n                if (index < this.length) {\r\n                    return {\r\n                        value: txs[index++], done: false\r\n                    };\r\n                }\r\n                return { value: undefined, done: true };\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     *  The number of transactions in this block.\r\n     */\r\n    get length() { return this.#transactions.length; }\r\n    /**\r\n     *  The [[link-js-date]] this block was included at.\r\n     */\r\n    get date() {\r\n        if (this.timestamp == null) {\r\n            return null;\r\n        }\r\n        return new Date(this.timestamp * 1000);\r\n    }\r\n    /**\r\n     *  Get the transaction at %%indexe%% within this block.\r\n     */\r\n    async getTransaction(indexOrHash) {\r\n        // Find the internal value by its index or hash\r\n        let tx = undefined;\r\n        if (typeof (indexOrHash) === \"number\") {\r\n            tx = this.#transactions[indexOrHash];\r\n        }\r\n        else {\r\n            const hash = indexOrHash.toLowerCase();\r\n            for (const v of this.#transactions) {\r\n                if (typeof (v) === \"string\") {\r\n                    if (v !== hash) {\r\n                        continue;\r\n                    }\r\n                    tx = v;\r\n                    break;\r\n                }\r\n                else {\r\n                    if (v.hash !== hash) {\r\n                        continue;\r\n                    }\r\n                    tx = v;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (tx == null) {\r\n            throw new Error(\"no such tx\");\r\n        }\r\n        if (typeof (tx) === \"string\") {\r\n            return (await this.provider.getTransaction(tx));\r\n        }\r\n        else {\r\n            return tx;\r\n        }\r\n    }\r\n    /**\r\n     *  If a **Block** was fetched with a request to include the transactions\r\n     *  this will allow synchronous access to those transactions.\r\n     *\r\n     *  If the transactions were not prefetched, this will throw.\r\n     */\r\n    getPrefetchedTransaction(indexOrHash) {\r\n        const txs = this.prefetchedTransactions;\r\n        if (typeof (indexOrHash) === \"number\") {\r\n            return txs[indexOrHash];\r\n        }\r\n        indexOrHash = indexOrHash.toLowerCase();\r\n        for (const tx of txs) {\r\n            if (tx.hash === indexOrHash) {\r\n                return tx;\r\n            }\r\n        }\r\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\r\n    }\r\n    /**\r\n     *  Returns true if this block been mined. This provides a type guard\r\n     *  for all properties on a [[MinedBlock]].\r\n     */\r\n    isMined() { return !!this.hash; }\r\n    /**\r\n     *  Returns true if this block is an [[link-eip-2930]] block.\r\n     */\r\n    isLondon() {\r\n        return !!this.baseFeePerGas;\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    orphanedEvent() {\r\n        if (!this.isMined()) {\r\n            throw new Error(\"\");\r\n        }\r\n        return createOrphanedBlockFilter(this);\r\n    }\r\n}\r\n//////////////////////\r\n// Log\r\n/**\r\n *  A **Log** in Ethereum represents an event that has been included in a\r\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\r\n *  Solidity's emit for announcing events.\r\n */\r\nexport class Log {\r\n    /**\r\n     *  The provider connected to the log used to fetch additional details\r\n     *  if necessary.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The transaction hash of the transaction this log occurred in. Use the\r\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\r\n     */\r\n    transactionHash;\r\n    /**\r\n     *  The block hash of the block this log occurred in. Use the\r\n     *  [[Log-getBlock]] to get the [[Block]].\r\n     */\r\n    blockHash;\r\n    /**\r\n     *  The block number of the block this log occurred in. It is preferred\r\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\r\n     *  since in the case of an orphaned block, the block at that height may\r\n     *  have changed.\r\n     */\r\n    blockNumber;\r\n    /**\r\n     *  If the **Log** represents a block that was removed due to an orphaned\r\n     *  block, this will be true.\r\n     *\r\n     *  This can only happen within an orphan event listener.\r\n     */\r\n    removed;\r\n    /**\r\n     *  The address of the contract that emitted this log.\r\n     */\r\n    address;\r\n    /**\r\n     *  The data included in this log when it was emitted.\r\n     */\r\n    data;\r\n    /**\r\n     *  The indexed topics included in this log when it was emitted.\r\n     *\r\n     *  All topics are included in the bloom filters, so they can be\r\n     *  efficiently filtered using the [[Provider-getLogs]] method.\r\n     */\r\n    topics;\r\n    /**\r\n     *  The index within the block this log occurred at. This is generally\r\n     *  not useful to developers, but can be used with the various roots\r\n     *  to proof inclusion within a block.\r\n     */\r\n    index;\r\n    /**\r\n     *  The index within the transaction of this log.\r\n     */\r\n    transactionIndex;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(log, provider) {\r\n        this.provider = provider;\r\n        const topics = Object.freeze(log.topics.slice());\r\n        defineProperties(this, {\r\n            transactionHash: log.transactionHash,\r\n            blockHash: log.blockHash,\r\n            blockNumber: log.blockNumber,\r\n            removed: log.removed,\r\n            address: log.address,\r\n            data: log.data,\r\n            topics,\r\n            index: log.index,\r\n            transactionIndex: log.transactionIndex,\r\n        });\r\n    }\r\n    /**\r\n     *  Returns a JSON-compatible object.\r\n     */\r\n    toJSON() {\r\n        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\r\n        return {\r\n            _type: \"log\",\r\n            address, blockHash, blockNumber, data, index,\r\n            removed, topics, transactionHash, transactionIndex\r\n        };\r\n    }\r\n    /**\r\n     *  Returns the block that this log occurred in.\r\n     */\r\n    async getBlock() {\r\n        const block = await this.provider.getBlock(this.blockHash);\r\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\r\n        return block;\r\n    }\r\n    /**\r\n     *  Returns the transaction that this log occurred in.\r\n     */\r\n    async getTransaction() {\r\n        const tx = await this.provider.getTransaction(this.transactionHash);\r\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\r\n        return tx;\r\n    }\r\n    /**\r\n     *  Returns the transaction receipt fot the transaction that this\r\n     *  log occurred in.\r\n     */\r\n    async getTransactionReceipt() {\r\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\r\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\r\n        return receipt;\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    removedEvent() {\r\n        return createRemovedLogFilter(this);\r\n    }\r\n}\r\n//////////////////////\r\n// Transaction Receipt\r\n/*\r\nexport interface LegacyTransactionReceipt {\r\n    byzantium: false;\r\n    status: null;\r\n    root: string;\r\n}\r\n\r\nexport interface ByzantiumTransactionReceipt {\r\n    byzantium: true;\r\n    status: number;\r\n    root: null;\r\n}\r\n*/\r\n/**\r\n *  A **TransactionReceipt** includes additional information about a\r\n *  transaction that is only available after it has been mined.\r\n */\r\nexport class TransactionReceipt {\r\n    /**\r\n     *  The provider connected to the log used to fetch additional details\r\n     *  if necessary.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The address the transaction was sent to.\r\n     */\r\n    to;\r\n    /**\r\n     *  The sender of the transaction.\r\n     */\r\n    from;\r\n    /**\r\n     *  The address of the contract if the transaction was directly\r\n     *  responsible for deploying one.\r\n     *\r\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\r\n     *  was successfully executed as initcode.\r\n     */\r\n    contractAddress;\r\n    /**\r\n     *  The transaction hash.\r\n     */\r\n    hash;\r\n    /**\r\n     *  The index of this transaction within the block transactions.\r\n     */\r\n    index;\r\n    /**\r\n     *  The block hash of the [[Block]] this transaction was included in.\r\n     */\r\n    blockHash;\r\n    /**\r\n     *  The block number of the [[Block]] this transaction was included in.\r\n     */\r\n    blockNumber;\r\n    /**\r\n     *  The bloom filter bytes that represent all logs that occurred within\r\n     *  this transaction. This is generally not useful for most developers,\r\n     *  but can be used to validate the included logs.\r\n     */\r\n    logsBloom;\r\n    /**\r\n     *  The actual amount of gas used by this transaction.\r\n     *\r\n     *  When creating a transaction, the amount of gas that will be used can\r\n     *  only be approximated, but the sender must pay the gas fee for the\r\n     *  entire gas limit. After the transaction, the difference is refunded.\r\n     */\r\n    gasUsed;\r\n    /**\r\n     *  The gas used for BLObs. See [[link-eip-4844]].\r\n     */\r\n    blobGasUsed;\r\n    /**\r\n     *  The amount of gas used by all transactions within the block for this\r\n     *  and all transactions with a lower ``index``.\r\n     *\r\n     *  This is generally not useful for developers but can be used to\r\n     *  validate certain aspects of execution.\r\n     */\r\n    cumulativeGasUsed;\r\n    /**\r\n     *  The actual gas price used during execution.\r\n     *\r\n     *  Due to the complexity of [[link-eip-1559]] this value can only\r\n     *  be caluclated after the transaction has been mined, snce the base\r\n     *  fee is protocol-enforced.\r\n     */\r\n    gasPrice;\r\n    /**\r\n     *  The price paid per BLOB in gas. See [[link-eip-4844]].\r\n     */\r\n    blobGasPrice;\r\n    /**\r\n     *  The [[link-eip-2718]] transaction type.\r\n     */\r\n    type;\r\n    //readonly byzantium!: boolean;\r\n    /**\r\n     *  The status of this transaction, indicating success (i.e. ``1``) or\r\n     *  a revert (i.e. ``0``).\r\n     *\r\n     *  This is available in post-byzantium blocks, but some backends may\r\n     *  backfill this value.\r\n     */\r\n    status;\r\n    /**\r\n     *  The root hash of this transaction.\r\n     *\r\n     *  This is no present and was only included in pre-byzantium blocks, but\r\n     *  could be used to validate certain parts of the receipt.\r\n     */\r\n    root;\r\n    #logs;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(tx, provider) {\r\n        this.#logs = Object.freeze(tx.logs.map((log) => {\r\n            return new Log(log, provider);\r\n        }));\r\n        let gasPrice = BN_0;\r\n        if (tx.effectiveGasPrice != null) {\r\n            gasPrice = tx.effectiveGasPrice;\r\n        }\r\n        else if (tx.gasPrice != null) {\r\n            gasPrice = tx.gasPrice;\r\n        }\r\n        defineProperties(this, {\r\n            provider,\r\n            to: tx.to,\r\n            from: tx.from,\r\n            contractAddress: tx.contractAddress,\r\n            hash: tx.hash,\r\n            index: tx.index,\r\n            blockHash: tx.blockHash,\r\n            blockNumber: tx.blockNumber,\r\n            logsBloom: tx.logsBloom,\r\n            gasUsed: tx.gasUsed,\r\n            cumulativeGasUsed: tx.cumulativeGasUsed,\r\n            blobGasUsed: tx.blobGasUsed,\r\n            gasPrice,\r\n            blobGasPrice: tx.blobGasPrice,\r\n            type: tx.type,\r\n            //byzantium: tx.byzantium,\r\n            status: tx.status,\r\n            root: tx.root\r\n        });\r\n    }\r\n    /**\r\n     *  The logs for this transaction.\r\n     */\r\n    get logs() { return this.#logs; }\r\n    /**\r\n     *  Returns a JSON-compatible representation.\r\n     */\r\n    toJSON() {\r\n        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, //byzantium, \r\n        status, root } = this;\r\n        return {\r\n            _type: \"TransactionReceipt\",\r\n            blockHash, blockNumber,\r\n            //byzantium, \r\n            contractAddress,\r\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\r\n            from,\r\n            gasPrice: toJson(this.gasPrice),\r\n            blobGasUsed: toJson(this.blobGasUsed),\r\n            blobGasPrice: toJson(this.blobGasPrice),\r\n            gasUsed: toJson(this.gasUsed),\r\n            hash, index, logs, logsBloom, root, status, to\r\n        };\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    get length() { return this.logs.length; }\r\n    [Symbol.iterator]() {\r\n        let index = 0;\r\n        return {\r\n            next: () => {\r\n                if (index < this.length) {\r\n                    return { value: this.logs[index++], done: false };\r\n                }\r\n                return { value: undefined, done: true };\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     *  The total fee for this transaction, in wei.\r\n     */\r\n    get fee() {\r\n        return this.gasUsed * this.gasPrice;\r\n    }\r\n    /**\r\n     *  Resolves to the block this transaction occurred in.\r\n     */\r\n    async getBlock() {\r\n        const block = await this.provider.getBlock(this.blockHash);\r\n        if (block == null) {\r\n            throw new Error(\"TODO\");\r\n        }\r\n        return block;\r\n    }\r\n    /**\r\n     *  Resolves to the transaction this transaction occurred in.\r\n     */\r\n    async getTransaction() {\r\n        const tx = await this.provider.getTransaction(this.hash);\r\n        if (tx == null) {\r\n            throw new Error(\"TODO\");\r\n        }\r\n        return tx;\r\n    }\r\n    /**\r\n     *  Resolves to the return value of the execution of this transaction.\r\n     *\r\n     *  Support for this feature is limited, as it requires an archive node\r\n     *  with the ``debug_`` or ``trace_`` API enabled.\r\n     */\r\n    async getResult() {\r\n        return (await this.provider.getTransactionResult(this.hash));\r\n    }\r\n    /**\r\n     *  Resolves to the number of confirmations this transaction has.\r\n     */\r\n    async confirmations() {\r\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    removedEvent() {\r\n        return createRemovedTransactionFilter(this);\r\n    }\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    reorderedEvent(other) {\r\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\r\n        return createReorderedTransactionFilter(this, other);\r\n    }\r\n}\r\n/**\r\n *  A **TransactionResponse** includes all properties about a transaction\r\n *  that was sent to the network, which may or may not be included in a\r\n *  block.\r\n *\r\n *  The [[TransactionResponse-isMined]] can be used to check if the\r\n *  transaction has been mined as well as type guard that the otherwise\r\n *  possibly ``null`` properties are defined.\r\n */\r\nexport class TransactionResponse {\r\n    /**\r\n     *  The provider this is connected to, which will influence how its\r\n     *  methods will resolve its async inspection methods.\r\n     */\r\n    provider;\r\n    /**\r\n     *  The block number of the block that this transaction was included in.\r\n     *\r\n     *  This is ``null`` for pending transactions.\r\n     */\r\n    blockNumber;\r\n    /**\r\n     *  The blockHash of the block that this transaction was included in.\r\n     *\r\n     *  This is ``null`` for pending transactions.\r\n     */\r\n    blockHash;\r\n    /**\r\n     *  The index within the block that this transaction resides at.\r\n     */\r\n    index;\r\n    /**\r\n     *  The transaction hash.\r\n     */\r\n    hash;\r\n    /**\r\n     *  The [[link-eip-2718]] transaction envelope type. This is\r\n     *  ``0`` for legacy transactions types.\r\n     */\r\n    type;\r\n    /**\r\n     *  The receiver of this transaction.\r\n     *\r\n     *  If ``null``, then the transaction is an initcode transaction.\r\n     *  This means the result of executing the [[data]] will be deployed\r\n     *  as a new contract on chain (assuming it does not revert) and the\r\n     *  address may be computed using [[getCreateAddress]].\r\n     */\r\n    to;\r\n    /**\r\n     *  The sender of this transaction. It is implicitly computed\r\n     *  from the transaction pre-image hash (as the digest) and the\r\n     *  [[signature]] using ecrecover.\r\n     */\r\n    from;\r\n    /**\r\n     *  The nonce, which is used to prevent replay attacks and offer\r\n     *  a method to ensure transactions from a given sender are explicitly\r\n     *  ordered.\r\n     *\r\n     *  When sending a transaction, this must be equal to the number of\r\n     *  transactions ever sent by [[from]].\r\n     */\r\n    nonce;\r\n    /**\r\n     *  The maximum units of gas this transaction can consume. If execution\r\n     *  exceeds this, the entries transaction is reverted and the sender\r\n     *  is charged for the full amount, despite not state changes being made.\r\n     */\r\n    gasLimit;\r\n    /**\r\n     *  The gas price can have various values, depending on the network.\r\n     *\r\n     *  In modern networks, for transactions that are included this is\r\n     *  the //effective gas price// (the fee per gas that was actually\r\n     *  charged), while for transactions that have not been included yet\r\n     *  is the [[maxFeePerGas]].\r\n     *\r\n     *  For legacy transactions, or transactions on legacy networks, this\r\n     *  is the fee that will be charged per unit of gas the transaction\r\n     *  consumes.\r\n     */\r\n    gasPrice;\r\n    /**\r\n     *  The maximum priority fee (per unit of gas) to allow a\r\n     *  validator to charge the sender. This is inclusive of the\r\n     *  [[maxFeeFeePerGas]].\r\n     */\r\n    maxPriorityFeePerGas;\r\n    /**\r\n     *  The maximum fee (per unit of gas) to allow this transaction\r\n     *  to charge the sender.\r\n     */\r\n    maxFeePerGas;\r\n    /**\r\n     *  The [[link-eip-4844]] max fee per BLOb gas.\r\n     */\r\n    maxFeePerBlobGas;\r\n    /**\r\n     *  The data.\r\n     */\r\n    data;\r\n    /**\r\n     *  The value, in wei. Use [[formatEther]] to format this value\r\n     *  as ether.\r\n     */\r\n    value;\r\n    /**\r\n     *  The chain ID.\r\n     */\r\n    chainId;\r\n    /**\r\n     *  The signature.\r\n     */\r\n    signature;\r\n    /**\r\n     *  The [[link-eip-2930]] access list for transaction types that\r\n     *  support it, otherwise ``null``.\r\n     */\r\n    accessList;\r\n    /**\r\n     *  The [[link-eip-4844]] BLOb versioned hashes.\r\n     */\r\n    blobVersionedHashes;\r\n    #startBlock;\r\n    /**\r\n     *  @_ignore:\r\n     */\r\n    constructor(tx, provider) {\r\n        this.provider = provider;\r\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber : null;\r\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash : null;\r\n        this.hash = tx.hash;\r\n        this.index = tx.index;\r\n        this.type = tx.type;\r\n        this.from = tx.from;\r\n        this.to = tx.to || null;\r\n        this.gasLimit = tx.gasLimit;\r\n        this.nonce = tx.nonce;\r\n        this.data = tx.data;\r\n        this.value = tx.value;\r\n        this.gasPrice = tx.gasPrice;\r\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas : null;\r\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas : null;\r\n        this.maxFeePerBlobGas = (tx.maxFeePerBlobGas != null) ? tx.maxFeePerBlobGas : null;\r\n        this.chainId = tx.chainId;\r\n        this.signature = tx.signature;\r\n        this.accessList = (tx.accessList != null) ? tx.accessList : null;\r\n        this.blobVersionedHashes = (tx.blobVersionedHashes != null) ? tx.blobVersionedHashes : null;\r\n        this.#startBlock = -1;\r\n    }\r\n    /**\r\n     *  Returns a JSON-compatible representation of this transaction.\r\n     */\r\n    toJSON() {\r\n        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;\r\n        return {\r\n            _type: \"TransactionResponse\",\r\n            accessList, blockNumber, blockHash,\r\n            blobVersionedHashes,\r\n            chainId: toJson(this.chainId),\r\n            data, from,\r\n            gasLimit: toJson(this.gasLimit),\r\n            gasPrice: toJson(this.gasPrice),\r\n            hash,\r\n            maxFeePerGas: toJson(this.maxFeePerGas),\r\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\r\n            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),\r\n            nonce, signature, to, index, type,\r\n            value: toJson(this.value),\r\n        };\r\n    }\r\n    /**\r\n     *  Resolves to the Block that this transaction was included in.\r\n     *\r\n     *  This will return null if the transaction has not been included yet.\r\n     */\r\n    async getBlock() {\r\n        let blockNumber = this.blockNumber;\r\n        if (blockNumber == null) {\r\n            const tx = await this.getTransaction();\r\n            if (tx) {\r\n                blockNumber = tx.blockNumber;\r\n            }\r\n        }\r\n        if (blockNumber == null) {\r\n            return null;\r\n        }\r\n        const block = this.provider.getBlock(blockNumber);\r\n        if (block == null) {\r\n            throw new Error(\"TODO\");\r\n        }\r\n        return block;\r\n    }\r\n    /**\r\n     *  Resolves to this transaction being re-requested from the\r\n     *  provider. This can be used if you have an unmined transaction\r\n     *  and wish to get an up-to-date populated instance.\r\n     */\r\n    async getTransaction() {\r\n        return this.provider.getTransaction(this.hash);\r\n    }\r\n    /**\r\n     *  Resolve to the number of confirmations this transaction has.\r\n     */\r\n    async confirmations() {\r\n        if (this.blockNumber == null) {\r\n            const { tx, blockNumber } = await resolveProperties({\r\n                tx: this.getTransaction(),\r\n                blockNumber: this.provider.getBlockNumber()\r\n            });\r\n            // Not mined yet...\r\n            if (tx == null || tx.blockNumber == null) {\r\n                return 0;\r\n            }\r\n            return blockNumber - tx.blockNumber + 1;\r\n        }\r\n        const blockNumber = await this.provider.getBlockNumber();\r\n        return blockNumber - this.blockNumber + 1;\r\n    }\r\n    /**\r\n     *  Resolves once this transaction has been mined and has\r\n     *  %%confirms%% blocks including it (default: ``1``) with an\r\n     *  optional %%timeout%%.\r\n     *\r\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\r\n     *  and the transaction has not been mined, otherwise this will\r\n     *  wait until enough confirmations have completed.\r\n     */\r\n    async wait(_confirms, _timeout) {\r\n        const confirms = (_confirms == null) ? 1 : _confirms;\r\n        const timeout = (_timeout == null) ? 0 : _timeout;\r\n        let startBlock = this.#startBlock;\r\n        let nextScan = -1;\r\n        let stopScanning = (startBlock === -1) ? true : false;\r\n        const checkReplacement = async () => {\r\n            // Get the current transaction count for this sender\r\n            if (stopScanning) {\r\n                return null;\r\n            }\r\n            const { blockNumber, nonce } = await resolveProperties({\r\n                blockNumber: this.provider.getBlockNumber(),\r\n                nonce: this.provider.getTransactionCount(this.from)\r\n            });\r\n            // No transaction or our nonce has not been mined yet; but we\r\n            // can start scanning later when we do start\r\n            if (nonce < this.nonce) {\r\n                startBlock = blockNumber;\r\n                return;\r\n            }\r\n            // We were mined; no replacement\r\n            if (stopScanning) {\r\n                return null;\r\n            }\r\n            const mined = await this.getTransaction();\r\n            if (mined && mined.blockNumber != null) {\r\n                return;\r\n            }\r\n            // We were replaced; start scanning for that transaction\r\n            // Starting to scan; look back a few extra blocks for safety\r\n            if (nextScan === -1) {\r\n                nextScan = startBlock - 3;\r\n                if (nextScan < this.#startBlock) {\r\n                    nextScan = this.#startBlock;\r\n                }\r\n            }\r\n            while (nextScan <= blockNumber) {\r\n                // Get the next block to scan\r\n                if (stopScanning) {\r\n                    return null;\r\n                }\r\n                const block = await this.provider.getBlock(nextScan, true);\r\n                // This should not happen; but we'll try again shortly\r\n                if (block == null) {\r\n                    return;\r\n                }\r\n                // We were mined; no replacement\r\n                for (const hash of block) {\r\n                    if (hash === this.hash) {\r\n                        return;\r\n                    }\r\n                }\r\n                // Search for the transaction that replaced us\r\n                for (let i = 0; i < block.length; i++) {\r\n                    const tx = await block.getTransaction(i);\r\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\r\n                        // Get the receipt\r\n                        if (stopScanning) {\r\n                            return null;\r\n                        }\r\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\r\n                        // This should not happen; but we'll try again shortly\r\n                        if (receipt == null) {\r\n                            return;\r\n                        }\r\n                        // We will retry this on the next block (this case could be optimized)\r\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) {\r\n                            return;\r\n                        }\r\n                        // The reason we were replaced\r\n                        let reason = \"replaced\";\r\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\r\n                            reason = \"repriced\";\r\n                        }\r\n                        else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\r\n                            reason = \"cancelled\";\r\n                        }\r\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\r\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\r\n                            reason,\r\n                            replacement: tx.replaceableTransaction(startBlock),\r\n                            hash: tx.hash,\r\n                            receipt\r\n                        });\r\n                    }\r\n                }\r\n                nextScan++;\r\n            }\r\n            return;\r\n        };\r\n        const checkReceipt = (receipt) => {\r\n            if (receipt == null || receipt.status !== 0) {\r\n                return receipt;\r\n            }\r\n            assert(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\r\n                action: \"sendTransaction\",\r\n                data: null, reason: null, invocation: null, revert: null,\r\n                transaction: {\r\n                    to: receipt.to,\r\n                    from: receipt.from,\r\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\r\n                }, receipt\r\n            });\r\n        };\r\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\r\n        if (confirms === 0) {\r\n            return checkReceipt(receipt);\r\n        }\r\n        if (receipt) {\r\n            if ((await receipt.confirmations()) >= confirms) {\r\n                return checkReceipt(receipt);\r\n            }\r\n        }\r\n        else {\r\n            // Check for a replacement; throws if a replacement was found\r\n            await checkReplacement();\r\n            // Allow null only when the confirms is 0\r\n            if (confirms === 0) {\r\n                return null;\r\n            }\r\n        }\r\n        const waiter = new Promise((resolve, reject) => {\r\n            // List of things to cancel when we have a result (one way or the other)\r\n            const cancellers = [];\r\n            const cancel = () => { cancellers.forEach((c) => c()); };\r\n            // On cancel, stop scanning for replacements\r\n            cancellers.push(() => { stopScanning = true; });\r\n            // Set up any timeout requested\r\n            if (timeout > 0) {\r\n                const timer = setTimeout(() => {\r\n                    cancel();\r\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\r\n                }, timeout);\r\n                cancellers.push(() => { clearTimeout(timer); });\r\n            }\r\n            const txListener = async (receipt) => {\r\n                // Done; return it!\r\n                if ((await receipt.confirmations()) >= confirms) {\r\n                    cancel();\r\n                    try {\r\n                        resolve(checkReceipt(receipt));\r\n                    }\r\n                    catch (error) {\r\n                        reject(error);\r\n                    }\r\n                }\r\n            };\r\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\r\n            this.provider.on(this.hash, txListener);\r\n            // We support replacement detection; start checking\r\n            if (startBlock >= 0) {\r\n                const replaceListener = async () => {\r\n                    try {\r\n                        // Check for a replacement; this throws only if one is found\r\n                        await checkReplacement();\r\n                    }\r\n                    catch (error) {\r\n                        // We were replaced (with enough confirms); re-throw the error\r\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\r\n                            cancel();\r\n                            reject(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                    // Rescheudle a check on the next block\r\n                    if (!stopScanning) {\r\n                        this.provider.once(\"block\", replaceListener);\r\n                    }\r\n                };\r\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\r\n                this.provider.once(\"block\", replaceListener);\r\n            }\r\n        });\r\n        return await waiter;\r\n    }\r\n    /**\r\n     *  Returns ``true`` if this transaction has been included.\r\n     *\r\n     *  This is effective only as of the time the TransactionResponse\r\n     *  was instantiated. To get up-to-date information, use\r\n     *  [[getTransaction]].\r\n     *\r\n     *  This provides a Type Guard that this transaction will have\r\n     *  non-null property values for properties that are null for\r\n     *  unmined transactions.\r\n     */\r\n    isMined() {\r\n        return (this.blockHash != null);\r\n    }\r\n    /**\r\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\r\n     *  transaction.\r\n     *\r\n     *  This provides a Type Guard that this transaction will have\r\n     *  the ``null``-ness for hardfork-specific properties set correctly.\r\n     */\r\n    isLegacy() {\r\n        return (this.type === 0);\r\n    }\r\n    /**\r\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\r\n     *  transaction. See [[link-eip-2070]].\r\n     *\r\n     *  This provides a Type Guard that this transaction will have\r\n     *  the ``null``-ness for hardfork-specific properties set correctly.\r\n     */\r\n    isBerlin() {\r\n        return (this.type === 1);\r\n    }\r\n    /**\r\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\r\n     *  transaction. See [[link-eip-1559]].\r\n     *\r\n     *  This provides a Type Guard that this transaction will have\r\n     *  the ``null``-ness for hardfork-specific properties set correctly.\r\n     */\r\n    isLondon() {\r\n        return (this.type === 2);\r\n    }\r\n    /**\r\n     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)\r\n     *  transaction. See [[link-eip-4844]].\r\n     */\r\n    isCancun() {\r\n        return (this.type === 3);\r\n    }\r\n    /**\r\n     *  Returns a filter which can be used to listen for orphan events\r\n     *  that evict this transaction.\r\n     */\r\n    removedEvent() {\r\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\r\n        return createRemovedTransactionFilter(this);\r\n    }\r\n    /**\r\n     *  Returns a filter which can be used to listen for orphan events\r\n     *  that re-order this event against %%other%%.\r\n     */\r\n    reorderedEvent(other) {\r\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\r\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\r\n        return createReorderedTransactionFilter(this, other);\r\n    }\r\n    /**\r\n     *  Returns a new TransactionResponse instance which has the ability to\r\n     *  detect (and throw an error) if the transaction is replaced, which\r\n     *  will begin scanning at %%startBlock%%.\r\n     *\r\n     *  This should generally not be used by developers and is intended\r\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\r\n     *  have devastating performance consequences if used incorrectly.\r\n     */\r\n    replaceableTransaction(startBlock) {\r\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\r\n        const tx = new TransactionResponse(this, this.provider);\r\n        tx.#startBlock = startBlock;\r\n        return tx;\r\n    }\r\n}\r\nfunction createOrphanedBlockFilter(block) {\r\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\r\n}\r\nfunction createReorderedTransactionFilter(tx, other) {\r\n    return { orphan: \"reorder-transaction\", tx, other };\r\n}\r\nfunction createRemovedTransactionFilter(tx) {\r\n    return { orphan: \"drop-transaction\", tx };\r\n}\r\nfunction createRemovedLogFilter(log) {\r\n    return { orphan: \"drop-log\", log: {\r\n            transactionHash: log.transactionHash,\r\n            blockHash: log.blockHash,\r\n            blockNumber: log.blockNumber,\r\n            address: log.address,\r\n            data: log.data,\r\n            topics: Object.freeze(log.topics.slice()),\r\n            index: log.index\r\n        } };\r\n}\r\n//# sourceMappingURL=provider.js.map","/**\r\n *  Generally the [[Wallet]] and [[JsonRpcSigner]] and their sub-classes\r\n *  are sufficent for most developers, but this is provided to\r\n *  fascilitate more complex Signers.\r\n *\r\n *  @_section: api/providers/abstract-signer: Subclassing Signer [abstract-signer]\r\n */\r\nimport { resolveAddress } from \"../address/index.js\";\r\nimport { Transaction } from \"../transaction/index.js\";\r\nimport { defineProperties, getBigInt, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\r\nimport { copyRequest } from \"./provider.js\";\r\nfunction checkProvider(signer, operation) {\r\n    if (signer.provider) {\r\n        return signer.provider;\r\n    }\r\n    assert(false, \"missing provider\", \"UNSUPPORTED_OPERATION\", { operation });\r\n}\r\nasync function populate(signer, tx) {\r\n    let pop = copyRequest(tx);\r\n    if (pop.to != null) {\r\n        pop.to = resolveAddress(pop.to, signer);\r\n    }\r\n    if (pop.from != null) {\r\n        const from = pop.from;\r\n        pop.from = Promise.all([\r\n            signer.getAddress(),\r\n            resolveAddress(from, signer)\r\n        ]).then(([address, from]) => {\r\n            assertArgument(address.toLowerCase() === from.toLowerCase(), \"transaction from mismatch\", \"tx.from\", from);\r\n            return address;\r\n        });\r\n    }\r\n    else {\r\n        pop.from = signer.getAddress();\r\n    }\r\n    return await resolveProperties(pop);\r\n}\r\n/**\r\n *  An **AbstractSigner** includes most of teh functionality required\r\n *  to get a [[Signer]] working as expected, but requires a few\r\n *  Signer-specific methods be overridden.\r\n *\r\n */\r\nexport class AbstractSigner {\r\n    /**\r\n     *  The provider this signer is connected to.\r\n     */\r\n    provider;\r\n    /**\r\n     *  Creates a new Signer connected to %%provider%%.\r\n     */\r\n    constructor(provider) {\r\n        defineProperties(this, { provider: (provider || null) });\r\n    }\r\n    async getNonce(blockTag) {\r\n        return checkProvider(this, \"getTransactionCount\").getTransactionCount(await this.getAddress(), blockTag);\r\n    }\r\n    async populateCall(tx) {\r\n        const pop = await populate(this, tx);\r\n        return pop;\r\n    }\r\n    async populateTransaction(tx) {\r\n        const provider = checkProvider(this, \"populateTransaction\");\r\n        const pop = await populate(this, tx);\r\n        if (pop.nonce == null) {\r\n            pop.nonce = await this.getNonce(\"pending\");\r\n        }\r\n        if (pop.gasLimit == null) {\r\n            pop.gasLimit = await this.estimateGas(pop);\r\n        }\r\n        // Populate the chain ID\r\n        const network = await (this.provider).getNetwork();\r\n        if (pop.chainId != null) {\r\n            const chainId = getBigInt(pop.chainId);\r\n            assertArgument(chainId === network.chainId, \"transaction chainId mismatch\", \"tx.chainId\", tx.chainId);\r\n        }\r\n        else {\r\n            pop.chainId = network.chainId;\r\n        }\r\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\r\n        const hasEip1559 = (pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null);\r\n        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {\r\n            assertArgument(false, \"eip-1559 transaction do not support gasPrice\", \"tx\", tx);\r\n        }\r\n        else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {\r\n            assertArgument(false, \"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"tx\", tx);\r\n        }\r\n        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {\r\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\r\n            pop.type = 2;\r\n        }\r\n        else if (pop.type === 0 || pop.type === 1) {\r\n            // Explicit Legacy or EIP-2930 transaction\r\n            // We need to get fee data to determine things\r\n            const feeData = await provider.getFeeData();\r\n            assert(feeData.gasPrice != null, \"network does not support gasPrice\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"getGasPrice\"\r\n            });\r\n            // Populate missing gasPrice\r\n            if (pop.gasPrice == null) {\r\n                pop.gasPrice = feeData.gasPrice;\r\n            }\r\n        }\r\n        else {\r\n            // We need to get fee data to determine things\r\n            const feeData = await provider.getFeeData();\r\n            if (pop.type == null) {\r\n                // We need to auto-detect the intended type of this transaction...\r\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\r\n                    // The network supports EIP-1559!\r\n                    // Upgrade transaction from null to eip-1559\r\n                    pop.type = 2;\r\n                    if (pop.gasPrice != null) {\r\n                        // Using legacy gasPrice property on an eip-1559 network,\r\n                        // so use gasPrice as both fee properties\r\n                        const gasPrice = pop.gasPrice;\r\n                        delete pop.gasPrice;\r\n                        pop.maxFeePerGas = gasPrice;\r\n                        pop.maxPriorityFeePerGas = gasPrice;\r\n                    }\r\n                    else {\r\n                        // Populate missing fee data\r\n                        if (pop.maxFeePerGas == null) {\r\n                            pop.maxFeePerGas = feeData.maxFeePerGas;\r\n                        }\r\n                        if (pop.maxPriorityFeePerGas == null) {\r\n                            pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\r\n                        }\r\n                    }\r\n                }\r\n                else if (feeData.gasPrice != null) {\r\n                    // Network doesn't support EIP-1559...\r\n                    // ...but they are trying to use EIP-1559 properties\r\n                    assert(!hasEip1559, \"network does not support EIP-1559\", \"UNSUPPORTED_OPERATION\", {\r\n                        operation: \"populateTransaction\"\r\n                    });\r\n                    // Populate missing fee data\r\n                    if (pop.gasPrice == null) {\r\n                        pop.gasPrice = feeData.gasPrice;\r\n                    }\r\n                    // Explicitly set untyped transaction to legacy\r\n                    // @TODO: Maybe this shold allow type 1?\r\n                    pop.type = 0;\r\n                }\r\n                else {\r\n                    // getFeeData has failed us.\r\n                    assert(false, \"failed to get consistent fee data\", \"UNSUPPORTED_OPERATION\", {\r\n                        operation: \"signer.getFeeData\"\r\n                    });\r\n                }\r\n            }\r\n            else if (pop.type === 2 || pop.type === 3) {\r\n                // Explicitly using EIP-1559 or EIP-4844\r\n                // Populate missing fee data\r\n                if (pop.maxFeePerGas == null) {\r\n                    pop.maxFeePerGas = feeData.maxFeePerGas;\r\n                }\r\n                if (pop.maxPriorityFeePerGas == null) {\r\n                    pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\r\n                }\r\n            }\r\n        }\r\n        //@TOOD: Don't await all over the place; save them up for\r\n        // the end for better batching\r\n        return await resolveProperties(pop);\r\n    }\r\n    async estimateGas(tx) {\r\n        return checkProvider(this, \"estimateGas\").estimateGas(await this.populateCall(tx));\r\n    }\r\n    async call(tx) {\r\n        return checkProvider(this, \"call\").call(await this.populateCall(tx));\r\n    }\r\n    async resolveName(name) {\r\n        const provider = checkProvider(this, \"resolveName\");\r\n        return await provider.resolveName(name);\r\n    }\r\n    async sendTransaction(tx) {\r\n        const provider = checkProvider(this, \"sendTransaction\");\r\n        const pop = await this.populateTransaction(tx);\r\n        delete pop.from;\r\n        const txObj = Transaction.from(pop);\r\n        return await provider.broadcastTransaction(await this.signTransaction(txObj));\r\n    }\r\n}\r\n/**\r\n *  A **VoidSigner** is a class deisgned to allow an address to be used\r\n *  in any API which accepts a Signer, but for which there are no\r\n *  credentials available to perform any actual signing.\r\n *\r\n *  This for example allow impersonating an account for the purpose of\r\n *  static calls or estimating gas, but does not allow sending transactions.\r\n */\r\nexport class VoidSigner extends AbstractSigner {\r\n    /**\r\n     *  The signer address.\r\n     */\r\n    address;\r\n    /**\r\n     *  Creates a new **VoidSigner** with %%address%% attached to\r\n     *  %%provider%%.\r\n     */\r\n    constructor(address, provider) {\r\n        super(provider);\r\n        defineProperties(this, { address });\r\n    }\r\n    async getAddress() { return this.address; }\r\n    connect(provider) {\r\n        return new VoidSigner(this.address, provider);\r\n    }\r\n    #throwUnsupported(suffix, operation) {\r\n        assert(false, `VoidSigner cannot sign ${suffix}`, \"UNSUPPORTED_OPERATION\", { operation });\r\n    }\r\n    async signTransaction(tx) {\r\n        this.#throwUnsupported(\"transactions\", \"signTransaction\");\r\n    }\r\n    async signMessage(message) {\r\n        this.#throwUnsupported(\"messages\", \"signMessage\");\r\n    }\r\n    async signTypedData(domain, types, value) {\r\n        this.#throwUnsupported(\"typed-data\", \"signTypedData\");\r\n    }\r\n}\r\n//# sourceMappingURL=abstract-signer.js.map","import { getAddress, resolveAddress } from \"../address/index.js\";\r\nimport { hashMessage, TypedDataEncoder } from \"../hash/index.js\";\r\nimport { AbstractSigner, copyRequest } from \"../providers/index.js\";\r\nimport { computeAddress, Transaction } from \"../transaction/index.js\";\r\nimport { defineProperties, resolveProperties, assert, assertArgument } from \"../utils/index.js\";\r\n/**\r\n *  The **BaseWallet** is a stream-lined implementation of a\r\n *  [[Signer]] that operates with a private key.\r\n *\r\n *  It is preferred to use the [[Wallet]] class, as it offers\r\n *  additional functionality and simplifies loading a variety\r\n *  of JSON formats, Mnemonic Phrases, etc.\r\n *\r\n *  This class may be of use for those attempting to implement\r\n *  a minimal Signer.\r\n */\r\nexport class BaseWallet extends AbstractSigner {\r\n    /**\r\n     *  The wallet address.\r\n     */\r\n    address;\r\n    #signingKey;\r\n    /**\r\n     *  Creates a new BaseWallet for %%privateKey%%, optionally\r\n     *  connected to %%provider%%.\r\n     *\r\n     *  If %%provider%% is not specified, only offline methods can\r\n     *  be used.\r\n     */\r\n    constructor(privateKey, provider) {\r\n        super(provider);\r\n        assertArgument(privateKey && typeof (privateKey.sign) === \"function\", \"invalid private key\", \"privateKey\", \"[ REDACTED ]\");\r\n        this.#signingKey = privateKey;\r\n        const address = computeAddress(this.signingKey.publicKey);\r\n        defineProperties(this, { address });\r\n    }\r\n    // Store private values behind getters to reduce visibility\r\n    // in console.log\r\n    /**\r\n     *  The [[SigningKey]] used for signing payloads.\r\n     */\r\n    get signingKey() { return this.#signingKey; }\r\n    /**\r\n     *  The private key for this wallet.\r\n     */\r\n    get privateKey() { return this.signingKey.privateKey; }\r\n    async getAddress() { return this.address; }\r\n    connect(provider) {\r\n        return new BaseWallet(this.#signingKey, provider);\r\n    }\r\n    async signTransaction(tx) {\r\n        tx = copyRequest(tx);\r\n        // Replace any Addressable or ENS name with an address\r\n        const { to, from } = await resolveProperties({\r\n            to: (tx.to ? resolveAddress(tx.to, this.provider) : undefined),\r\n            from: (tx.from ? resolveAddress(tx.from, this.provider) : undefined)\r\n        });\r\n        if (to != null) {\r\n            tx.to = to;\r\n        }\r\n        if (from != null) {\r\n            tx.from = from;\r\n        }\r\n        if (tx.from != null) {\r\n            assertArgument(getAddress((tx.from)) === this.address, \"transaction from address mismatch\", \"tx.from\", tx.from);\r\n            delete tx.from;\r\n        }\r\n        // Build the transaction\r\n        const btx = Transaction.from(tx);\r\n        btx.signature = this.signingKey.sign(btx.unsignedHash);\r\n        return btx.serialized;\r\n    }\r\n    async signMessage(message) {\r\n        return this.signMessageSync(message);\r\n    }\r\n    // @TODO: Add a secialized signTx and signTyped sync that enforces\r\n    // all parameters are known?\r\n    /**\r\n     *  Returns the signature for %%message%% signed with this wallet.\r\n     */\r\n    signMessageSync(message) {\r\n        return this.signingKey.sign(hashMessage(message)).serialized;\r\n    }\r\n    async signTypedData(domain, types, value) {\r\n        // Populate any ENS names\r\n        const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {\r\n            // @TODO: this should use resolveName; addresses don't\r\n            //        need a provider\r\n            assert(this.provider != null, \"cannot resolve ENS names without a provider\", \"UNSUPPORTED_OPERATION\", {\r\n                operation: \"resolveName\",\r\n                info: { name }\r\n            });\r\n            const address = await this.provider.resolveName(name);\r\n            assert(address != null, \"unconfigured ENS name\", \"UNCONFIGURED_NAME\", {\r\n                value: name\r\n            });\r\n            return address;\r\n        });\r\n        return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;\r\n    }\r\n}\r\n//# sourceMappingURL=base-wallet.js.map","import { assertArgument } from \"../utils/index.js\";\r\nconst subsChrs = \" !#$%&'()*+,-./<=>?@[]^_`{|}~\";\r\nconst Word = /^[a-z]*$/i;\r\nfunction unfold(words, sep) {\r\n    let initial = 97;\r\n    return words.reduce((accum, word) => {\r\n        if (word === sep) {\r\n            initial++;\r\n        }\r\n        else if (word.match(Word)) {\r\n            accum.push(String.fromCharCode(initial) + word);\r\n        }\r\n        else {\r\n            initial = 97;\r\n            accum.push(word);\r\n        }\r\n        return accum;\r\n    }, []);\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nexport function decode(data, subs) {\r\n    // Replace all the substitutions with their expanded form\r\n    for (let i = subsChrs.length - 1; i >= 0; i--) {\r\n        data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));\r\n    }\r\n    // Get all tle clumps; each suffix, first-increment and second-increment\r\n    const clumps = [];\r\n    const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {\r\n        if (semi) {\r\n            for (let i = parseInt(semi); i >= 0; i--) {\r\n                clumps.push(\";\");\r\n            }\r\n        }\r\n        else {\r\n            clumps.push(item.toLowerCase());\r\n        }\r\n        return \"\";\r\n    });\r\n    /* c8 ignore start */\r\n    if (leftover) {\r\n        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);\r\n    }\r\n    /* c8 ignore stop */\r\n    return unfold(unfold(clumps, \";\"), \":\");\r\n}\r\n/**\r\n *  @_ignore\r\n */\r\nexport function decodeOwl(data) {\r\n    assertArgument(data[0] === \"0\", \"unsupported auwl data\", \"data\", data);\r\n    return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));\r\n}\r\n//# sourceMappingURL=decode-owl.js.map","import { defineProperties } from \"../utils/index.js\";\r\n/**\r\n *  A Wordlist represents a collection of language-specific\r\n *  words used to encode and devoce [[link-bip-39]] encoded data\r\n *  by mapping words to 11-bit values and vice versa.\r\n */\r\nexport class Wordlist {\r\n    locale;\r\n    /**\r\n     *  Creates a new Wordlist instance.\r\n     *\r\n     *  Sub-classes MUST call this if they provide their own constructor,\r\n     *  passing in the locale string of the language.\r\n     *\r\n     *  Generally there is no need to create instances of a Wordlist,\r\n     *  since each language-specific Wordlist creates an instance and\r\n     *  there is no state kept internally, so they are safe to share.\r\n     */\r\n    constructor(locale) {\r\n        defineProperties(this, { locale });\r\n    }\r\n    /**\r\n     *  Sub-classes may override this to provide a language-specific\r\n     *  method for spliting %%phrase%% into individual words.\r\n     *\r\n     *  By default, %%phrase%% is split using any sequences of\r\n     *  white-space as defined by regular expressions (i.e. ``/\\s+/``).\r\n     */\r\n    split(phrase) {\r\n        return phrase.toLowerCase().split(/\\s+/g);\r\n    }\r\n    /**\r\n     *  Sub-classes may override this to provider a language-specific\r\n     *  method for joining %%words%% into a phrase.\r\n     *\r\n     *  By default, %%words%% are joined by a single space.\r\n     */\r\n    join(words) {\r\n        return words.join(\" \");\r\n    }\r\n}\r\n//# sourceMappingURL=wordlist.js.map","// Use the encode-latin.js script to create the necessary\r\n// data files to be consumed by this class\r\nimport { id } from \"../hash/index.js\";\r\nimport { assertArgument } from \"../utils/index.js\";\r\nimport { decodeOwl } from \"./decode-owl.js\";\r\nimport { Wordlist } from \"./wordlist.js\";\r\n/**\r\n *  An OWL format Wordlist is an encoding method that exploits\r\n *  the general locality of alphabetically sorted words to\r\n *  achieve a simple but effective means of compression.\r\n *\r\n *  This class is generally not useful to most developers as\r\n *  it is used mainly internally to keep Wordlists for languages\r\n *  based on ASCII-7 small.\r\n *\r\n *  If necessary, there are tools within the ``generation/`` folder\r\n *  to create the necessary data.\r\n */\r\nexport class WordlistOwl extends Wordlist {\r\n    #data;\r\n    #checksum;\r\n    /**\r\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\r\n     *  and validated against the %%checksum%%.\r\n     */\r\n    constructor(locale, data, checksum) {\r\n        super(locale);\r\n        this.#data = data;\r\n        this.#checksum = checksum;\r\n        this.#words = null;\r\n    }\r\n    /**\r\n     *  The OWL-encoded data.\r\n     */\r\n    get _data() { return this.#data; }\r\n    /**\r\n     *  Decode all the words for the wordlist.\r\n     */\r\n    _decodeWords() {\r\n        return decodeOwl(this.#data);\r\n    }\r\n    #words;\r\n    #loadWords() {\r\n        if (this.#words == null) {\r\n            const words = this._decodeWords();\r\n            // Verify the computed list matches the official list\r\n            const checksum = id(words.join(\"\\n\") + \"\\n\");\r\n            /* c8 ignore start */\r\n            if (checksum !== this.#checksum) {\r\n                throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\r\n            }\r\n            /* c8 ignore stop */\r\n            this.#words = words;\r\n        }\r\n        return this.#words;\r\n    }\r\n    getWord(index) {\r\n        const words = this.#loadWords();\r\n        assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\r\n        return words[index];\r\n    }\r\n    getWordIndex(word) {\r\n        return this.#loadWords().indexOf(word);\r\n    }\r\n}\r\n//# sourceMappingURL=wordlist-owl.js.map","import { WordlistOwl } from \"./wordlist-owl.js\";\r\nconst words = \"0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO\";\r\nconst checksum = \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\";\r\nlet wordlist = null;\r\n/**\r\n *  The [[link-bip39-en]] for [mnemonic phrases](link-bip-39).\r\n *\r\n *  @_docloc: api/wordlists\r\n */\r\nexport class LangEn extends WordlistOwl {\r\n    /**\r\n     *  Creates a new instance of the English language Wordlist.\r\n     *\r\n     *  This should be unnecessary most of the time as the exported\r\n     *  [[langEn]] should suffice.\r\n     *\r\n     *  @_ignore:\r\n     */\r\n    constructor() { super(\"en\", words, checksum); }\r\n    /**\r\n     *  Returns a singleton instance of a ``LangEn``, creating it\r\n     *  if this is the first time being called.\r\n     */\r\n    static wordlist() {\r\n        if (wordlist == null) {\r\n            wordlist = new LangEn();\r\n        }\r\n        return wordlist;\r\n    }\r\n}\r\n//# sourceMappingURL=lang-en.js.map","import { pbkdf2, sha256 } from \"../crypto/index.js\";\r\nimport { defineProperties, getBytes, hexlify, assertNormalize, assertPrivate, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\r\nimport { LangEn } from \"../wordlists/lang-en.js\";\r\n// Returns a byte with the MSB bits set\r\nfunction getUpperMask(bits) {\r\n    return ((1 << bits) - 1) << (8 - bits) & 0xff;\r\n}\r\n// Returns a byte with the LSB bits set\r\nfunction getLowerMask(bits) {\r\n    return ((1 << bits) - 1) & 0xff;\r\n}\r\nfunction mnemonicToEntropy(mnemonic, wordlist) {\r\n    assertNormalize(\"NFKD\");\r\n    if (wordlist == null) {\r\n        wordlist = LangEn.wordlist();\r\n    }\r\n    const words = wordlist.split(mnemonic);\r\n    assertArgument((words.length % 3) === 0 && words.length >= 12 && words.length <= 24, \"invalid mnemonic length\", \"mnemonic\", \"[ REDACTED ]\");\r\n    const entropy = new Uint8Array(Math.ceil(11 * words.length / 8));\r\n    let offset = 0;\r\n    for (let i = 0; i < words.length; i++) {\r\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\r\n        assertArgument(index >= 0, `invalid mnemonic word at index ${i}`, \"mnemonic\", \"[ REDACTED ]\");\r\n        for (let bit = 0; bit < 11; bit++) {\r\n            if (index & (1 << (10 - bit))) {\r\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\r\n            }\r\n            offset++;\r\n        }\r\n    }\r\n    const entropyBits = 32 * words.length / 3;\r\n    const checksumBits = words.length / 3;\r\n    const checksumMask = getUpperMask(checksumBits);\r\n    const checksum = getBytes(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\r\n    assertArgument(checksum === (entropy[entropy.length - 1] & checksumMask), \"invalid mnemonic checksum\", \"mnemonic\", \"[ REDACTED ]\");\r\n    return hexlify(entropy.slice(0, entropyBits / 8));\r\n}\r\nfunction entropyToMnemonic(entropy, wordlist) {\r\n    assertArgument((entropy.length % 4) === 0 && entropy.length >= 16 && entropy.length <= 32, \"invalid entropy size\", \"entropy\", \"[ REDACTED ]\");\r\n    if (wordlist == null) {\r\n        wordlist = LangEn.wordlist();\r\n    }\r\n    const indices = [0];\r\n    let remainingBits = 11;\r\n    for (let i = 0; i < entropy.length; i++) {\r\n        // Consume the whole byte (with still more to go)\r\n        if (remainingBits > 8) {\r\n            indices[indices.length - 1] <<= 8;\r\n            indices[indices.length - 1] |= entropy[i];\r\n            remainingBits -= 8;\r\n            // This byte will complete an 11-bit index\r\n        }\r\n        else {\r\n            indices[indices.length - 1] <<= remainingBits;\r\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\r\n            // Start the next word\r\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\r\n            remainingBits += 3;\r\n        }\r\n    }\r\n    // Compute the checksum bits\r\n    const checksumBits = entropy.length / 4;\r\n    const checksum = parseInt(sha256(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);\r\n    // Shift the checksum into the word indices\r\n    indices[indices.length - 1] <<= checksumBits;\r\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\r\n    return wordlist.join(indices.map((index) => wordlist.getWord(index)));\r\n}\r\nconst _guard = {};\r\n/**\r\n *  A **Mnemonic** wraps all properties required to compute [[link-bip-39]]\r\n *  seeds and convert between phrases and entropy.\r\n */\r\nexport class Mnemonic {\r\n    /**\r\n     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.\r\n     *\r\n     *  Use the [[wordlist]] ``split`` method to get the individual words.\r\n     */\r\n    phrase;\r\n    /**\r\n     *  The password used for this mnemonic. If no password is used this\r\n     *  is the empty string (i.e. ``\"\"``) as per the specification.\r\n     */\r\n    password;\r\n    /**\r\n     *  The wordlist for this mnemonic.\r\n     */\r\n    wordlist;\r\n    /**\r\n     *  The underlying entropy which the mnemonic encodes.\r\n     */\r\n    entropy;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, entropy, phrase, password, wordlist) {\r\n        if (password == null) {\r\n            password = \"\";\r\n        }\r\n        if (wordlist == null) {\r\n            wordlist = LangEn.wordlist();\r\n        }\r\n        assertPrivate(guard, _guard, \"Mnemonic\");\r\n        defineProperties(this, { phrase, password, wordlist, entropy });\r\n    }\r\n    /**\r\n     *  Returns the seed for the mnemonic.\r\n     */\r\n    computeSeed() {\r\n        const salt = toUtf8Bytes(\"mnemonic\" + this.password, \"NFKD\");\r\n        return pbkdf2(toUtf8Bytes(this.phrase, \"NFKD\"), salt, 2048, 64, \"sha512\");\r\n    }\r\n    /**\r\n     *  Creates a new Mnemonic for the %%phrase%%.\r\n     *\r\n     *  The default %%password%% is the empty string and the default\r\n     *  wordlist is the [English wordlists](LangEn).\r\n     */\r\n    static fromPhrase(phrase, password, wordlist) {\r\n        // Normalize the case and space; throws if invalid\r\n        const entropy = mnemonicToEntropy(phrase, wordlist);\r\n        phrase = entropyToMnemonic(getBytes(entropy), wordlist);\r\n        return new Mnemonic(_guard, entropy, phrase, password, wordlist);\r\n    }\r\n    /**\r\n     *  Create a new **Mnemonic** from the %%entropy%%.\r\n     *\r\n     *  The default %%password%% is the empty string and the default\r\n     *  wordlist is the [English wordlists](LangEn).\r\n     */\r\n    static fromEntropy(_entropy, password, wordlist) {\r\n        const entropy = getBytes(_entropy, \"entropy\");\r\n        const phrase = entropyToMnemonic(entropy, wordlist);\r\n        return new Mnemonic(_guard, hexlify(entropy), phrase, password, wordlist);\r\n    }\r\n    /**\r\n     *  Returns the phrase for %%mnemonic%%.\r\n     */\r\n    static entropyToPhrase(_entropy, wordlist) {\r\n        const entropy = getBytes(_entropy, \"entropy\");\r\n        return entropyToMnemonic(entropy, wordlist);\r\n    }\r\n    /**\r\n     *  Returns the entropy for %%phrase%%.\r\n     */\r\n    static phraseToEntropy(phrase, wordlist) {\r\n        return mnemonicToEntropy(phrase, wordlist);\r\n    }\r\n    /**\r\n     *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.\r\n     *\r\n     *  This checks all the provided words belong to the %%wordlist%%,\r\n     *  that the length is valid and the checksum is correct.\r\n     */\r\n    static isValidMnemonic(phrase, wordlist) {\r\n        try {\r\n            mnemonicToEntropy(phrase, wordlist);\r\n            return true;\r\n        }\r\n        catch (error) { }\r\n        return false;\r\n    }\r\n}\r\n//# sourceMappingURL=mnemonic.js.map","/*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar _AES_key, _AES_Kd, _AES_Ke;\r\n// Number of rounds by keysize\r\nconst numberOfRounds = { 16: 10, 24: 12, 32: 14 };\r\n// Round constant words\r\nconst rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\r\n// S-box and Inverse S-box (S is for Substitution)\r\nconst S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\r\nconst Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\r\n// Transformations for encryption\r\nconst T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\r\nconst T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\r\nconst T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\r\nconst T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\r\n// Transformations for decryption\r\nconst T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\r\nconst T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\r\nconst T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\r\nconst T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\r\n// Transformations for decryption key expansion\r\nconst U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\r\nconst U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\r\nconst U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\r\nconst U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\r\nfunction convertToInt32(bytes) {\r\n    const result = [];\r\n    for (let i = 0; i < bytes.length; i += 4) {\r\n        result.push((bytes[i] << 24) | (bytes[i + 1] << 16) | (bytes[i + 2] << 8) | bytes[i + 3]);\r\n    }\r\n    return result;\r\n}\r\nexport class AES {\r\n    get key() { return __classPrivateFieldGet(this, _AES_key, \"f\").slice(); }\r\n    constructor(key) {\r\n        _AES_key.set(this, void 0);\r\n        _AES_Kd.set(this, void 0);\r\n        _AES_Ke.set(this, void 0);\r\n        if (!(this instanceof AES)) {\r\n            throw Error('AES must be instanitated with `new`');\r\n        }\r\n        __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), \"f\");\r\n        const rounds = numberOfRounds[this.key.length];\r\n        if (rounds == null) {\r\n            throw new TypeError('invalid key size (must be 16, 24 or 32 bytes)');\r\n        }\r\n        // encryption round keys\r\n        __classPrivateFieldSet(this, _AES_Ke, [], \"f\");\r\n        // decryption round keys\r\n        __classPrivateFieldSet(this, _AES_Kd, [], \"f\");\r\n        for (let i = 0; i <= rounds; i++) {\r\n            __classPrivateFieldGet(this, _AES_Ke, \"f\").push([0, 0, 0, 0]);\r\n            __classPrivateFieldGet(this, _AES_Kd, \"f\").push([0, 0, 0, 0]);\r\n        }\r\n        const roundKeyCount = (rounds + 1) * 4;\r\n        const KC = this.key.length / 4;\r\n        // convert the key into ints\r\n        const tk = convertToInt32(this.key);\r\n        // copy values into round key arrays\r\n        let index;\r\n        for (let i = 0; i < KC; i++) {\r\n            index = i >> 2;\r\n            __classPrivateFieldGet(this, _AES_Ke, \"f\")[index][i % 4] = tk[i];\r\n            __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - index][i % 4] = tk[i];\r\n        }\r\n        // key expansion (fips-197 section 5.2)\r\n        let rconpointer = 0;\r\n        let t = KC, tt;\r\n        while (t < roundKeyCount) {\r\n            tt = tk[KC - 1];\r\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\r\n                (S[(tt >> 8) & 0xFF] << 16) ^\r\n                (S[tt & 0xFF] << 8) ^\r\n                S[(tt >> 24) & 0xFF] ^\r\n                (rcon[rconpointer] << 24));\r\n            rconpointer += 1;\r\n            // key expansion (for non-256 bit)\r\n            if (KC != 8) {\r\n                for (let i = 1; i < KC; i++) {\r\n                    tk[i] ^= tk[i - 1];\r\n                }\r\n                // key expansion for 256-bit keys is \"slightly different\" (fips-197)\r\n            }\r\n            else {\r\n                for (let i = 1; i < (KC / 2); i++) {\r\n                    tk[i] ^= tk[i - 1];\r\n                }\r\n                tt = tk[(KC / 2) - 1];\r\n                tk[KC / 2] ^= (S[tt & 0xFF] ^\r\n                    (S[(tt >> 8) & 0xFF] << 8) ^\r\n                    (S[(tt >> 16) & 0xFF] << 16) ^\r\n                    (S[(tt >> 24) & 0xFF] << 24));\r\n                for (let i = (KC / 2) + 1; i < KC; i++) {\r\n                    tk[i] ^= tk[i - 1];\r\n                }\r\n            }\r\n            // copy values into round key arrays\r\n            let i = 0, r, c;\r\n            while (i < KC && t < roundKeyCount) {\r\n                r = t >> 2;\r\n                c = t % 4;\r\n                __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][c] = tk[i];\r\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds - r][c] = tk[i++];\r\n                t++;\r\n            }\r\n        }\r\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\r\n        for (let r = 1; r < rounds; r++) {\r\n            for (let c = 0; c < 4; c++) {\r\n                tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c];\r\n                __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][c] = (U1[(tt >> 24) & 0xFF] ^\r\n                    U2[(tt >> 16) & 0xFF] ^\r\n                    U3[(tt >> 8) & 0xFF] ^\r\n                    U4[tt & 0xFF]);\r\n            }\r\n        }\r\n    }\r\n    encrypt(plaintext) {\r\n        if (plaintext.length != 16) {\r\n            throw new TypeError('invalid plaintext size (must be 16 bytes)');\r\n        }\r\n        const rounds = __classPrivateFieldGet(this, _AES_Ke, \"f\").length - 1;\r\n        const a = [0, 0, 0, 0];\r\n        // convert plaintext to (ints ^ key)\r\n        let t = convertToInt32(plaintext);\r\n        for (let i = 0; i < 4; i++) {\r\n            t[i] ^= __classPrivateFieldGet(this, _AES_Ke, \"f\")[0][i];\r\n        }\r\n        // apply round transforms\r\n        for (let r = 1; r < rounds; r++) {\r\n            for (let i = 0; i < 4; i++) {\r\n                a[i] = (T1[(t[i] >> 24) & 0xff] ^\r\n                    T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\r\n                    T3[(t[(i + 2) % 4] >> 8) & 0xff] ^\r\n                    T4[t[(i + 3) % 4] & 0xff] ^\r\n                    __classPrivateFieldGet(this, _AES_Ke, \"f\")[r][i]);\r\n            }\r\n            t = a.slice();\r\n        }\r\n        // the last round is special\r\n        const result = new Uint8Array(16);\r\n        let tt = 0;\r\n        for (let i = 0; i < 4; i++) {\r\n            tt = __classPrivateFieldGet(this, _AES_Ke, \"f\")[rounds][i];\r\n            result[4 * i] = (S[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\r\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\r\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;\r\n            result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\r\n        }\r\n        return result;\r\n    }\r\n    decrypt(ciphertext) {\r\n        if (ciphertext.length != 16) {\r\n            throw new TypeError('invalid ciphertext size (must be 16 bytes)');\r\n        }\r\n        const rounds = __classPrivateFieldGet(this, _AES_Kd, \"f\").length - 1;\r\n        const a = [0, 0, 0, 0];\r\n        // convert plaintext to (ints ^ key)\r\n        let t = convertToInt32(ciphertext);\r\n        for (let i = 0; i < 4; i++) {\r\n            t[i] ^= __classPrivateFieldGet(this, _AES_Kd, \"f\")[0][i];\r\n        }\r\n        // apply round transforms\r\n        for (let r = 1; r < rounds; r++) {\r\n            for (let i = 0; i < 4; i++) {\r\n                a[i] = (T5[(t[i] >> 24) & 0xff] ^\r\n                    T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\r\n                    T7[(t[(i + 2) % 4] >> 8) & 0xff] ^\r\n                    T8[t[(i + 1) % 4] & 0xff] ^\r\n                    __classPrivateFieldGet(this, _AES_Kd, \"f\")[r][i]);\r\n            }\r\n            t = a.slice();\r\n        }\r\n        // the last round is special\r\n        const result = new Uint8Array(16);\r\n        let tt = 0;\r\n        for (let i = 0; i < 4; i++) {\r\n            tt = __classPrivateFieldGet(this, _AES_Kd, \"f\")[rounds][i];\r\n            result[4 * i] = (Si[(t[i] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\r\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\r\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >> 8) & 0xff] ^ (tt >> 8)) & 0xff;\r\n            result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n_AES_key = new WeakMap(), _AES_Kd = new WeakMap(), _AES_Ke = new WeakMap();\r\n//# sourceMappingURL=aes.js.map","import { AES } from \"./aes.js\";\r\nexport class ModeOfOperation {\r\n    constructor(name, key, cls) {\r\n        if (cls && !(this instanceof cls)) {\r\n            throw new Error(`${name} must be instantiated with \"new\"`);\r\n        }\r\n        Object.defineProperties(this, {\r\n            aes: { enumerable: true, value: new AES(key) },\r\n            name: { enumerable: true, value: name }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=mode.js.map","// Cipher Block Chaining\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _CBC_iv, _CBC_lastBlock;\r\nimport { ModeOfOperation } from \"./mode.js\";\r\nexport class CBC extends ModeOfOperation {\r\n    constructor(key, iv) {\r\n        super(\"ECC\", key, CBC);\r\n        _CBC_iv.set(this, void 0);\r\n        _CBC_lastBlock.set(this, void 0);\r\n        if (iv) {\r\n            if (iv.length % 16) {\r\n                throw new TypeError(\"invalid iv size (must be 16 bytes)\");\r\n            }\r\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(iv), \"f\");\r\n        }\r\n        else {\r\n            __classPrivateFieldSet(this, _CBC_iv, new Uint8Array(16), \"f\");\r\n        }\r\n        __classPrivateFieldSet(this, _CBC_lastBlock, this.iv, \"f\");\r\n    }\r\n    get iv() { return new Uint8Array(__classPrivateFieldGet(this, _CBC_iv, \"f\")); }\r\n    encrypt(plaintext) {\r\n        if (plaintext.length % 16) {\r\n            throw new TypeError(\"invalid plaintext size (must be multiple of 16 bytes)\");\r\n        }\r\n        const ciphertext = new Uint8Array(plaintext.length);\r\n        for (let i = 0; i < plaintext.length; i += 16) {\r\n            for (let j = 0; j < 16; j++) {\r\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] ^= plaintext[i + j];\r\n            }\r\n            __classPrivateFieldSet(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\")), \"f\");\r\n            ciphertext.set(__classPrivateFieldGet(this, _CBC_lastBlock, \"f\"), i);\r\n        }\r\n        return ciphertext;\r\n    }\r\n    decrypt(ciphertext) {\r\n        if (ciphertext.length % 16) {\r\n            throw new TypeError(\"invalid ciphertext size (must be multiple of 16 bytes)\");\r\n        }\r\n        const plaintext = new Uint8Array(ciphertext.length);\r\n        for (let i = 0; i < ciphertext.length; i += 16) {\r\n            const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));\r\n            for (let j = 0; j < 16; j++) {\r\n                plaintext[i + j] = block[j] ^ __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j];\r\n                __classPrivateFieldGet(this, _CBC_lastBlock, \"f\")[j] = ciphertext[i + j];\r\n            }\r\n        }\r\n        return plaintext;\r\n    }\r\n}\r\n_CBC_iv = new WeakMap(), _CBC_lastBlock = new WeakMap();\r\n//# sourceMappingURL=mode-cbc.js.map","// Counter Mode\r\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n};\r\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n};\r\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\r\nimport { ModeOfOperation } from \"./mode.js\";\r\nexport class CTR extends ModeOfOperation {\r\n    constructor(key, initialValue) {\r\n        super(\"CTR\", key, CTR);\r\n        // Remaining bytes for the one-time pad\r\n        _CTR_remaining.set(this, void 0);\r\n        _CTR_remainingIndex.set(this, void 0);\r\n        // The current counter\r\n        _CTR_counter.set(this, void 0);\r\n        __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), \"f\");\r\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").fill(0);\r\n        __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\r\n        __classPrivateFieldSet(this, _CTR_remainingIndex, 16, \"f\");\r\n        if (initialValue == null) {\r\n            initialValue = 1;\r\n        }\r\n        if (typeof (initialValue) === \"number\") {\r\n            this.setCounterValue(initialValue);\r\n        }\r\n        else {\r\n            this.setCounterBytes(initialValue);\r\n        }\r\n    }\r\n    get counter() { return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\")); }\r\n    setCounterValue(value) {\r\n        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\r\n            throw new TypeError(\"invalid counter initial integer value\");\r\n        }\r\n        for (let index = 15; index >= 0; --index) {\r\n            __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\r\n            value = Math.floor(value / 256);\r\n        }\r\n    }\r\n    setCounterBytes(value) {\r\n        if (value.length !== 16) {\r\n            throw new TypeError(\"invalid counter initial Uint8Array value length\");\r\n        }\r\n        __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\r\n    }\r\n    increment() {\r\n        for (let i = 15; i >= 0; i--) {\r\n            if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\r\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\r\n            }\r\n            else {\r\n                __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    encrypt(plaintext) {\r\n        var _a, _b;\r\n        const crypttext = new Uint8Array(plaintext);\r\n        for (let i = 0; i < crypttext.length; i++) {\r\n            if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\r\n                __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\r\n                __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\r\n                this.increment();\r\n            }\r\n            crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a];\r\n        }\r\n        return crypttext;\r\n    }\r\n    decrypt(ciphertext) {\r\n        return this.encrypt(ciphertext);\r\n    }\r\n}\r\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();\r\n//# sourceMappingURL=mode-ctr.js.map","export function pkcs7Pad(data) {\r\n    const padder = 16 - (data.length % 16);\r\n    const result = new Uint8Array(data.length + padder);\r\n    result.set(data);\r\n    for (let i = data.length; i < result.length; i++) {\r\n        result[i] = padder;\r\n    }\r\n    return result;\r\n}\r\nexport function pkcs7Strip(data) {\r\n    if (data.length < 16) {\r\n        throw new TypeError('PKCS#7 invalid length');\r\n    }\r\n    const padder = data[data.length - 1];\r\n    if (padder > 16) {\r\n        throw new TypeError('PKCS#7 padding byte out of range');\r\n    }\r\n    const length = data.length - padder;\r\n    for (let i = 0; i < padder; i++) {\r\n        if (data[length + i] !== padder) {\r\n            throw new TypeError('PKCS#7 invalid padding byte');\r\n        }\r\n    }\r\n    return new Uint8Array(data.subarray(0, length));\r\n}\r\n//# sourceMappingURL=padding.js.map","/**\r\n *  @_ignore\r\n */\r\nimport { getBytesCopy, assertArgument, toUtf8Bytes } from \"../utils/index.js\";\r\nexport function looseArrayify(hexString) {\r\n    if (typeof (hexString) === \"string\" && !hexString.startsWith(\"0x\")) {\r\n        hexString = \"0x\" + hexString;\r\n    }\r\n    return getBytesCopy(hexString);\r\n}\r\nexport function zpad(value, length) {\r\n    value = String(value);\r\n    while (value.length < length) {\r\n        value = '0' + value;\r\n    }\r\n    return value;\r\n}\r\nexport function getPassword(password) {\r\n    if (typeof (password) === 'string') {\r\n        return toUtf8Bytes(password, \"NFKC\");\r\n    }\r\n    return getBytesCopy(password);\r\n}\r\nexport function spelunk(object, _path) {\r\n    const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);\r\n    assertArgument(match != null, \"invalid path\", \"path\", _path);\r\n    const path = match[1];\r\n    const type = match[3];\r\n    const reqd = (match[4] === \"!\");\r\n    let cur = object;\r\n    for (const comp of path.toLowerCase().split('.')) {\r\n        // Search for a child object with a case-insensitive matching key\r\n        if (Array.isArray(cur)) {\r\n            if (!comp.match(/^[0-9]+$/)) {\r\n                break;\r\n            }\r\n            cur = cur[parseInt(comp)];\r\n        }\r\n        else if (typeof (cur) === \"object\") {\r\n            let found = null;\r\n            for (const key in cur) {\r\n                if (key.toLowerCase() === comp) {\r\n                    found = cur[key];\r\n                    break;\r\n                }\r\n            }\r\n            cur = found;\r\n        }\r\n        else {\r\n            cur = null;\r\n        }\r\n        if (cur == null) {\r\n            break;\r\n        }\r\n    }\r\n    assertArgument(!reqd || cur != null, \"missing required value\", \"path\", path);\r\n    if (type && cur != null) {\r\n        if (type === \"int\") {\r\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9]+$/)) {\r\n                return parseInt(cur);\r\n            }\r\n            else if (Number.isSafeInteger(cur)) {\r\n                return cur;\r\n            }\r\n        }\r\n        if (type === \"number\") {\r\n            if (typeof (cur) === \"string\" && cur.match(/^-?[0-9.]*$/)) {\r\n                return parseFloat(cur);\r\n            }\r\n        }\r\n        if (type === \"data\") {\r\n            if (typeof (cur) === \"string\") {\r\n                return looseArrayify(cur);\r\n            }\r\n        }\r\n        if (type === \"array\" && Array.isArray(cur)) {\r\n            return cur;\r\n        }\r\n        if (type === typeof (cur)) {\r\n            return cur;\r\n        }\r\n        assertArgument(false, `wrong type found for ${type} `, \"path\", path);\r\n    }\r\n    return cur;\r\n}\r\n/*\r\nexport function follow(object: any, path: string): null | string {\r\n    let currentChild = object;\r\n\r\n    for (const comp of path.toLowerCase().split('/')) {\r\n\r\n        // Search for a child object with a case-insensitive matching key\r\n        let matchingChild = null;\r\n        for (const key in currentChild) {\r\n             if (key.toLowerCase() === comp) {\r\n                 matchingChild = currentChild[key];\r\n                 break;\r\n             }\r\n        }\r\n\r\n        if (matchingChild === null) { return null; }\r\n\r\n        currentChild = matchingChild;\r\n    }\r\n\r\n    return currentChild;\r\n}\r\n\r\n// \"path/to/something:type!\"\r\nexport function followRequired(data: any, path: string): string {\r\n    const value = follow(data, path);\r\n    if (value != null) { return value; }\r\n    return logger.throwArgumentError(\"invalid value\", `data:${ path }`,\r\n    JSON.stringify(data));\r\n}\r\n*/\r\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\r\n/*\r\nexport function uuidV4(randomBytes: BytesLike): string {\r\n    const bytes = getBytes(randomBytes, \"randomBytes\");\r\n\r\n    // Section: 4.1.3:\r\n    // - time_hi_and_version[12:16] = 0b0100\r\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\r\n\r\n    // Section 4.4\r\n    // - clock_seq_hi_and_reserved[6] = 0b0\r\n    // - clock_seq_hi_and_reserved[7] = 0b1\r\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\r\n\r\n    const value = hexlify(bytes);\r\n\r\n    return [\r\n       value.substring(2, 10),\r\n       value.substring(10, 14),\r\n       value.substring(14, 18),\r\n       value.substring(18, 22),\r\n       value.substring(22, 34),\r\n    ].join(\"-\");\r\n}\r\n*/\r\n//# sourceMappingURL=utils.js.map","/**\r\n *  The JSON Wallet formats allow a simple way to store the private\r\n *  keys needed in Ethereum along with related information and allows\r\n *  for extensible forms of encryption.\r\n *\r\n *  These utilities facilitate decrypting and encrypting the most common\r\n *  JSON Wallet formats.\r\n *\r\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\r\n */\r\nimport { CTR } from \"aes-js\";\r\nimport { getAddress } from \"../address/index.js\";\r\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\r\nimport { computeAddress } from \"../transaction/index.js\";\r\nimport { concat, getBytes, hexlify, uuidV4, assert, assertArgument } from \"../utils/index.js\";\r\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\r\nimport { version } from \"../_version.js\";\r\nconst defaultPath = \"m/44'/60'/0'/0/0\";\r\n/**\r\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\r\n */\r\nexport function isKeystoreJson(json) {\r\n    try {\r\n        const data = JSON.parse(json);\r\n        const version = ((data.version != null) ? parseInt(data.version) : 0);\r\n        if (version === 3) {\r\n            return true;\r\n        }\r\n    }\r\n    catch (error) { }\r\n    return false;\r\n}\r\nfunction decrypt(data, key, ciphertext) {\r\n    const cipher = spelunk(data, \"crypto.cipher:string\");\r\n    if (cipher === \"aes-128-ctr\") {\r\n        const iv = spelunk(data, \"crypto.cipherparams.iv:data!\");\r\n        const aesCtr = new CTR(key, iv);\r\n        return hexlify(aesCtr.decrypt(ciphertext));\r\n    }\r\n    assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\r\n        operation: \"decrypt\"\r\n    });\r\n}\r\nfunction getAccount(data, _key) {\r\n    const key = getBytes(_key);\r\n    const ciphertext = spelunk(data, \"crypto.ciphertext:data!\");\r\n    const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);\r\n    assertArgument(computedMAC === spelunk(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\r\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\r\n    const address = computeAddress(privateKey);\r\n    if (data.address) {\r\n        let check = data.address.toLowerCase();\r\n        if (!check.startsWith(\"0x\")) {\r\n            check = \"0x\" + check;\r\n        }\r\n        assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\r\n    }\r\n    const account = { address, privateKey };\r\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\r\n    const version = spelunk(data, \"x-ethers.version:string\");\r\n    if (version === \"0.1\") {\r\n        const mnemonicKey = key.slice(32, 64);\r\n        const mnemonicCiphertext = spelunk(data, \"x-ethers.mnemonicCiphertext:data!\");\r\n        const mnemonicIv = spelunk(data, \"x-ethers.mnemonicCounter:data!\");\r\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\r\n        account.mnemonic = {\r\n            path: (spelunk(data, \"x-ethers.path:string\") || defaultPath),\r\n            locale: (spelunk(data, \"x-ethers.locale:string\") || \"en\"),\r\n            entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\r\n        };\r\n    }\r\n    return account;\r\n}\r\nfunction getDecryptKdfParams(data) {\r\n    const kdf = spelunk(data, \"crypto.kdf:string\");\r\n    if (kdf && typeof (kdf) === \"string\") {\r\n        if (kdf.toLowerCase() === \"scrypt\") {\r\n            const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\r\n            const N = spelunk(data, \"crypto.kdfparams.n:int!\");\r\n            const r = spelunk(data, \"crypto.kdfparams.r:int!\");\r\n            const p = spelunk(data, \"crypto.kdfparams.p:int!\");\r\n            // Make sure N is a power of 2\r\n            assertArgument(N > 0 && (N & (N - 1)) === 0, \"invalid kdf.N\", \"kdf.N\", N);\r\n            assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\r\n            const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\r\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\r\n            return { name: \"scrypt\", salt, N, r, p, dkLen: 64 };\r\n        }\r\n        else if (kdf.toLowerCase() === \"pbkdf2\") {\r\n            const salt = spelunk(data, \"crypto.kdfparams.salt:data!\");\r\n            const prf = spelunk(data, \"crypto.kdfparams.prf:string!\");\r\n            const algorithm = prf.split(\"-\").pop();\r\n            assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\r\n            const count = spelunk(data, \"crypto.kdfparams.c:int!\");\r\n            const dkLen = spelunk(data, \"crypto.kdfparams.dklen:int!\");\r\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\r\n            return { name: \"pbkdf2\", salt, count, dkLen, algorithm };\r\n        }\r\n    }\r\n    assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\r\n}\r\n/**\r\n *  Returns the account details for the JSON Keystore Wallet %%json%%\r\n *  using %%password%%.\r\n *\r\n *  It is preferred to use the [async version](decryptKeystoreJson)\r\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\r\n *  as to the decryption status.\r\n *\r\n *  This method will block the event loop (freezing all UI) until decryption\r\n *  is complete, which can take quite some time, depending on the wallet\r\n *  paramters and platform.\r\n */\r\nexport function decryptKeystoreJsonSync(json, _password) {\r\n    const data = JSON.parse(json);\r\n    const password = getPassword(_password);\r\n    const params = getDecryptKdfParams(data);\r\n    if (params.name === \"pbkdf2\") {\r\n        const { salt, count, dkLen, algorithm } = params;\r\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\r\n        return getAccount(data, key);\r\n    }\r\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params });\r\n    const { salt, N, r, p, dkLen } = params;\r\n    const key = scryptSync(password, salt, N, r, p, dkLen);\r\n    return getAccount(data, key);\r\n}\r\nfunction stall(duration) {\r\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\r\n}\r\n/**\r\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\r\n *  %%password%%.\r\n *\r\n *  If provided, %%progress%% will be called periodically during the\r\n *  decrpytion to provide feedback, and if the function returns\r\n *  ``false`` will halt decryption.\r\n *\r\n *  The %%progressCallback%% will **always** receive ``0`` before\r\n *  decryption begins and ``1`` when complete.\r\n */\r\nexport async function decryptKeystoreJson(json, _password, progress) {\r\n    const data = JSON.parse(json);\r\n    const password = getPassword(_password);\r\n    const params = getDecryptKdfParams(data);\r\n    if (params.name === \"pbkdf2\") {\r\n        if (progress) {\r\n            progress(0);\r\n            await stall(0);\r\n        }\r\n        const { salt, count, dkLen, algorithm } = params;\r\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\r\n        if (progress) {\r\n            progress(1);\r\n            await stall(0);\r\n        }\r\n        return getAccount(data, key);\r\n    }\r\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params });\r\n    const { salt, N, r, p, dkLen } = params;\r\n    const key = await scrypt(password, salt, N, r, p, dkLen, progress);\r\n    return getAccount(data, key);\r\n}\r\nfunction getEncryptKdfParams(options) {\r\n    // Check/generate the salt\r\n    const salt = (options.salt != null) ? getBytes(options.salt, \"options.salt\") : randomBytes(32);\r\n    // Override the scrypt password-based key derivation function parameters\r\n    let N = (1 << 17), r = 8, p = 1;\r\n    if (options.scrypt) {\r\n        if (options.scrypt.N) {\r\n            N = options.scrypt.N;\r\n        }\r\n        if (options.scrypt.r) {\r\n            r = options.scrypt.r;\r\n        }\r\n        if (options.scrypt.p) {\r\n            p = options.scrypt.p;\r\n        }\r\n    }\r\n    assertArgument(typeof (N) === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\r\n    assertArgument(typeof (r) === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\r\n    assertArgument(typeof (p) === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\r\n    return { name: \"scrypt\", dkLen: 32, salt, N, r, p };\r\n}\r\nfunction _encryptKeystore(key, kdf, account, options) {\r\n    const privateKey = getBytes(account.privateKey, \"privateKey\");\r\n    // Override initialization vector\r\n    const iv = (options.iv != null) ? getBytes(options.iv, \"options.iv\") : randomBytes(16);\r\n    assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\r\n    // Override the uuid\r\n    const uuidRandom = (options.uuid != null) ? getBytes(options.uuid, \"options.uuid\") : randomBytes(16);\r\n    assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\r\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\r\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\r\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\r\n    const derivedKey = key.slice(0, 16);\r\n    const macPrefix = key.slice(16, 32);\r\n    // Encrypt the private key\r\n    const aesCtr = new CTR(derivedKey, iv);\r\n    const ciphertext = getBytes(aesCtr.encrypt(privateKey));\r\n    // Compute the message authentication code, used to check the password\r\n    const mac = keccak256(concat([macPrefix, ciphertext]));\r\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\r\n    const data = {\r\n        address: account.address.substring(2).toLowerCase(),\r\n        id: uuidV4(uuidRandom),\r\n        version: 3,\r\n        Crypto: {\r\n            cipher: \"aes-128-ctr\",\r\n            cipherparams: {\r\n                iv: hexlify(iv).substring(2),\r\n            },\r\n            ciphertext: hexlify(ciphertext).substring(2),\r\n            kdf: \"scrypt\",\r\n            kdfparams: {\r\n                salt: hexlify(kdf.salt).substring(2),\r\n                n: kdf.N,\r\n                dklen: 32,\r\n                p: kdf.p,\r\n                r: kdf.r\r\n            },\r\n            mac: mac.substring(2)\r\n        }\r\n    };\r\n    // If we have a mnemonic, encrypt it into the JSON wallet\r\n    if (account.mnemonic) {\r\n        const client = (options.client != null) ? options.client : `ethers/${version}`;\r\n        const path = account.mnemonic.path || defaultPath;\r\n        const locale = account.mnemonic.locale || \"en\";\r\n        const mnemonicKey = key.slice(32, 64);\r\n        const entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\r\n        const mnemonicIv = randomBytes(16);\r\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\r\n        const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\r\n        const now = new Date();\r\n        const timestamp = (now.getUTCFullYear() + \"-\" +\r\n            zpad(now.getUTCMonth() + 1, 2) + \"-\" +\r\n            zpad(now.getUTCDate(), 2) + \"T\" +\r\n            zpad(now.getUTCHours(), 2) + \"-\" +\r\n            zpad(now.getUTCMinutes(), 2) + \"-\" +\r\n            zpad(now.getUTCSeconds(), 2) + \".0Z\");\r\n        const gethFilename = (\"UTC--\" + timestamp + \"--\" + data.address);\r\n        data[\"x-ethers\"] = {\r\n            client, gethFilename, path, locale,\r\n            mnemonicCounter: hexlify(mnemonicIv).substring(2),\r\n            mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\r\n            version: \"0.1\"\r\n        };\r\n    }\r\n    return JSON.stringify(data);\r\n}\r\n/**\r\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\r\n *  %%password%%.\r\n *\r\n *  The %%options%% can be used to tune the password-based key\r\n *  derivation function parameters, explicitly set the random values\r\n *  used. Any provided [[ProgressCallback]] is ignord.\r\n */\r\nexport function encryptKeystoreJsonSync(account, password, options) {\r\n    if (options == null) {\r\n        options = {};\r\n    }\r\n    const passwordBytes = getPassword(password);\r\n    const kdf = getEncryptKdfParams(options);\r\n    const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\r\n    return _encryptKeystore(getBytes(key), kdf, account, options);\r\n}\r\n/**\r\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\r\n *  with %%password%%.\r\n *\r\n *  The %%options%% can be used to tune the password-based key\r\n *  derivation function parameters, explicitly set the random values\r\n *  used and provide a [[ProgressCallback]] to receive periodic updates\r\n *  on the completion status..\r\n */\r\nexport async function encryptKeystoreJson(account, password, options) {\r\n    if (options == null) {\r\n        options = {};\r\n    }\r\n    const passwordBytes = getPassword(password);\r\n    const kdf = getEncryptKdfParams(options);\r\n    const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\r\n    return _encryptKeystore(getBytes(key), kdf, account, options);\r\n}\r\n//# sourceMappingURL=json-keystore.js.map","/**\r\n *  Explain HD Wallets..\r\n *\r\n *  @_subsection: api/wallet:HD Wallets  [hd-wallets]\r\n */\r\nimport { computeHmac, randomBytes, ripemd160, SigningKey, sha256 } from \"../crypto/index.js\";\r\nimport { VoidSigner } from \"../providers/index.js\";\r\nimport { computeAddress } from \"../transaction/index.js\";\r\nimport { concat, dataSlice, decodeBase58, defineProperties, encodeBase58, getBytes, hexlify, isBytesLike, getNumber, toBeArray, toBigInt, toBeHex, assertPrivate, assert, assertArgument } from \"../utils/index.js\";\r\nimport { LangEn } from \"../wordlists/lang-en.js\";\r\nimport { BaseWallet } from \"./base-wallet.js\";\r\nimport { Mnemonic } from \"./mnemonic.js\";\r\nimport { encryptKeystoreJson, encryptKeystoreJsonSync, } from \"./json-keystore.js\";\r\n/**\r\n *  The default derivation path for Ethereum HD Nodes. (i.e. ``\"m/44'/60'/0'/0/0\"``)\r\n */\r\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\r\n// \"Bitcoin seed\"\r\nconst MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);\r\nconst HardenedBit = 0x80000000;\r\nconst N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\r\nconst Nibbles = \"0123456789abcdef\";\r\nfunction zpad(value, length) {\r\n    let result = \"\";\r\n    while (value) {\r\n        result = Nibbles[value % 16] + result;\r\n        value = Math.trunc(value / 16);\r\n    }\r\n    while (result.length < length * 2) {\r\n        result = \"0\" + result;\r\n    }\r\n    return \"0x\" + result;\r\n}\r\nfunction encodeBase58Check(_value) {\r\n    const value = getBytes(_value);\r\n    const check = dataSlice(sha256(sha256(value)), 0, 4);\r\n    const bytes = concat([value, check]);\r\n    return encodeBase58(bytes);\r\n}\r\nconst _guard = {};\r\nfunction ser_I(index, chainCode, publicKey, privateKey) {\r\n    const data = new Uint8Array(37);\r\n    if (index & HardenedBit) {\r\n        assert(privateKey != null, \"cannot derive child of neutered node\", \"UNSUPPORTED_OPERATION\", {\r\n            operation: \"deriveChild\"\r\n        });\r\n        // Data = 0x00 || ser_256(k_par)\r\n        data.set(getBytes(privateKey), 1);\r\n    }\r\n    else {\r\n        // Data = ser_p(point(k_par))\r\n        data.set(getBytes(publicKey));\r\n    }\r\n    // Data += ser_32(i)\r\n    for (let i = 24; i >= 0; i -= 8) {\r\n        data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);\r\n    }\r\n    const I = getBytes(computeHmac(\"sha512\", chainCode, data));\r\n    return { IL: I.slice(0, 32), IR: I.slice(32) };\r\n}\r\nfunction derivePath(node, path) {\r\n    const components = path.split(\"/\");\r\n    assertArgument(components.length > 0, \"invalid path\", \"path\", path);\r\n    if (components[0] === \"m\") {\r\n        assertArgument(node.depth === 0, `cannot derive root path (i.e. path starting with \"m/\") for a node at non-zero depth ${node.depth}`, \"path\", path);\r\n        components.shift();\r\n    }\r\n    let result = node;\r\n    for (let i = 0; i < components.length; i++) {\r\n        const component = components[i];\r\n        if (component.match(/^[0-9]+'$/)) {\r\n            const index = parseInt(component.substring(0, component.length - 1));\r\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\r\n            result = result.deriveChild(HardenedBit + index);\r\n        }\r\n        else if (component.match(/^[0-9]+$/)) {\r\n            const index = parseInt(component);\r\n            assertArgument(index < HardenedBit, \"invalid path index\", `path[${i}]`, component);\r\n            result = result.deriveChild(index);\r\n        }\r\n        else {\r\n            assertArgument(false, \"invalid path component\", `path[${i}]`, component);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n *  An **HDNodeWallet** is a [[Signer]] backed by the private key derived\r\n *  from an HD Node using the [[link-bip-32]] stantard.\r\n *\r\n *  An HD Node forms a hierarchal structure with each HD Node having a\r\n *  private key and the ability to derive child HD Nodes, defined by\r\n *  a path indicating the index of each child.\r\n */\r\nexport class HDNodeWallet extends BaseWallet {\r\n    /**\r\n     *  The compressed public key.\r\n     */\r\n    publicKey;\r\n    /**\r\n     *  The fingerprint.\r\n     *\r\n     *  A fingerprint allows quick qay to detect parent and child nodes,\r\n     *  but developers should be prepared to deal with collisions as it\r\n     *  is only 4 bytes.\r\n     */\r\n    fingerprint;\r\n    /**\r\n     *  The parent fingerprint.\r\n     */\r\n    parentFingerprint;\r\n    /**\r\n     *  The mnemonic used to create this HD Node, if available.\r\n     *\r\n     *  Sources such as extended keys do not encode the mnemonic, in\r\n     *  which case this will be ``null``.\r\n     */\r\n    mnemonic;\r\n    /**\r\n     *  The chaincode, which is effectively a public key used\r\n     *  to derive children.\r\n     */\r\n    chainCode;\r\n    /**\r\n     *  The derivation path of this wallet.\r\n     *\r\n     *  Since extended keys do not provide full path details, this\r\n     *  may be ``null``, if instantiated from a source that does not\r\n     *  encode it.\r\n     */\r\n    path;\r\n    /**\r\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\r\n     *  the node is hardened.\r\n     */\r\n    index;\r\n    /**\r\n     *  The depth of this wallet, which is the number of components\r\n     *  in its path.\r\n     */\r\n    depth;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {\r\n        super(signingKey, provider);\r\n        assertPrivate(guard, _guard, \"HDNodeWallet\");\r\n        defineProperties(this, { publicKey: signingKey.compressedPublicKey });\r\n        const fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\r\n        defineProperties(this, {\r\n            parentFingerprint, fingerprint,\r\n            chainCode, path, index, depth\r\n        });\r\n        defineProperties(this, { mnemonic });\r\n    }\r\n    connect(provider) {\r\n        return new HDNodeWallet(_guard, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);\r\n    }\r\n    #account() {\r\n        const account = { address: this.address, privateKey: this.privateKey };\r\n        const m = this.mnemonic;\r\n        if (this.path && m && m.wordlist.locale === \"en\" && m.password === \"\") {\r\n            account.mnemonic = {\r\n                path: this.path,\r\n                locale: \"en\",\r\n                entropy: m.entropy\r\n            };\r\n        }\r\n        return account;\r\n    }\r\n    /**\r\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\r\n     *  %%password%%.\r\n     *\r\n     *  If %%progressCallback%% is specified, it will receive periodic\r\n     *  updates as the encryption process progreses.\r\n     */\r\n    async encrypt(password, progressCallback) {\r\n        return await encryptKeystoreJson(this.#account(), password, { progressCallback });\r\n    }\r\n    /**\r\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\r\n     *  %%password%%.\r\n     *\r\n     *  It is preferred to use the [async version](encrypt) instead,\r\n     *  which allows a [[ProgressCallback]] to keep the user informed.\r\n     *\r\n     *  This method will block the event loop (freezing all UI) until\r\n     *  it is complete, which may be a non-trivial duration.\r\n     */\r\n    encryptSync(password) {\r\n        return encryptKeystoreJsonSync(this.#account(), password);\r\n    }\r\n    /**\r\n     *  The extended key.\r\n     *\r\n     *  This key will begin with the prefix ``xpriv`` and can be used to\r\n     *  reconstruct this HD Node to derive its children.\r\n     */\r\n    get extendedKey() {\r\n        // We only support the mainnet values for now, but if anyone needs\r\n        // testnet values, let me know. I believe current sentiment is that\r\n        // we should always use mainnet, and use BIP-44 to derive the network\r\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\r\n        //   - Testnet: public=0x043587CF, private=0x04358394\r\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\r\n        return encodeBase58Check(concat([\r\n            \"0x0488ADE4\", zpad(this.depth, 1), this.parentFingerprint,\r\n            zpad(this.index, 4), this.chainCode,\r\n            concat([\"0x00\", this.privateKey])\r\n        ]));\r\n    }\r\n    /**\r\n     *  Returns true if this wallet has a path, providing a Type Guard\r\n     *  that the path is non-null.\r\n     */\r\n    hasPath() { return (this.path != null); }\r\n    /**\r\n     *  Returns a neutered HD Node, which removes the private details\r\n     *  of an HD Node.\r\n     *\r\n     *  A neutered node has no private key, but can be used to derive\r\n     *  child addresses and other public data about the HD Node.\r\n     */\r\n    neuter() {\r\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);\r\n    }\r\n    /**\r\n     *  Return the child for %%index%%.\r\n     */\r\n    deriveChild(_index) {\r\n        const index = getNumber(_index, \"index\");\r\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\r\n        // Base path\r\n        let path = this.path;\r\n        if (path) {\r\n            path += \"/\" + (index & ~HardenedBit);\r\n            if (index & HardenedBit) {\r\n                path += \"'\";\r\n            }\r\n        }\r\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);\r\n        const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N, 32));\r\n        return new HDNodeWallet(_guard, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);\r\n    }\r\n    /**\r\n     *  Return the HDNode for %%path%% from this node.\r\n     */\r\n    derivePath(path) {\r\n        return derivePath(this, path);\r\n    }\r\n    static #fromSeed(_seed, mnemonic) {\r\n        assertArgument(isBytesLike(_seed), \"invalid seed\", \"seed\", \"[REDACTED]\");\r\n        const seed = getBytes(_seed, \"seed\");\r\n        assertArgument(seed.length >= 16 && seed.length <= 64, \"invalid seed\", \"seed\", \"[REDACTED]\");\r\n        const I = getBytes(computeHmac(\"sha512\", MasterSecret, seed));\r\n        const signingKey = new SigningKey(hexlify(I.slice(0, 32)));\r\n        return new HDNodeWallet(_guard, signingKey, \"0x00000000\", hexlify(I.slice(32)), \"m\", 0, 0, mnemonic, null);\r\n    }\r\n    /**\r\n     *  Creates a new HD Node from %%extendedKey%%.\r\n     *\r\n     *  If the %%extendedKey%% will either have a prefix or ``xpub`` or\r\n     *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])\r\n     *  or full HD Node ([[HDNodeWallet) respectively.\r\n     */\r\n    static fromExtendedKey(extendedKey) {\r\n        const bytes = toBeArray(decodeBase58(extendedKey)); // @TODO: redact\r\n        assertArgument(bytes.length === 82 || encodeBase58Check(bytes.slice(0, 78)) === extendedKey, \"invalid extended key\", \"extendedKey\", \"[ REDACTED ]\");\r\n        const depth = bytes[4];\r\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\r\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\r\n        const chainCode = hexlify(bytes.slice(13, 45));\r\n        const key = bytes.slice(45, 78);\r\n        switch (hexlify(bytes.slice(0, 4))) {\r\n            // Public Key\r\n            case \"0x0488b21e\":\r\n            case \"0x043587cf\": {\r\n                const publicKey = hexlify(key);\r\n                return new HDNodeVoidWallet(_guard, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);\r\n            }\r\n            // Private Key\r\n            case \"0x0488ade4\":\r\n            case \"0x04358394 \":\r\n                if (key[0] !== 0) {\r\n                    break;\r\n                }\r\n                return new HDNodeWallet(_guard, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);\r\n        }\r\n        assertArgument(false, \"invalid extended key prefix\", \"extendedKey\", \"[ REDACTED ]\");\r\n    }\r\n    /**\r\n     *  Creates a new random HDNode.\r\n     */\r\n    static createRandom(password, path, wordlist) {\r\n        if (password == null) {\r\n            password = \"\";\r\n        }\r\n        if (path == null) {\r\n            path = defaultPath;\r\n        }\r\n        if (wordlist == null) {\r\n            wordlist = LangEn.wordlist();\r\n        }\r\n        const mnemonic = Mnemonic.fromEntropy(randomBytes(16), password, wordlist);\r\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\r\n    }\r\n    /**\r\n     *  Create an HD Node from %%mnemonic%%.\r\n     */\r\n    static fromMnemonic(mnemonic, path) {\r\n        if (!path) {\r\n            path = defaultPath;\r\n        }\r\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\r\n    }\r\n    /**\r\n     *  Creates an HD Node from a mnemonic %%phrase%%.\r\n     */\r\n    static fromPhrase(phrase, password, path, wordlist) {\r\n        if (password == null) {\r\n            password = \"\";\r\n        }\r\n        if (path == null) {\r\n            path = defaultPath;\r\n        }\r\n        if (wordlist == null) {\r\n            wordlist = LangEn.wordlist();\r\n        }\r\n        const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist);\r\n        return HDNodeWallet.#fromSeed(mnemonic.computeSeed(), mnemonic).derivePath(path);\r\n    }\r\n    /**\r\n     *  Creates an HD Node from a %%seed%%.\r\n     */\r\n    static fromSeed(seed) {\r\n        return HDNodeWallet.#fromSeed(seed, null);\r\n    }\r\n}\r\n/**\r\n *  A **HDNodeVoidWallet** cannot sign, but provides access to\r\n *  the children nodes of a [[link-bip-32]] HD wallet addresses.\r\n *\r\n *  The can be created by using an extended ``xpub`` key to\r\n *  [[HDNodeWallet_fromExtendedKey]] or by\r\n *  [nuetering](HDNodeWallet-neuter) a [[HDNodeWallet]].\r\n */\r\nexport class HDNodeVoidWallet extends VoidSigner {\r\n    /**\r\n     *  The compressed public key.\r\n     */\r\n    publicKey;\r\n    /**\r\n     *  The fingerprint.\r\n     *\r\n     *  A fingerprint allows quick qay to detect parent and child nodes,\r\n     *  but developers should be prepared to deal with collisions as it\r\n     *  is only 4 bytes.\r\n     */\r\n    fingerprint;\r\n    /**\r\n     *  The parent node fingerprint.\r\n     */\r\n    parentFingerprint;\r\n    /**\r\n     *  The chaincode, which is effectively a public key used\r\n     *  to derive children.\r\n     */\r\n    chainCode;\r\n    /**\r\n     *  The derivation path of this wallet.\r\n     *\r\n     *  Since extended keys do not provider full path details, this\r\n     *  may be ``null``, if instantiated from a source that does not\r\n     *  enocde it.\r\n     */\r\n    path;\r\n    /**\r\n     *  The child index of this wallet. Values over ``2 *\\* 31`` indicate\r\n     *  the node is hardened.\r\n     */\r\n    index;\r\n    /**\r\n     *  The depth of this wallet, which is the number of components\r\n     *  in its path.\r\n     */\r\n    depth;\r\n    /**\r\n     *  @private\r\n     */\r\n    constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {\r\n        super(address, provider);\r\n        assertPrivate(guard, _guard, \"HDNodeVoidWallet\");\r\n        defineProperties(this, { publicKey });\r\n        const fingerprint = dataSlice(ripemd160(sha256(publicKey)), 0, 4);\r\n        defineProperties(this, {\r\n            publicKey, fingerprint, parentFingerprint, chainCode, path, index, depth\r\n        });\r\n    }\r\n    connect(provider) {\r\n        return new HDNodeVoidWallet(_guard, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);\r\n    }\r\n    /**\r\n     *  The extended key.\r\n     *\r\n     *  This key will begin with the prefix ``xpub`` and can be used to\r\n     *  reconstruct this neutered key to derive its children addresses.\r\n     */\r\n    get extendedKey() {\r\n        // We only support the mainnet values for now, but if anyone needs\r\n        // testnet values, let me know. I believe current sentiment is that\r\n        // we should always use mainnet, and use BIP-44 to derive the network\r\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\r\n        //   - Testnet: public=0x043587CF, private=0x04358394\r\n        assert(this.depth < 256, \"Depth too deep\", \"UNSUPPORTED_OPERATION\", { operation: \"extendedKey\" });\r\n        return encodeBase58Check(concat([\r\n            \"0x0488B21E\",\r\n            zpad(this.depth, 1),\r\n            this.parentFingerprint,\r\n            zpad(this.index, 4),\r\n            this.chainCode,\r\n            this.publicKey,\r\n        ]));\r\n    }\r\n    /**\r\n     *  Returns true if this wallet has a path, providing a Type Guard\r\n     *  that the path is non-null.\r\n     */\r\n    hasPath() { return (this.path != null); }\r\n    /**\r\n     *  Return the child for %%index%%.\r\n     */\r\n    deriveChild(_index) {\r\n        const index = getNumber(_index, \"index\");\r\n        assertArgument(index <= 0xffffffff, \"invalid index\", \"index\", index);\r\n        // Base path\r\n        let path = this.path;\r\n        if (path) {\r\n            path += \"/\" + (index & ~HardenedBit);\r\n            if (index & HardenedBit) {\r\n                path += \"'\";\r\n            }\r\n        }\r\n        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);\r\n        const Ki = SigningKey.addPoints(IL, this.publicKey, true);\r\n        const address = computeAddress(Ki);\r\n        return new HDNodeVoidWallet(_guard, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);\r\n    }\r\n    /**\r\n     *  Return the signer for %%path%% from this node.\r\n     */\r\n    derivePath(path) {\r\n        return derivePath(this, path);\r\n    }\r\n}\r\n/*\r\nexport class HDNodeWalletManager {\r\n    #root: HDNodeWallet;\r\n\r\n    constructor(phrase: string, password?: null | string, path?: null | string, locale?: null | Wordlist) {\r\n        if (password == null) { password = \"\"; }\r\n        if (path == null) { path = \"m/44'/60'/0'/0\"; }\r\n        if (locale == null) { locale = LangEn.wordlist(); }\r\n        this.#root = HDNodeWallet.fromPhrase(phrase, password, path, locale);\r\n    }\r\n\r\n    getSigner(index?: number): HDNodeWallet {\r\n        return this.#root.deriveChild((index == null) ? 0: index);\r\n    }\r\n}\r\n*/\r\n/**\r\n *  Returns the [[link-bip-32]] path for the account at %%index%%.\r\n *\r\n *  This is the pattern used by wallets like Ledger.\r\n *\r\n *  There is also an [alternate pattern](getIndexedAccountPath) used by\r\n *  some software.\r\n */\r\nexport function getAccountPath(_index) {\r\n    const index = getNumber(_index, \"index\");\r\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\r\n    return `m/44'/60'/${index}'/0/0`;\r\n}\r\n/**\r\n *  Returns the path using an alternative pattern for deriving accounts,\r\n *  at %%index%%.\r\n *\r\n *  This derivation path uses the //index// component rather than the\r\n *  //account// component to derive sequential accounts.\r\n *\r\n *  This is the pattern used by wallets like MetaMask.\r\n */\r\nexport function getIndexedAccountPath(_index) {\r\n    const index = getNumber(_index, \"index\");\r\n    assertArgument(index >= 0 && index < HardenedBit, \"invalid account index\", \"index\", index);\r\n    return `m/44'/60'/0'/0/${index}`;\r\n}\r\n//# sourceMappingURL=hdwallet.js.map","/**\r\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\r\n */\r\nimport { CBC, pkcs7Strip } from \"aes-js\";\r\nimport { getAddress } from \"../address/index.js\";\r\nimport { pbkdf2 } from \"../crypto/index.js\";\r\nimport { id } from \"../hash/index.js\";\r\nimport { getBytes, assertArgument } from \"../utils/index.js\";\r\nimport { getPassword, looseArrayify, spelunk } from \"./utils.js\";\r\n/**\r\n *  Returns true if %%json%% is a valid JSON Crowdsale wallet.\r\n */\r\nexport function isCrowdsaleJson(json) {\r\n    try {\r\n        const data = JSON.parse(json);\r\n        if (data.encseed) {\r\n            return true;\r\n        }\r\n    }\r\n    catch (error) { }\r\n    return false;\r\n}\r\n// See: https://github.com/ethereum/pyethsaletool\r\n/**\r\n *  Before Ethereum launched, it was necessary to create a wallet\r\n *  format for backers to use, which would be used to receive ether\r\n *  as a reward for contributing to the project.\r\n *\r\n *  The [[link-crowdsale]] format is now obsolete, but it is still\r\n *  useful to support and the additional code is fairly trivial as\r\n *  all the primitives required are used through core portions of\r\n *  the library.\r\n */\r\nexport function decryptCrowdsaleJson(json, _password) {\r\n    const data = JSON.parse(json);\r\n    const password = getPassword(_password);\r\n    // Ethereum Address\r\n    const address = getAddress(spelunk(data, \"ethaddr:string!\"));\r\n    // Encrypted Seed\r\n    const encseed = looseArrayify(spelunk(data, \"encseed:string!\"));\r\n    assertArgument(encseed && (encseed.length % 16) === 0, \"invalid encseed\", \"json\", json);\r\n    const key = getBytes(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\r\n    const iv = encseed.slice(0, 16);\r\n    const encryptedSeed = encseed.slice(16);\r\n    // Decrypt the seed\r\n    const aesCbc = new CBC(key, iv);\r\n    const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));\r\n    // This wallet format is weird... Convert the binary encoded hex to a string.\r\n    let seedHex = \"\";\r\n    for (let i = 0; i < seed.length; i++) {\r\n        seedHex += String.fromCharCode(seed[i]);\r\n    }\r\n    return { address, privateKey: id(seedHex) };\r\n}\r\n//# sourceMappingURL=json-crowdsale.js.map","import { SigningKey } from \"../crypto/index.js\";\r\nimport { assertArgument } from \"../utils/index.js\";\r\nimport { BaseWallet } from \"./base-wallet.js\";\r\nimport { HDNodeWallet } from \"./hdwallet.js\";\r\nimport { decryptCrowdsaleJson, isCrowdsaleJson } from \"./json-crowdsale.js\";\r\nimport { decryptKeystoreJson, decryptKeystoreJsonSync, encryptKeystoreJson, encryptKeystoreJsonSync, isKeystoreJson } from \"./json-keystore.js\";\r\nimport { Mnemonic } from \"./mnemonic.js\";\r\nfunction stall(duration) {\r\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\r\n}\r\n/**\r\n *  A **Wallet** manages a single private key which is used to sign\r\n *  transactions, messages and other common payloads.\r\n *\r\n *  This class is generally the main entry point for developers\r\n *  that wish to use a private key directly, as it can create\r\n *  instances from a large variety of common sources, including\r\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\r\n *  wallets.\r\n */\r\nexport class Wallet extends BaseWallet {\r\n    /**\r\n     *  Create a new wallet for the private %%key%%, optionally connected\r\n     *  to %%provider%%.\r\n     */\r\n    constructor(key, provider) {\r\n        if (typeof (key) === \"string\" && !key.startsWith(\"0x\")) {\r\n            key = \"0x\" + key;\r\n        }\r\n        let signingKey = (typeof (key) === \"string\") ? new SigningKey(key) : key;\r\n        super(signingKey, provider);\r\n    }\r\n    connect(provider) {\r\n        return new Wallet(this.signingKey, provider);\r\n    }\r\n    /**\r\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\r\n     *  %%password%%.\r\n     *\r\n     *  If %%progressCallback%% is specified, it will receive periodic\r\n     *  updates as the encryption process progreses.\r\n     */\r\n    async encrypt(password, progressCallback) {\r\n        const account = { address: this.address, privateKey: this.privateKey };\r\n        return await encryptKeystoreJson(account, password, { progressCallback });\r\n    }\r\n    /**\r\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\r\n     *  %%password%%.\r\n     *\r\n     *  It is preferred to use the [async version](encrypt) instead,\r\n     *  which allows a [[ProgressCallback]] to keep the user informed.\r\n     *\r\n     *  This method will block the event loop (freezing all UI) until\r\n     *  it is complete, which may be a non-trivial duration.\r\n     */\r\n    encryptSync(password) {\r\n        const account = { address: this.address, privateKey: this.privateKey };\r\n        return encryptKeystoreJsonSync(account, password);\r\n    }\r\n    static #fromAccount(account) {\r\n        assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\r\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\r\n            const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\r\n            const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\r\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\r\n                return wallet;\r\n            }\r\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\r\n        }\r\n        const wallet = new Wallet(account.privateKey);\r\n        assertArgument(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\r\n        return wallet;\r\n    }\r\n    /**\r\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\r\n     *  with %%password%%.\r\n     *\r\n     *  If %%progress%% is provided, it is called periodically during\r\n     *  decryption so that any UI can be updated.\r\n     */\r\n    static async fromEncryptedJson(json, password, progress) {\r\n        let account = null;\r\n        if (isKeystoreJson(json)) {\r\n            account = await decryptKeystoreJson(json, password, progress);\r\n        }\r\n        else if (isCrowdsaleJson(json)) {\r\n            if (progress) {\r\n                progress(0);\r\n                await stall(0);\r\n            }\r\n            account = decryptCrowdsaleJson(json, password);\r\n            if (progress) {\r\n                progress(1);\r\n                await stall(0);\r\n            }\r\n        }\r\n        return Wallet.#fromAccount(account);\r\n    }\r\n    /**\r\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\r\n     *\r\n     *  The [[fromEncryptedJson]] method is preferred, as this method\r\n     *  will lock up and freeze the UI during decryption, which may take\r\n     *  some time.\r\n     */\r\n    static fromEncryptedJsonSync(json, password) {\r\n        let account = null;\r\n        if (isKeystoreJson(json)) {\r\n            account = decryptKeystoreJsonSync(json, password);\r\n        }\r\n        else if (isCrowdsaleJson(json)) {\r\n            account = decryptCrowdsaleJson(json, password);\r\n        }\r\n        else {\r\n            assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\r\n        }\r\n        return Wallet.#fromAccount(account);\r\n    }\r\n    /**\r\n     *  Creates a new random [[HDNodeWallet]] using the available\r\n     *  [cryptographic random source](randomBytes).\r\n     *\r\n     *  If there is no crytographic random source, this will throw.\r\n     */\r\n    static createRandom(provider) {\r\n        const wallet = HDNodeWallet.createRandom();\r\n        if (provider) {\r\n            return wallet.connect(provider);\r\n        }\r\n        return wallet;\r\n    }\r\n    /**\r\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\r\n     */\r\n    static fromPhrase(phrase, provider) {\r\n        const wallet = HDNodeWallet.fromPhrase(phrase);\r\n        if (provider) {\r\n            return wallet.connect(provider);\r\n        }\r\n        return wallet;\r\n    }\r\n}\r\n//# sourceMappingURL=wallet.js.map"],"names":["version","resolveProperties","value","keys","k","accum","v","index","defineProperties","target","values","types","key","stringify","HEX","result","i","makeError","message","code","info","shortMessage","details","error","assert","check","assertArgument","name","_normalizeForms","form","assertNormalize","assertPrivate","givenGuard","guard","className","method","operation","_getBytes","copy","offset","getBytes","getBytesCopy","isHexString","length","isBytesLike","HexCharacters","hexlify","data","bytes","concat","datas","d","dataLength","dataSlice","start","end","zeroPad","left","zeroPadValue","BN_0","BN_1","maxValue","toTwos","_value","_width","getBigInt","width","getNumber","limit","mask","_bits","getUint","bits","e","Nibbles","toBigInt","toBeHex","toBeArray","hex","toQuantity","Alphabet","Lookup","getAlpha","letter","BN_58","encodeBase58","decodeBase58","toUtf8Bytes","str","c","c2","pair","hexlifyByte","unarrayifyInteger","_decodeChildren","childOffset","decoded","_decode","checkOffset","lengthLength","decodeRlp","_data","arrayifyInteger","_encode","object","payload","child","nibbles","encodeRlp","uuidV4","randomBytes","number","b","lengths","hash","exists","instance","checkFinished","output","out","min","crypto","u8a","a","u32","arr","createView","rotr","word","shift","isLE","nextTick","asyncLoop","iters","tick","cb","ts","diff","utf8ToBytes","toBytes","concatBytes","arrays","r","sum","pad","Hash","toStr","checkOpts","defaults","opts","wrapConstructor","hashCons","hashC","msg","tmp","bytesLength","HMAC","_key","assertHash","blockLen","buf","assertExists","assertBytes","to","oHash","iHash","finished","destroyed","outputLen","hmac","pbkdf2Init","_password","_salt","_opts","dkLen","asyncTick","assertNumber","password","salt","DK","PRF","PRFSalt","pbkdf2Output","prfW","u","pbkdf2","view","ti","pos","Ti","ui","setBigUint64","byteOffset","_32n","_u32_max","wh","wl","h","l","SHA2","padOffset","buffer","len","take","dataView","oview","outLen","state","res","Chi","Maj","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","W15","W2","s0","s1","sigma1","T1","T2","sha256","U32_MASK64","fromBig","le","split","lst","Ah","Al","toBig","shrSH","_l","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","_h","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","u64","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","sha512","getGlobal","anyGlobal","createHash","algo","createHmac","_algo","pbkdf2Sync","iterations","keylen","locked","_computeHmac","algorithm","__computeHmac","computeHmac","func","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","round","R","x","y","t","j","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","keccakP","rounds","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","Keccak","suffix","enableXOF","bufferOut","gen","keccak_256","_keccak256","__keccak256","keccak256","Rho","Id","_","Pi","idxL","idxR","shifts","shiftsL","idx","shiftsR","Kl","Kr","rotl","f","group","z","BUF","RIPEMD160","h0","h1","h2","h3","h4","al","ar","bl","br","cl","cr","dl","dr","el","er","rGroup","hbl","hbr","rl","rr","sl","sr","tl","tr","ripemd160","_ripemd160","noble_ripemd160","__ripemd160","_pbkdf2","__pbkdf2","_randomBytes","crypto_random","__randomBytes","XorAndSalsa","prev","pi","input","ii","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","BlockMix","head","tail","scryptInit","N","p","maxmem","onProgress","blockSize","blockSize32","memUsed","B32","V","blockMixCb","totalBlockMix","callbackPer","blockMixCnt","scryptOutput","scrypt","scryptAsync","lockedSync","lockedAsync","_scryptAsync","passwd","_nobleAsync","_scryptSync","_nobleSync","__scryptAsync","__scryptSync","_passwd","progress","scryptSync","_sha256","__sha256","locked256","hexes","bytesToHex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","hexByte","byte","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","equalBytes","b1","b2","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","reset","reseed","seed","pred","validatorFns","val","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","_3n","_4n","_5n","_8n","mod","pow","power","modulo","pow2","invert","q","m","tonelliShanks","P","legendreC","Q","S","Z","p1div4","Fp","n","root","Q1div2","g","t2","ge","FpSqrt","c1","n2","nv","FIELD_FIELDS","validateField","field","initial","map","FpPow","FpInvertBatch","nums","lastMultiplied","acc","inverted","nLength","nBitLength","_nBitLength","nByteLength","Field","ORDER","redef","BITS","BYTES","sqrtP","lhs","rhs","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","mapHashToField","fieldLen","minLen","reduced","wNAF","constTimeNegate","condition","item","neg","W","windows","windowSize","elm","points","base","window","precomputes","maxNumber","shiftBy","wbits","offset1","offset2","cond1","cond2","precomputesMap","transform","comp","validateBasic","curve","validatePointOpts","ut.validateObject","endo","b2n","h2b","ut","DER","sBytes","rBytesLeft","sig","slice","shl","rhl","weierstrassPoints","CURVE","_c","point","_isCompressed","ut.concatBytes","fromBytes","weierstrassEquation","x2","x3","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","wrapPrivateKey","ut.bytesToHex","ut.bytesToNumberBE","mod.mod","pointPrecomputes","assertPrjPoint","other","Point","px","py","pz","is0","toInv","privateKey","right","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","wnaf","I","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f1p","f2p","mul","iz","ax","ay","zz","cofactor","isTorsionFree","clearCofactor","isCompressed","validateOpts","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","isValidFieldElement","modN","invN","mod.invert","cat","y2","isYOdd","numToNByteStr","ut.numberToBytesBE","isBiggerThanHalfOrder","HALF","normalizeS","slcNum","from","Signature","recovery","msgHash","rec","bits2int_modN","radj","prefix","ir","u1","u2","ut.hexToBytes","utils","mod.getMinHashLength","mod.mapHashToField","getPublicKey","isProbPub","getSharedSecret","privateA","publicB","bits2int","delta","ORDER_MASK","ut.bitMask","int2octets","prepSig","defaultSigOpts","lowS","prehash","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","sign","privKey","ut.createHmacDrbg","verify","signature","publicKey","_a","sg","_sig","derError","is","getHash","msgs","createCurve","defHash","create","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","a1","a2","POW_2_128","ZeroAddress","ZeroHash","MessagePrefix","BN_2","BN_27","BN_28","BN_35","_guard","toUint256","_r","_s","_v","_networkV","_Signature","__privateAdd","__privateSet","__privateGet","yParityAndS","clone","networkV","bv","chainId","assertError","yParity","_privateKey","_SigningKey","digest","pubKey","compressed","pub","secpSig","p0","p1","pub0","pub1","SigningKey","BN_36","getChecksumAddress","address","chars","expanded","hashed","ibanLookup","safeDigits","ibanChecksum","block","checksum","Base36","fromBase36","getAddress","isAddressable","checkAddress","promise","resolveAddress","resolver","id","accessSetify","addr","storageKeys","storageKey","accessListify","set","computeAddress","pubkey","recoverAddress","BN_MAX_UINT","BLOB_SIZE","getVersionedHash","versioned","handleAddress","handleAccessList","param","handleNumber","handleUint","formatNumber","formatAccessList","formatHashes","_parseLegacy","fields","tx","_serializeLegacy","legacy","_parseEipSignature","_parseEip1559","_serializeEip1559","_parseEip2930","_serializeEip2930","_parseEip4844","typeName","blobs","fBlobs","fCommits","fProofs","_serializeEip4844","_type","_to","_nonce","_gasLimit","_gasPrice","_maxPriorityFeePerGas","_maxFeePerGas","_chainId","_accessList","_maxFeePerBlobGas","_blobVersionedHashes","_kzg","_blobs","_Transaction_instances","getSerialized_fn","_Transaction","versionedHashes","blob","padded","commit","proof","kzg","__privateMethod","hasGasPrice","hasFee","hasAccessList","hasBlob","signed","sidecar","Transaction","hashMessage","padding","BN__1","BN_MAX_UINT256","hexPadRight","hexTrue","hexFalse","domainFieldTypes","domainFieldNames","checkString","domainChecks","getBaseEncoder","match","boundsUpper","boundsLower","encodeType","splitArray","_types","_fullTypes","_encoderCache","_TypedDataEncoder_instances","getEncoder_fn","_TypedDataEncoder","__publicField","links","parents","subtypes","uniqueNames","baseType","primaryTypes","checkCircular","found","subtype","st","encoder","callback","domain","domainFields","resolveName","ensCache","domainValues","domainTypes","typesWithDomain","subEncoder","encodedType","TypedDataEncoder","copyRequest","req","bigIntKeys","numberKeys","checkProvider","signer","populate","pop","AbstractSigner","provider","blockTag","network","hasEip1559","feeData","gasPrice","txObj","_VoidSigner_instances","throwUnsupported_fn","_VoidSigner","VoidSigner","_signingKey","_BaseWallet","btx","populated","BaseWallet","subsChrs","Word","unfold","words","sep","decode","subs","clumps","leftover","all","semi","decodeOwl","Wordlist","locale","phrase","_checksum","_words","_WordlistOwl_instances","loadWords_fn","WordlistOwl","wordlist","LangEn","getUpperMask","getLowerMask","mnemonicToEntropy","mnemonic","entropy","bit","entropyBits","checksumBits","checksumMask","entropyToMnemonic","indices","remainingBits","Mnemonic","_entropy","__classPrivateFieldGet","receiver","kind","__classPrivateFieldSet","_AES_key","_AES_Kd","_AES_Ke","numberOfRounds","rcon","Si","T3","T4","T5","T6","T7","T8","U3","U4","convertToInt32","AES","roundKeyCount","KC","tk","rconpointer","tt","plaintext","ciphertext","ModeOfOperation","cls","_CBC_iv","_CBC_lastBlock","CBC","iv","_CTR_remaining","_CTR_remainingIndex","_CTR_counter","CTR","initialValue","_b","crypttext","pkcs7Strip","padder","looseArrayify","hexString","zpad","getPassword","spelunk","_path","path","reqd","cur","defaultPath","isKeystoreJson","json","decrypt","aesCtr","getAccount","computedMAC","account","mnemonicKey","mnemonicCiphertext","mnemonicIv","mnemonicAesCtr","getDecryptKdfParams","kdf","prf","count","decryptKeystoreJsonSync","params","stall","duration","resolve","decryptKeystoreJson","getEncryptKdfParams","options","_encryptKeystore","uuidRandom","derivedKey","macPrefix","mac","client","now","gethFilename","encryptKeystoreJsonSync","passwordBytes","encryptKeystoreJson","MasterSecret","HardenedBit","encodeBase58Check","ser_I","chainCode","derivePath","node","components","component","_HDNodeWallet_instances","account_fn","_HDNodeWallet_static","fromSeed_fn","_HDNodeWallet","signingKey","parentFingerprint","depth","fingerprint","progressCallback","HDNodeVoidWallet","_index","IR","IL","ki","extendedKey","_seed","HDNodeWallet","Ki","isCrowdsaleJson","decryptCrowdsaleJson","encseed","encryptedSeed","aesCbc","seedHex","_Wallet_static","fromAccount_fn","_Wallet","wallet","Wallet"],"mappings":"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,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,EAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,EAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,EAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,EAAI,EACngDoepgD/xpgpgG+xpgpgGC,GAAK,CAAC,WAAY,WAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,SAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,EAAY,UAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WA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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66]}